{"ast":null,"code":"import clsx from 'clsx';\nimport React from 'react';\nimport { useEnrichedMessages, useMessageListElements, useScrollLocationLogic, useUnreadMessagesNotification } from './hooks/MessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { DialogManagerProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { MessageListContextProvider } from '../../context/MessageListContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { defaultRenderMessages } from './renderMessages';\nimport { DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nconst MessageListWithContext = props => {\n  const {\n    channel,\n    channelUnreadUiState,\n    disableDateSeparator = false,\n    groupStyles,\n    hideDeletedMessages = false,\n    hideNewMessageSeparator = false,\n    internalInfiniteScrollProps: {\n      threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD,\n      ...restInternalInfiniteScrollProps\n    } = {},\n    maxTimeBetweenGroupedMessages,\n    messageActions = Object.keys(MESSAGE_ACTIONS),\n    messages = [],\n    notifications,\n    noGroupByUser = false,\n    pinPermissions = defaultPinPermissions,\n    // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    returnAllReadData = false,\n    threadList = false,\n    unsafeHTML = false,\n    headerPosition,\n    read,\n    renderMessages = defaultRenderMessages,\n    reviewProcessedMessage,\n    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,\n    loadMore: loadMoreCallback,\n    loadMoreNewer: loadMoreNewerCallback,\n    hasMoreNewer = false,\n    reactionDetailsSort,\n    showUnreadNotificationAlways,\n    sortReactionDetails,\n    sortReactions,\n    suppressAutoscroll,\n    highlightedMessageId,\n    jumpToLatestMessage = () => Promise.resolve()\n  } = props;\n  const [listElement, setListElement] = React.useState(null);\n  const [ulElement, setUlElement] = React.useState(null);\n  const {\n    customClasses\n  } = useChatContext('MessageList');\n  const {\n    EmptyStateIndicator = DefaultEmptyStateIndicator,\n    LoadingIndicator = DefaultLoadingIndicator,\n    MessageListNotifications = DefaultMessageListNotifications,\n    MessageNotification = DefaultMessageNotification,\n    TypingIndicator = DefaultTypingIndicator,\n    UnreadMessagesNotification = DefaultUnreadMessagesNotification,\n    MessageListMainPanel = DefaultMessageListMainPanel\n  } = useComponentContext('MessageList');\n  const {\n    hasNewMessages,\n    isMessageListScrolledToBottom,\n    onScroll,\n    scrollToBottom,\n    wrapperRect\n  } = useScrollLocationLogic({\n    hasMoreNewer,\n    listElement,\n    loadMoreScrollThreshold,\n    messages,\n    scrolledUpThreshold: props.scrolledUpThreshold,\n    suppressAutoscroll\n  });\n  const {\n    show: showUnreadMessagesNotification\n  } = useUnreadMessagesNotification({\n    isMessageListScrolledToBottom,\n    showAlways: !!showUnreadNotificationAlways,\n    unreadCount: channelUnreadUiState?.unread_messages\n  });\n  useMarkRead({\n    isMessageListScrolledToBottom,\n    messageListIsThread: threadList,\n    unreadCount: channelUnreadUiState?.unread_messages ?? 0,\n    wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id\n  });\n  const {\n    messageGroupStyles,\n    messages: enrichedMessages\n  } = useEnrichedMessages({\n    channel,\n    disableDateSeparator,\n    groupStyles,\n    headerPosition,\n    hideDeletedMessages,\n    hideNewMessageSeparator,\n    maxTimeBetweenGroupedMessages,\n    messages,\n    noGroupByUser,\n    reviewProcessedMessage\n  });\n  const elements = useMessageListElements({\n    channelUnreadUiState,\n    enrichedMessages,\n    internalMessageProps: {\n      additionalMessageInputProps: props.additionalMessageInputProps,\n      closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n      customMessageActions: props.customMessageActions,\n      disableQuotedMessages: props.disableQuotedMessages,\n      formatDate: props.formatDate,\n      getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n      getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n      getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n      getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,\n      getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,\n      getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n      getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n      getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n      Message: props.Message,\n      messageActions,\n      messageListRect: wrapperRect,\n      onlySenderCanEdit: props.onlySenderCanEdit,\n      onMentionsClick: props.onMentionsClick,\n      onMentionsHover: props.onMentionsHover,\n      onUserClick: props.onUserClick,\n      onUserHover: props.onUserHover,\n      openThread: props.openThread,\n      pinPermissions,\n      reactionDetailsSort,\n      renderText: props.renderText,\n      retrySendMessage: props.retrySendMessage,\n      sortReactionDetails,\n      sortReactions,\n      unsafeHTML\n    },\n    messageGroupStyles,\n    read,\n    renderMessages,\n    returnAllReadData,\n    threadList\n  });\n  const messageListClass = customClasses?.messageList || 'str-chat__list';\n  const loadMore = React.useCallback(() => {\n    if (loadMoreCallback) {\n      loadMoreCallback(messageLimit);\n    }\n  }, [loadMoreCallback, messageLimit]);\n  const loadMoreNewer = React.useCallback(() => {\n    if (loadMoreNewerCallback) {\n      loadMoreNewerCallback(messageLimit);\n    }\n  }, [loadMoreNewerCallback, messageLimit]);\n  const scrollToBottomFromNotification = React.useCallback(async () => {\n    if (hasMoreNewer) {\n      await jumpToLatestMessage();\n    } else {\n      scrollToBottom();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [scrollToBottom, hasMoreNewer]);\n  React.useLayoutEffect(() => {\n    if (highlightedMessageId) {\n      const element = ulElement?.querySelector(`[data-message-id='${highlightedMessageId}']`);\n      element?.scrollIntoView({\n        block: 'center'\n      });\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [highlightedMessageId]);\n  const showEmptyStateIndicator = elements.length === 0 && !threadList;\n  const dialogManagerId = threadList ? 'message-list-dialog-manager-thread' : 'message-list-dialog-manager';\n  return React.createElement(MessageListContextProvider, {\n    value: {\n      listElement,\n      scrollToBottom\n    }\n  }, React.createElement(MessageListMainPanel, null, React.createElement(DialogManagerProvider, {\n    id: dialogManagerId\n  }, !threadList && showUnreadMessagesNotification && React.createElement(UnreadMessagesNotification, {\n    unreadCount: channelUnreadUiState?.unread_messages\n  }), React.createElement(\"div\", {\n    className: clsx(messageListClass, customClasses?.threadList),\n    onScroll: onScroll,\n    ref: setListElement,\n    tabIndex: 0\n  }, showEmptyStateIndicator ? React.createElement(EmptyStateIndicator, {\n    listType: threadList ? 'thread' : 'message'\n  }) : React.createElement(InfiniteScroll, {\n    className: 'str-chat__message-list-scroll',\n    \"data-testid\": 'reverse-infinite-scroll',\n    hasNextPage: props.hasMoreNewer,\n    hasPreviousPage: props.hasMore,\n    head: props.head,\n    isLoading: props.loadingMore,\n    loader: React.createElement(\"div\", {\n      className: 'str-chat__list__loading',\n      key: 'loading-indicator'\n    }, props.loadingMore && React.createElement(LoadingIndicator, {\n      size: 20\n    })),\n    loadNextPage: loadMoreNewer,\n    loadPreviousPage: loadMore,\n    threshold: loadMoreScrollThreshold,\n    ...restInternalInfiniteScrollProps\n  }, React.createElement(\"ul\", {\n    className: 'str-chat__ul',\n    ref: setUlElement\n  }, elements), React.createElement(TypingIndicator, {\n    threadList: threadList\n  }), React.createElement(\"div\", {\n    key: 'bottom'\n  }))))), React.createElement(MessageListNotifications, {\n    hasNewMessages: hasNewMessages,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    isNotAtLatestMessageSet: hasMoreNewer,\n    MessageNotification: MessageNotification,\n    notifications: notifications,\n    scrollToBottom: scrollToBottomFromNotification,\n    threadList: threadList,\n    unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages\n  }));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport const MessageList = props => {\n  const {\n    jumpToLatestMessage,\n    loadMore,\n    loadMoreNewer\n  } = useChannelActionContext('MessageList');\n  const {\n    members: membersPropToNotPass,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    mutes: mutesPropToNotPass,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    watchers: watchersPropToNotPass,\n    // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...restChannelStateContext\n  } = useChannelStateContext('MessageList');\n  return React.createElement(MessageListWithContext, {\n    jumpToLatestMessage: jumpToLatestMessage,\n    loadMore: loadMore,\n    loadMoreNewer: loadMoreNewer,\n    ...restChannelStateContext,\n    ...props\n  });\n};","map":{"version":3,"names":["clsx","React","useEnrichedMessages","useMessageListElements","useScrollLocationLogic","useUnreadMessagesNotification","useMarkRead","MessageNotification","DefaultMessageNotification","MessageListNotifications","DefaultMessageListNotifications","UnreadMessagesNotification","DefaultUnreadMessagesNotification","useChannelActionContext","useChannelStateContext","DialogManagerProvider","useChatContext","useComponentContext","MessageListContextProvider","EmptyStateIndicator","DefaultEmptyStateIndicator","InfiniteScroll","LoadingIndicator","DefaultLoadingIndicator","defaultPinPermissions","MESSAGE_ACTIONS","TypingIndicator","DefaultTypingIndicator","MessageListMainPanel","DefaultMessageListMainPanel","defaultRenderMessages","DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD","DEFAULT_NEXT_CHANNEL_PAGE_SIZE","MessageListWithContext","props","channel","channelUnreadUiState","disableDateSeparator","groupStyles","hideDeletedMessages","hideNewMessageSeparator","internalInfiniteScrollProps","threshold","loadMoreScrollThreshold","restInternalInfiniteScrollProps","maxTimeBetweenGroupedMessages","messageActions","Object","keys","messages","notifications","noGroupByUser","pinPermissions","returnAllReadData","threadList","unsafeHTML","headerPosition","read","renderMessages","reviewProcessedMessage","messageLimit","loadMore","loadMoreCallback","loadMoreNewer","loadMoreNewerCallback","hasMoreNewer","reactionDetailsSort","showUnreadNotificationAlways","sortReactionDetails","sortReactions","suppressAutoscroll","highlightedMessageId","jumpToLatestMessage","Promise","resolve","listElement","setListElement","useState","ulElement","setUlElement","customClasses","hasNewMessages","isMessageListScrolledToBottom","onScroll","scrollToBottom","wrapperRect","scrolledUpThreshold","show","showUnreadMessagesNotification","showAlways","unreadCount","unread_messages","messageListIsThread","wasMarkedUnread","first_unread_message_id","messageGroupStyles","enrichedMessages","elements","internalMessageProps","additionalMessageInputProps","closeReactionSelectorOnClick","customMessageActions","disableQuotedMessages","formatDate","getDeleteMessageErrorNotification","getFlagMessageErrorNotification","getFlagMessageSuccessNotification","getMarkMessageUnreadErrorNotification","getMarkMessageUnreadSuccessNotification","getMuteUserErrorNotification","getMuteUserSuccessNotification","getPinMessageErrorNotification","Message","messageListRect","onlySenderCanEdit","onMentionsClick","onMentionsHover","onUserClick","onUserHover","openThread","renderText","retrySendMessage","messageListClass","messageList","useCallback","scrollToBottomFromNotification","useLayoutEffect","element","querySelector","scrollIntoView","block","showEmptyStateIndicator","length","dialogManagerId","createElement","value","id","className","ref","tabIndex","listType","hasNextPage","hasPreviousPage","hasMore","head","isLoading","loadingMore","loader","key","size","loadNextPage","loadPreviousPage","isNotAtLatestMessageSet","undefined","MessageList","members","membersPropToNotPass","mutes","mutesPropToNotPass","watchers","watchersPropToNotPass","restChannelStateContext"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageList/MessageList.js"],"sourcesContent":["import clsx from 'clsx';\nimport React from 'react';\nimport { useEnrichedMessages, useMessageListElements, useScrollLocationLogic, useUnreadMessagesNotification, } from './hooks/MessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { useChannelActionContext, } from '../../context/ChannelActionContext';\nimport { useChannelStateContext, } from '../../context/ChannelStateContext';\nimport { DialogManagerProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { MessageListContextProvider } from '../../context/MessageListContext';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { InfiniteScroll } from '../InfiniteScrollPaginator/InfiniteScroll';\nimport { LoadingIndicator as DefaultLoadingIndicator } from '../Loading';\nimport { defaultPinPermissions, MESSAGE_ACTIONS } from '../Message/utils';\nimport { TypingIndicator as DefaultTypingIndicator } from '../TypingIndicator';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { defaultRenderMessages } from './renderMessages';\nimport { DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, DEFAULT_NEXT_CHANNEL_PAGE_SIZE, } from '../../constants/limits';\nconst MessageListWithContext = (props) => {\n    const { channel, channelUnreadUiState, disableDateSeparator = false, groupStyles, hideDeletedMessages = false, hideNewMessageSeparator = false, internalInfiniteScrollProps: { threshold: loadMoreScrollThreshold = DEFAULT_LOAD_PAGE_SCROLL_THRESHOLD, ...restInternalInfiniteScrollProps } = {}, maxTimeBetweenGroupedMessages, messageActions = Object.keys(MESSAGE_ACTIONS), messages = [], notifications, noGroupByUser = false, pinPermissions = defaultPinPermissions, // @deprecated in favor of `channelCapabilities` - TODO: remove in next major release\n    returnAllReadData = false, threadList = false, unsafeHTML = false, headerPosition, read, renderMessages = defaultRenderMessages, reviewProcessedMessage, messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE, loadMore: loadMoreCallback, loadMoreNewer: loadMoreNewerCallback, hasMoreNewer = false, reactionDetailsSort, showUnreadNotificationAlways, sortReactionDetails, sortReactions, suppressAutoscroll, highlightedMessageId, jumpToLatestMessage = () => Promise.resolve(), } = props;\n    const [listElement, setListElement] = React.useState(null);\n    const [ulElement, setUlElement] = React.useState(null);\n    const { customClasses } = useChatContext('MessageList');\n    const { EmptyStateIndicator = DefaultEmptyStateIndicator, LoadingIndicator = DefaultLoadingIndicator, MessageListNotifications = DefaultMessageListNotifications, MessageNotification = DefaultMessageNotification, TypingIndicator = DefaultTypingIndicator, UnreadMessagesNotification = DefaultUnreadMessagesNotification, MessageListMainPanel = DefaultMessageListMainPanel, } = useComponentContext('MessageList');\n    const { hasNewMessages, isMessageListScrolledToBottom, onScroll, scrollToBottom, wrapperRect, } = useScrollLocationLogic({\n        hasMoreNewer,\n        listElement,\n        loadMoreScrollThreshold,\n        messages,\n        scrolledUpThreshold: props.scrolledUpThreshold,\n        suppressAutoscroll,\n    });\n    const { show: showUnreadMessagesNotification } = useUnreadMessagesNotification({\n        isMessageListScrolledToBottom,\n        showAlways: !!showUnreadNotificationAlways,\n        unreadCount: channelUnreadUiState?.unread_messages,\n    });\n    useMarkRead({\n        isMessageListScrolledToBottom,\n        messageListIsThread: threadList,\n        unreadCount: channelUnreadUiState?.unread_messages ?? 0,\n        wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id,\n    });\n    const { messageGroupStyles, messages: enrichedMessages } = useEnrichedMessages({\n        channel,\n        disableDateSeparator,\n        groupStyles,\n        headerPosition,\n        hideDeletedMessages,\n        hideNewMessageSeparator,\n        maxTimeBetweenGroupedMessages,\n        messages,\n        noGroupByUser,\n        reviewProcessedMessage,\n    });\n    const elements = useMessageListElements({\n        channelUnreadUiState,\n        enrichedMessages,\n        internalMessageProps: {\n            additionalMessageInputProps: props.additionalMessageInputProps,\n            closeReactionSelectorOnClick: props.closeReactionSelectorOnClick,\n            customMessageActions: props.customMessageActions,\n            disableQuotedMessages: props.disableQuotedMessages,\n            formatDate: props.formatDate,\n            getDeleteMessageErrorNotification: props.getDeleteMessageErrorNotification,\n            getFlagMessageErrorNotification: props.getFlagMessageErrorNotification,\n            getFlagMessageSuccessNotification: props.getFlagMessageSuccessNotification,\n            getMarkMessageUnreadErrorNotification: props.getMarkMessageUnreadErrorNotification,\n            getMarkMessageUnreadSuccessNotification: props.getMarkMessageUnreadSuccessNotification,\n            getMuteUserErrorNotification: props.getMuteUserErrorNotification,\n            getMuteUserSuccessNotification: props.getMuteUserSuccessNotification,\n            getPinMessageErrorNotification: props.getPinMessageErrorNotification,\n            Message: props.Message,\n            messageActions,\n            messageListRect: wrapperRect,\n            onlySenderCanEdit: props.onlySenderCanEdit,\n            onMentionsClick: props.onMentionsClick,\n            onMentionsHover: props.onMentionsHover,\n            onUserClick: props.onUserClick,\n            onUserHover: props.onUserHover,\n            openThread: props.openThread,\n            pinPermissions,\n            reactionDetailsSort,\n            renderText: props.renderText,\n            retrySendMessage: props.retrySendMessage,\n            sortReactionDetails,\n            sortReactions,\n            unsafeHTML,\n        },\n        messageGroupStyles,\n        read,\n        renderMessages,\n        returnAllReadData,\n        threadList,\n    });\n    const messageListClass = customClasses?.messageList || 'str-chat__list';\n    const loadMore = React.useCallback(() => {\n        if (loadMoreCallback) {\n            loadMoreCallback(messageLimit);\n        }\n    }, [loadMoreCallback, messageLimit]);\n    const loadMoreNewer = React.useCallback(() => {\n        if (loadMoreNewerCallback) {\n            loadMoreNewerCallback(messageLimit);\n        }\n    }, [loadMoreNewerCallback, messageLimit]);\n    const scrollToBottomFromNotification = React.useCallback(async () => {\n        if (hasMoreNewer) {\n            await jumpToLatestMessage();\n        }\n        else {\n            scrollToBottom();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [scrollToBottom, hasMoreNewer]);\n    React.useLayoutEffect(() => {\n        if (highlightedMessageId) {\n            const element = ulElement?.querySelector(`[data-message-id='${highlightedMessageId}']`);\n            element?.scrollIntoView({ block: 'center' });\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [highlightedMessageId]);\n    const showEmptyStateIndicator = elements.length === 0 && !threadList;\n    const dialogManagerId = threadList\n        ? 'message-list-dialog-manager-thread'\n        : 'message-list-dialog-manager';\n    return (React.createElement(MessageListContextProvider, { value: { listElement, scrollToBottom } },\n        React.createElement(MessageListMainPanel, null,\n            React.createElement(DialogManagerProvider, { id: dialogManagerId },\n                !threadList && showUnreadMessagesNotification && (React.createElement(UnreadMessagesNotification, { unreadCount: channelUnreadUiState?.unread_messages })),\n                React.createElement(\"div\", { className: clsx(messageListClass, customClasses?.threadList), onScroll: onScroll, ref: setListElement, tabIndex: 0 }, showEmptyStateIndicator ? (React.createElement(EmptyStateIndicator, { listType: threadList ? 'thread' : 'message' })) : (React.createElement(InfiniteScroll, { className: 'str-chat__message-list-scroll', \"data-testid\": 'reverse-infinite-scroll', hasNextPage: props.hasMoreNewer, hasPreviousPage: props.hasMore, head: props.head, isLoading: props.loadingMore, loader: React.createElement(\"div\", { className: 'str-chat__list__loading', key: 'loading-indicator' }, props.loadingMore && React.createElement(LoadingIndicator, { size: 20 })), loadNextPage: loadMoreNewer, loadPreviousPage: loadMore, threshold: loadMoreScrollThreshold, ...restInternalInfiniteScrollProps },\n                    React.createElement(\"ul\", { className: 'str-chat__ul', ref: setUlElement }, elements),\n                    React.createElement(TypingIndicator, { threadList: threadList }),\n                    React.createElement(\"div\", { key: 'bottom' })))))),\n        React.createElement(MessageListNotifications, { hasNewMessages: hasNewMessages, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification, notifications: notifications, scrollToBottom: scrollToBottomFromNotification, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages })));\n};\n/**\n * The MessageList component renders a list of Messages.\n * It is a consumer of the following contexts:\n * - [ChannelStateContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_state_context/)\n * - [ChannelActionContext](https://getstream.io/chat/docs/sdk/react/contexts/channel_action_context/)\n * - [ComponentContext](https://getstream.io/chat/docs/sdk/react/contexts/component_context/)\n * - [TypingContext](https://getstream.io/chat/docs/sdk/react/contexts/typing_context/)\n */\nexport const MessageList = (props) => {\n    const { jumpToLatestMessage, loadMore, loadMoreNewer, } = useChannelActionContext('MessageList');\n    const { members: membersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    mutes: mutesPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    watchers: watchersPropToNotPass, // eslint-disable-line @typescript-eslint/no-unused-vars\n    ...restChannelStateContext } = useChannelStateContext('MessageList');\n    return (React.createElement(MessageListWithContext, { jumpToLatestMessage: jumpToLatestMessage, loadMore: loadMore, loadMoreNewer: loadMoreNewer, ...restChannelStateContext, ...props }));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}