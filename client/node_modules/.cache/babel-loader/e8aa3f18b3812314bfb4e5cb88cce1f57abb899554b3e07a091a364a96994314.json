{"ast":null,"code":"import { useCallback, useEffect, useRef } from 'react';\nimport { logChatPromiseExecution } from 'stream-chat';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport const useMessageInputText = (props, state, dispatch, findAndEnqueueURLsToEnrich) => {\n  const {\n    channel\n  } = useChannelStateContext('useMessageInputText');\n  const {\n    additionalTextareaProps,\n    focus,\n    parent,\n    publishTypingEvent = true\n  } = props;\n  const {\n    text\n  } = state;\n  const textareaRef = useRef();\n  // Focus\n  useEffect(() => {\n    if (focus && textareaRef.current) {\n      textareaRef.current.focus();\n    }\n  }, [focus]);\n  // Text + cursor position\n  const newCursorPosition = useRef();\n  const insertText = useCallback(textToInsert => {\n    const {\n      maxLength\n    } = additionalTextareaProps || {};\n    if (!textareaRef.current) {\n      return dispatch({\n        getNewText: text => {\n          const updatedText = text + textToInsert;\n          if (maxLength && updatedText.length > maxLength) {\n            return updatedText.slice(0, maxLength);\n          }\n          return updatedText;\n        },\n        type: 'setText'\n      });\n    }\n    const {\n      selectionEnd,\n      selectionStart\n    } = textareaRef.current;\n    newCursorPosition.current = selectionStart + textToInsert.length;\n    dispatch({\n      getNewText: prevText => {\n        const updatedText = prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd);\n        if (maxLength && updatedText.length > maxLength) {\n          return updatedText.slice(0, maxLength);\n        }\n        return updatedText;\n      },\n      type: 'setText'\n    });\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [additionalTextareaProps, newCursorPosition, textareaRef]);\n  useEffect(() => {\n    const textareaElement = textareaRef.current;\n    if (textareaElement && newCursorPosition.current !== undefined) {\n      textareaElement.selectionStart = newCursorPosition.current;\n      textareaElement.selectionEnd = newCursorPosition.current;\n      newCursorPosition.current = undefined;\n    }\n  }, [text, newCursorPosition]);\n  const handleChange = useCallback(event => {\n    event.preventDefault();\n    if (!event || !event.target) {\n      return;\n    }\n    const newText = event.target.value;\n    dispatch({\n      getNewText: () => newText,\n      type: 'setText'\n    });\n    findAndEnqueueURLsToEnrich?.(newText);\n    if (publishTypingEvent && newText && channel) {\n      logChatPromiseExecution(channel.keystroke(parent?.id), 'start typing event');\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [channel, findAndEnqueueURLsToEnrich, parent, publishTypingEvent]);\n  return {\n    handleChange,\n    insertText,\n    textareaRef\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","logChatPromiseExecution","useChannelStateContext","useMessageInputText","props","state","dispatch","findAndEnqueueURLsToEnrich","channel","additionalTextareaProps","focus","parent","publishTypingEvent","text","textareaRef","current","newCursorPosition","insertText","textToInsert","maxLength","getNewText","updatedText","length","slice","type","selectionEnd","selectionStart","prevText","textareaElement","undefined","handleChange","event","preventDefault","target","newText","value","keystroke","id"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputText.js"],"sourcesContent":["import { useCallback, useEffect, useRef } from 'react';\nimport { logChatPromiseExecution } from 'stream-chat';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport const useMessageInputText = (props, state, dispatch, findAndEnqueueURLsToEnrich) => {\n    const { channel } = useChannelStateContext('useMessageInputText');\n    const { additionalTextareaProps, focus, parent, publishTypingEvent = true } = props;\n    const { text } = state;\n    const textareaRef = useRef();\n    // Focus\n    useEffect(() => {\n        if (focus && textareaRef.current) {\n            textareaRef.current.focus();\n        }\n    }, [focus]);\n    // Text + cursor position\n    const newCursorPosition = useRef();\n    const insertText = useCallback((textToInsert) => {\n        const { maxLength } = additionalTextareaProps || {};\n        if (!textareaRef.current) {\n            return dispatch({\n                getNewText: (text) => {\n                    const updatedText = text + textToInsert;\n                    if (maxLength && updatedText.length > maxLength) {\n                        return updatedText.slice(0, maxLength);\n                    }\n                    return updatedText;\n                },\n                type: 'setText',\n            });\n        }\n        const { selectionEnd, selectionStart } = textareaRef.current;\n        newCursorPosition.current = selectionStart + textToInsert.length;\n        dispatch({\n            getNewText: (prevText) => {\n                const updatedText = prevText.slice(0, selectionStart) + textToInsert + prevText.slice(selectionEnd);\n                if (maxLength && updatedText.length > maxLength) {\n                    return updatedText.slice(0, maxLength);\n                }\n                return updatedText;\n            },\n            type: 'setText',\n        });\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [additionalTextareaProps, newCursorPosition, textareaRef]);\n    useEffect(() => {\n        const textareaElement = textareaRef.current;\n        if (textareaElement && newCursorPosition.current !== undefined) {\n            textareaElement.selectionStart = newCursorPosition.current;\n            textareaElement.selectionEnd = newCursorPosition.current;\n            newCursorPosition.current = undefined;\n        }\n    }, [text, newCursorPosition]);\n    const handleChange = useCallback((event) => {\n        event.preventDefault();\n        if (!event || !event.target) {\n            return;\n        }\n        const newText = event.target.value;\n        dispatch({\n            getNewText: () => newText,\n            type: 'setText',\n        });\n        findAndEnqueueURLsToEnrich?.(newText);\n        if (publishTypingEvent && newText && channel) {\n            logChatPromiseExecution(channel.keystroke(parent?.id), 'start typing event');\n        }\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [channel, findAndEnqueueURLsToEnrich, parent, publishTypingEvent]);\n    return {\n        handleChange,\n        insertText,\n        textareaRef,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}