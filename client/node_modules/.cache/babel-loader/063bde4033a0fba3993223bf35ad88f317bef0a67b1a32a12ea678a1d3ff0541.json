{"ast":null,"code":"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageErrorIcon } from './icons';\nimport { MessageBouncePrompt as DefaultMessageBouncePrompt } from '../MessageBounce';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageOptions as DefaultMessageOptions } from './MessageOptions';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\nimport { MessageText } from './MessageText';\nimport { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';\nimport { areMessageUIPropsEqual, isMessageBounced, isMessageEdited, messageHasAttachments, messageHasReactions } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nimport { EditMessageForm as DefaultEditMessageForm, MessageInput } from '../MessageInput';\nimport { MML } from '../MML';\nimport { Modal } from '../Modal';\nimport { Poll } from '../Poll';\nimport { ReactionsList as DefaultReactionList } from '../Reactions';\nimport { MessageBounceModal } from '../MessageBounce/MessageBounceModal';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useChatContext, useTranslationContext } from '../../context';\nimport { MessageEditedTimestamp } from './MessageEditedTimestamp';\nconst MessageSimpleWithContext = props => {\n  const {\n    additionalMessageInputProps,\n    clearEditingState,\n    editing,\n    endOfGroup,\n    firstOfGroup,\n    groupedByUser,\n    handleAction,\n    handleOpenThread,\n    handleRetry,\n    highlighted,\n    isMyMessage,\n    message,\n    onUserClick,\n    onUserHover,\n    renderText,\n    threadList\n  } = props;\n  const {\n    client\n  } = useChatContext('MessageSimple');\n  const {\n    t\n  } = useTranslationContext('MessageSimple');\n  const [isBounceDialogOpen, setIsBounceDialogOpen] = useState(false);\n  const [isEditedTimestampOpen, setEditedTimestampOpen] = useState(false);\n  const {\n    Attachment = DefaultAttachment,\n    Avatar = DefaultAvatar,\n    EditMessageInput = DefaultEditMessageForm,\n    MessageOptions = DefaultMessageOptions,\n    // TODO: remove this \"passthrough\" in the next\n    // major release and use the new default instead\n    MessageActions = MessageOptions,\n    MessageDeleted = DefaultMessageDeleted,\n    MessageBouncePrompt = DefaultMessageBouncePrompt,\n    MessageRepliesCountButton = DefaultMessageRepliesCountButton,\n    MessageStatus = DefaultMessageStatus,\n    MessageTimestamp = DefaultMessageTimestamp,\n    ReactionsList = DefaultReactionList,\n    PinIndicator\n  } = useComponentContext('MessageSimple');\n  const hasAttachment = messageHasAttachments(message);\n  const hasReactions = messageHasReactions(message);\n  if (message.customType === CUSTOM_MESSAGE_TYPE.date) {\n    return null;\n  }\n  if (message.deleted_at || message.type === 'deleted') {\n    return React.createElement(MessageDeleted, {\n      message: message\n    });\n  }\n  const showMetadata = !groupedByUser || endOfGroup;\n  const showReplyCountButton = !threadList && !!message.reply_count;\n  const allowRetry = message.status === 'failed' && message.errorStatusCode !== 403;\n  const isBounced = isMessageBounced(message);\n  const isEdited = isMessageEdited(message);\n  let handleClick = undefined;\n  if (allowRetry) {\n    handleClick = () => handleRetry(message);\n  } else if (isBounced) {\n    handleClick = () => setIsBounceDialogOpen(true);\n  } else if (isEdited) {\n    handleClick = () => setEditedTimestampOpen(prev => !prev);\n  }\n  const rootClassName = clsx('str-chat__message str-chat__message-simple', `str-chat__message--${message.type}`, `str-chat__message--${message.status}`, isMyMessage() ? 'str-chat__message--me str-chat__message-simple--me' : 'str-chat__message--other', message.text ? 'str-chat__message--has-text' : 'has-no-text', {\n    'str-chat__message--has-attachment': hasAttachment,\n    'str-chat__message--highlighted': highlighted,\n    'str-chat__message--pinned pinned-message': message.pinned,\n    'str-chat__message--with-reactions': hasReactions,\n    'str-chat__message-send-can-be-retried': message?.status === 'failed' && message?.errorStatusCode !== 403,\n    'str-chat__message-with-thread-link': showReplyCountButton,\n    'str-chat__virtual-message__wrapper--end': endOfGroup,\n    'str-chat__virtual-message__wrapper--first': firstOfGroup,\n    'str-chat__virtual-message__wrapper--group': groupedByUser\n  });\n  const poll = message.poll_id && client.polls.fromState(message.poll_id);\n  return React.createElement(React.Fragment, null, editing && React.createElement(Modal, {\n    className: 'str-chat__edit-message-modal',\n    onClose: clearEditingState,\n    open: editing\n  }, React.createElement(MessageInput, {\n    clearEditingState: clearEditingState,\n    grow: true,\n    hideSendButton: true,\n    Input: EditMessageInput,\n    message: message,\n    ...additionalMessageInputProps\n  })), isBounceDialogOpen && React.createElement(MessageBounceModal, {\n    MessageBouncePrompt: MessageBouncePrompt,\n    onClose: () => setIsBounceDialogOpen(false),\n    open: isBounceDialogOpen\n  }), React.createElement(\"div\", {\n    className: rootClassName,\n    key: message.id\n  }, PinIndicator && React.createElement(PinIndicator, null), message.user && React.createElement(Avatar, {\n    image: message.user.image,\n    name: message.user.name || message.user.id,\n    onClick: onUserClick,\n    onMouseOver: onUserHover,\n    user: message.user\n  }), React.createElement(\"div\", {\n    className: clsx('str-chat__message-inner', {\n      'str-chat__simple-message--error-failed': allowRetry || isBounced\n    }),\n    \"data-testid\": 'message-inner',\n    onClick: handleClick,\n    onKeyUp: handleClick\n  }, React.createElement(MessageActions, null), React.createElement(\"div\", {\n    className: 'str-chat__message-reactions-host'\n  }, hasReactions && React.createElement(ReactionsList, {\n    reverse: true\n  })), React.createElement(\"div\", {\n    className: 'str-chat__message-bubble'\n  }, poll && React.createElement(Poll, {\n    poll: poll\n  }), message.attachments?.length && !message.quoted_message ? React.createElement(Attachment, {\n    actionHandler: handleAction,\n    attachments: message.attachments\n  }) : null, React.createElement(MessageText, {\n    message: message,\n    renderText: renderText\n  }), message.mml && React.createElement(MML, {\n    actionHandler: handleAction,\n    align: isMyMessage() ? 'right' : 'left',\n    source: message.mml\n  }), React.createElement(MessageErrorIcon, null))), showReplyCountButton && React.createElement(MessageRepliesCountButton, {\n    onClick: handleOpenThread,\n    reply_count: message.reply_count\n  }), showMetadata && React.createElement(\"div\", {\n    className: 'str-chat__message-metadata'\n  }, React.createElement(MessageStatus, null), !isMyMessage() && !!message.user && React.createElement(\"span\", {\n    className: 'str-chat__message-simple-name'\n  }, message.user.name || message.user.id), React.createElement(MessageTimestamp, {\n    customClass: 'str-chat__message-simple-timestamp'\n  }), isEdited && React.createElement(\"span\", {\n    className: 'str-chat__mesage-simple-edited'\n  }, t('Edited')), isEdited && React.createElement(MessageEditedTimestamp, {\n    calendar: true,\n    open: isEditedTimestampOpen\n  }))));\n};\nconst MemoizedMessageSimple = React.memo(MessageSimpleWithContext, areMessageUIPropsEqual);\n/**\n * The default UI component that renders a message and receives functionality and logic from the MessageContext.\n */\nexport const MessageSimple = props => {\n  const messageContext = useMessageContext('MessageSimple');\n  return React.createElement(MemoizedMessageSimple, {\n    ...messageContext,\n    ...props\n  });\n};","map":{"version":3,"names":["React","useState","clsx","MessageErrorIcon","MessageBouncePrompt","DefaultMessageBouncePrompt","MessageDeleted","DefaultMessageDeleted","MessageOptions","DefaultMessageOptions","MessageRepliesCountButton","DefaultMessageRepliesCountButton","MessageStatus","DefaultMessageStatus","MessageText","MessageTimestamp","DefaultMessageTimestamp","areMessageUIPropsEqual","isMessageBounced","isMessageEdited","messageHasAttachments","messageHasReactions","Avatar","DefaultAvatar","Attachment","DefaultAttachment","CUSTOM_MESSAGE_TYPE","EditMessageForm","DefaultEditMessageForm","MessageInput","MML","Modal","Poll","ReactionsList","DefaultReactionList","MessageBounceModal","useComponentContext","useMessageContext","useChatContext","useTranslationContext","MessageEditedTimestamp","MessageSimpleWithContext","props","additionalMessageInputProps","clearEditingState","editing","endOfGroup","firstOfGroup","groupedByUser","handleAction","handleOpenThread","handleRetry","highlighted","isMyMessage","message","onUserClick","onUserHover","renderText","threadList","client","t","isBounceDialogOpen","setIsBounceDialogOpen","isEditedTimestampOpen","setEditedTimestampOpen","EditMessageInput","MessageActions","PinIndicator","hasAttachment","hasReactions","customType","date","deleted_at","type","createElement","showMetadata","showReplyCountButton","reply_count","allowRetry","status","errorStatusCode","isBounced","isEdited","handleClick","undefined","prev","rootClassName","text","pinned","poll","poll_id","polls","fromState","Fragment","className","onClose","open","grow","hideSendButton","Input","key","id","user","image","name","onClick","onMouseOver","onKeyUp","reverse","attachments","length","quoted_message","actionHandler","mml","align","source","customClass","calendar","MemoizedMessageSimple","memo","MessageSimple","messageContext"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Message/MessageSimple.js"],"sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { MessageErrorIcon } from './icons';\nimport { MessageBouncePrompt as DefaultMessageBouncePrompt } from '../MessageBounce';\nimport { MessageDeleted as DefaultMessageDeleted } from './MessageDeleted';\nimport { MessageOptions as DefaultMessageOptions } from './MessageOptions';\nimport { MessageRepliesCountButton as DefaultMessageRepliesCountButton } from './MessageRepliesCountButton';\nimport { MessageStatus as DefaultMessageStatus } from './MessageStatus';\nimport { MessageText } from './MessageText';\nimport { MessageTimestamp as DefaultMessageTimestamp } from './MessageTimestamp';\nimport { areMessageUIPropsEqual, isMessageBounced, isMessageEdited, messageHasAttachments, messageHasReactions, } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nimport { EditMessageForm as DefaultEditMessageForm, MessageInput } from '../MessageInput';\nimport { MML } from '../MML';\nimport { Modal } from '../Modal';\nimport { Poll } from '../Poll';\nimport { ReactionsList as DefaultReactionList } from '../Reactions';\nimport { MessageBounceModal } from '../MessageBounce/MessageBounceModal';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useChatContext, useTranslationContext } from '../../context';\nimport { MessageEditedTimestamp } from './MessageEditedTimestamp';\nconst MessageSimpleWithContext = (props) => {\n    const { additionalMessageInputProps, clearEditingState, editing, endOfGroup, firstOfGroup, groupedByUser, handleAction, handleOpenThread, handleRetry, highlighted, isMyMessage, message, onUserClick, onUserHover, renderText, threadList, } = props;\n    const { client } = useChatContext('MessageSimple');\n    const { t } = useTranslationContext('MessageSimple');\n    const [isBounceDialogOpen, setIsBounceDialogOpen] = useState(false);\n    const [isEditedTimestampOpen, setEditedTimestampOpen] = useState(false);\n    const { Attachment = DefaultAttachment, Avatar = DefaultAvatar, EditMessageInput = DefaultEditMessageForm, MessageOptions = DefaultMessageOptions, \n    // TODO: remove this \"passthrough\" in the next\n    // major release and use the new default instead\n    MessageActions = MessageOptions, MessageDeleted = DefaultMessageDeleted, MessageBouncePrompt = DefaultMessageBouncePrompt, MessageRepliesCountButton = DefaultMessageRepliesCountButton, MessageStatus = DefaultMessageStatus, MessageTimestamp = DefaultMessageTimestamp, ReactionsList = DefaultReactionList, PinIndicator, } = useComponentContext('MessageSimple');\n    const hasAttachment = messageHasAttachments(message);\n    const hasReactions = messageHasReactions(message);\n    if (message.customType === CUSTOM_MESSAGE_TYPE.date) {\n        return null;\n    }\n    if (message.deleted_at || message.type === 'deleted') {\n        return React.createElement(MessageDeleted, { message: message });\n    }\n    const showMetadata = !groupedByUser || endOfGroup;\n    const showReplyCountButton = !threadList && !!message.reply_count;\n    const allowRetry = message.status === 'failed' && message.errorStatusCode !== 403;\n    const isBounced = isMessageBounced(message);\n    const isEdited = isMessageEdited(message);\n    let handleClick = undefined;\n    if (allowRetry) {\n        handleClick = () => handleRetry(message);\n    }\n    else if (isBounced) {\n        handleClick = () => setIsBounceDialogOpen(true);\n    }\n    else if (isEdited) {\n        handleClick = () => setEditedTimestampOpen((prev) => !prev);\n    }\n    const rootClassName = clsx('str-chat__message str-chat__message-simple', `str-chat__message--${message.type}`, `str-chat__message--${message.status}`, isMyMessage()\n        ? 'str-chat__message--me str-chat__message-simple--me'\n        : 'str-chat__message--other', message.text ? 'str-chat__message--has-text' : 'has-no-text', {\n        'str-chat__message--has-attachment': hasAttachment,\n        'str-chat__message--highlighted': highlighted,\n        'str-chat__message--pinned pinned-message': message.pinned,\n        'str-chat__message--with-reactions': hasReactions,\n        'str-chat__message-send-can-be-retried': message?.status === 'failed' && message?.errorStatusCode !== 403,\n        'str-chat__message-with-thread-link': showReplyCountButton,\n        'str-chat__virtual-message__wrapper--end': endOfGroup,\n        'str-chat__virtual-message__wrapper--first': firstOfGroup,\n        'str-chat__virtual-message__wrapper--group': groupedByUser,\n    });\n    const poll = message.poll_id && client.polls.fromState(message.poll_id);\n    return (React.createElement(React.Fragment, null,\n        editing && (React.createElement(Modal, { className: 'str-chat__edit-message-modal', onClose: clearEditingState, open: editing },\n            React.createElement(MessageInput, { clearEditingState: clearEditingState, grow: true, hideSendButton: true, Input: EditMessageInput, message: message, ...additionalMessageInputProps }))),\n        isBounceDialogOpen && (React.createElement(MessageBounceModal, { MessageBouncePrompt: MessageBouncePrompt, onClose: () => setIsBounceDialogOpen(false), open: isBounceDialogOpen })),\n        React.createElement(\"div\", { className: rootClassName, key: message.id },\n            PinIndicator && React.createElement(PinIndicator, null),\n            message.user && (React.createElement(Avatar, { image: message.user.image, name: message.user.name || message.user.id, onClick: onUserClick, onMouseOver: onUserHover, user: message.user })),\n            React.createElement(\"div\", { className: clsx('str-chat__message-inner', {\n                    'str-chat__simple-message--error-failed': allowRetry || isBounced,\n                }), \"data-testid\": 'message-inner', onClick: handleClick, onKeyUp: handleClick },\n                React.createElement(MessageActions, null),\n                React.createElement(\"div\", { className: 'str-chat__message-reactions-host' }, hasReactions && React.createElement(ReactionsList, { reverse: true })),\n                React.createElement(\"div\", { className: 'str-chat__message-bubble' },\n                    poll && React.createElement(Poll, { poll: poll }),\n                    message.attachments?.length && !message.quoted_message ? (React.createElement(Attachment, { actionHandler: handleAction, attachments: message.attachments })) : null,\n                    React.createElement(MessageText, { message: message, renderText: renderText }),\n                    message.mml && (React.createElement(MML, { actionHandler: handleAction, align: isMyMessage() ? 'right' : 'left', source: message.mml })),\n                    React.createElement(MessageErrorIcon, null))),\n            showReplyCountButton && (React.createElement(MessageRepliesCountButton, { onClick: handleOpenThread, reply_count: message.reply_count })),\n            showMetadata && (React.createElement(\"div\", { className: 'str-chat__message-metadata' },\n                React.createElement(MessageStatus, null),\n                !isMyMessage() && !!message.user && (React.createElement(\"span\", { className: 'str-chat__message-simple-name' }, message.user.name || message.user.id)),\n                React.createElement(MessageTimestamp, { customClass: 'str-chat__message-simple-timestamp' }),\n                isEdited && (React.createElement(\"span\", { className: 'str-chat__mesage-simple-edited' }, t('Edited'))),\n                isEdited && React.createElement(MessageEditedTimestamp, { calendar: true, open: isEditedTimestampOpen }))))));\n};\nconst MemoizedMessageSimple = React.memo(MessageSimpleWithContext, areMessageUIPropsEqual);\n/**\n * The default UI component that renders a message and receives functionality and logic from the MessageContext.\n */\nexport const MessageSimple = (props) => {\n    const messageContext = useMessageContext('MessageSimple');\n    return React.createElement(MemoizedMessageSimple, { ...messageContext, ...props });\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}