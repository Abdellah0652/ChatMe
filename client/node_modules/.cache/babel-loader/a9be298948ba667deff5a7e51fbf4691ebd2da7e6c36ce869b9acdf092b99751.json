{"ast":null,"code":"import { CommandItem } from '../../CommandItem/CommandItem';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useTranslationContext } from '../../../context';\nexport const useCommandTrigger = () => {\n  const {\n    channelConfig\n  } = useChannelStateContext('useCommandTrigger');\n  const {\n    t\n  } = useTranslationContext('useCommandTrigger');\n  const commands = channelConfig?.commands;\n  return {\n    component: CommandItem,\n    dataProvider: (query, text, onReady) => {\n      if (text.indexOf('/') !== 0 || !commands) {\n        return [];\n      }\n      const selectedCommands = commands.filter(command => command.name?.indexOf(query) !== -1);\n      // sort alphabetically unless you're matching the first char\n      selectedCommands.sort((a, b) => {\n        let nameA = a.name?.toLowerCase();\n        let nameB = b.name?.toLowerCase();\n        if (nameA?.indexOf(query) === 0) {\n          nameA = `0${nameA}`;\n        }\n        if (nameB?.indexOf(query) === 0) {\n          nameB = `0${nameB}`;\n        }\n        // Should confirm possible null / undefined when TS is fully implemented\n        if (nameA != null && nameB != null) {\n          if (nameA < nameB) {\n            return -1;\n          }\n          if (nameA > nameB) {\n            return 1;\n          }\n        }\n        return 0;\n      });\n      const result = selectedCommands.slice(0, 5);\n      if (onReady) onReady(result.filter(result => result.name !== undefined).map(commandData => {\n        const translatedCommandData = {\n          name: commandData.name\n        };\n        if (commandData.args) translatedCommandData.args = t(`${commandData.name}-command-args`, {\n          defaultValue: commandData.args\n        });\n        if (commandData.description) translatedCommandData.description = t(`${commandData.name}-command-description`, {\n          defaultValue: commandData.description\n        });\n        return translatedCommandData;\n      }), query);\n      return result;\n    },\n    output: entity => ({\n      caretPosition: 'next',\n      key: entity.name,\n      text: `/${entity.name}`\n    })\n  };\n};","map":{"version":3,"names":["CommandItem","useChannelStateContext","useTranslationContext","useCommandTrigger","channelConfig","t","commands","component","dataProvider","query","text","onReady","indexOf","selectedCommands","filter","command","name","sort","a","b","nameA","toLowerCase","nameB","result","slice","undefined","map","commandData","translatedCommandData","args","defaultValue","description","output","entity","caretPosition","key"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useCommandTrigger.js"],"sourcesContent":["import { CommandItem } from '../../CommandItem/CommandItem';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useTranslationContext } from '../../../context';\nexport const useCommandTrigger = () => {\n    const { channelConfig } = useChannelStateContext('useCommandTrigger');\n    const { t } = useTranslationContext('useCommandTrigger');\n    const commands = channelConfig?.commands;\n    return {\n        component: CommandItem,\n        dataProvider: (query, text, onReady) => {\n            if (text.indexOf('/') !== 0 || !commands) {\n                return [];\n            }\n            const selectedCommands = commands.filter((command) => command.name?.indexOf(query) !== -1);\n            // sort alphabetically unless you're matching the first char\n            selectedCommands.sort((a, b) => {\n                let nameA = a.name?.toLowerCase();\n                let nameB = b.name?.toLowerCase();\n                if (nameA?.indexOf(query) === 0) {\n                    nameA = `0${nameA}`;\n                }\n                if (nameB?.indexOf(query) === 0) {\n                    nameB = `0${nameB}`;\n                }\n                // Should confirm possible null / undefined when TS is fully implemented\n                if (nameA != null && nameB != null) {\n                    if (nameA < nameB) {\n                        return -1;\n                    }\n                    if (nameA > nameB) {\n                        return 1;\n                    }\n                }\n                return 0;\n            });\n            const result = selectedCommands.slice(0, 5);\n            if (onReady)\n                onReady(result\n                    .filter((result) => result.name !== undefined)\n                    .map((commandData) => {\n                    const translatedCommandData = {\n                        name: commandData.name,\n                    };\n                    if (commandData.args)\n                        translatedCommandData.args = t(`${commandData.name}-command-args`, {\n                            defaultValue: commandData.args,\n                        });\n                    if (commandData.description)\n                        translatedCommandData.description = t(`${commandData.name}-command-description`, {\n                            defaultValue: commandData.description,\n                        });\n                    return translatedCommandData;\n                }), query);\n            return result;\n        },\n        output: (entity) => ({\n            caretPosition: 'next',\n            key: entity.name,\n            text: `/${entity.name}`,\n        }),\n    };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,+BAA+B;AAC3D,SAASC,sBAAsB,QAAQ,sCAAsC;AAC7E,SAASC,qBAAqB,QAAQ,kBAAkB;AACxD,OAAO,MAAMC,iBAAiB,GAAGA,CAAA,KAAM;EACnC,MAAM;IAAEC;EAAc,CAAC,GAAGH,sBAAsB,CAAC,mBAAmB,CAAC;EACrE,MAAM;IAAEI;EAAE,CAAC,GAAGH,qBAAqB,CAAC,mBAAmB,CAAC;EACxD,MAAMI,QAAQ,GAAGF,aAAa,EAAEE,QAAQ;EACxC,OAAO;IACHC,SAAS,EAAEP,WAAW;IACtBQ,YAAY,EAAEA,CAACC,KAAK,EAAEC,IAAI,EAAEC,OAAO,KAAK;MACpC,IAAID,IAAI,CAACE,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAACN,QAAQ,EAAE;QACtC,OAAO,EAAE;MACb;MACA,MAAMO,gBAAgB,GAAGP,QAAQ,CAACQ,MAAM,CAAEC,OAAO,IAAKA,OAAO,CAACC,IAAI,EAAEJ,OAAO,CAACH,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;MAC1F;MACAI,gBAAgB,CAACI,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;QAC5B,IAAIC,KAAK,GAAGF,CAAC,CAACF,IAAI,EAAEK,WAAW,CAAC,CAAC;QACjC,IAAIC,KAAK,GAAGH,CAAC,CAACH,IAAI,EAAEK,WAAW,CAAC,CAAC;QACjC,IAAID,KAAK,EAAER,OAAO,CAACH,KAAK,CAAC,KAAK,CAAC,EAAE;UAC7BW,KAAK,GAAG,IAAIA,KAAK,EAAE;QACvB;QACA,IAAIE,KAAK,EAAEV,OAAO,CAACH,KAAK,CAAC,KAAK,CAAC,EAAE;UAC7Ba,KAAK,GAAG,IAAIA,KAAK,EAAE;QACvB;QACA;QACA,IAAIF,KAAK,IAAI,IAAI,IAAIE,KAAK,IAAI,IAAI,EAAE;UAChC,IAAIF,KAAK,GAAGE,KAAK,EAAE;YACf,OAAO,CAAC,CAAC;UACb;UACA,IAAIF,KAAK,GAAGE,KAAK,EAAE;YACf,OAAO,CAAC;UACZ;QACJ;QACA,OAAO,CAAC;MACZ,CAAC,CAAC;MACF,MAAMC,MAAM,GAAGV,gBAAgB,CAACW,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;MAC3C,IAAIb,OAAO,EACPA,OAAO,CAACY,MAAM,CACTT,MAAM,CAAES,MAAM,IAAKA,MAAM,CAACP,IAAI,KAAKS,SAAS,CAAC,CAC7CC,GAAG,CAAEC,WAAW,IAAK;QACtB,MAAMC,qBAAqB,GAAG;UAC1BZ,IAAI,EAAEW,WAAW,CAACX;QACtB,CAAC;QACD,IAAIW,WAAW,CAACE,IAAI,EAChBD,qBAAqB,CAACC,IAAI,GAAGxB,CAAC,CAAC,GAAGsB,WAAW,CAACX,IAAI,eAAe,EAAE;UAC/Dc,YAAY,EAAEH,WAAW,CAACE;QAC9B,CAAC,CAAC;QACN,IAAIF,WAAW,CAACI,WAAW,EACvBH,qBAAqB,CAACG,WAAW,GAAG1B,CAAC,CAAC,GAAGsB,WAAW,CAACX,IAAI,sBAAsB,EAAE;UAC7Ec,YAAY,EAAEH,WAAW,CAACI;QAC9B,CAAC,CAAC;QACN,OAAOH,qBAAqB;MAChC,CAAC,CAAC,EAAEnB,KAAK,CAAC;MACd,OAAOc,MAAM;IACjB,CAAC;IACDS,MAAM,EAAGC,MAAM,KAAM;MACjBC,aAAa,EAAE,MAAM;MACrBC,GAAG,EAAEF,MAAM,CAACjB,IAAI;MAChBN,IAAI,EAAE,IAAIuB,MAAM,CAACjB,IAAI;IACzB,CAAC;EACL,CAAC;AACL,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}