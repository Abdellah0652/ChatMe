{"ast":null,"code":"import { useCallback, useState } from 'react';\nimport throttle from 'lodash.throttle';\nimport { searchLocalUsers } from './utils';\nimport { UserItem } from '../../UserItem/UserItem';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport const useUserTrigger = params => {\n  const {\n    disableMentions,\n    mentionAllAppUsers,\n    mentionQueryParams = {},\n    onSelectUser,\n    useMentionsTransliteration\n  } = params;\n  const [searching, setSearching] = useState(false);\n  const {\n    client,\n    mutes\n  } = useChatContext('useUserTrigger');\n  const {\n    channel\n  } = useChannelStateContext('useUserTrigger');\n  const {\n    members\n  } = channel.state;\n  const {\n    watchers\n  } = channel.state;\n  const getMembersAndWatchers = useCallback(() => {\n    const memberUsers = members ? Object.values(members).map(({\n      user\n    }) => user) : [];\n    const watcherUsers = watchers ? Object.values(watchers) : [];\n    const users = [...memberUsers, ...watcherUsers];\n    // make sure we don't list users twice\n    const uniqueUsers = {};\n    users.forEach(user => {\n      if (user && !uniqueUsers[user.id]) {\n        uniqueUsers[user.id] = user;\n      }\n    });\n    return Object.values(uniqueUsers);\n  }, [members, watchers]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const queryMembersThrottled = useCallback(throttle(async (query, onReady) => {\n    try {\n      // @ts-expect-error\n      const response = await channel.queryMembers({\n        name: {\n          $autocomplete: query\n        }\n      });\n      const users = response.members.map(member => member.user);\n      if (onReady && users.length) {\n        onReady(users);\n      } else {\n        onReady([]);\n      }\n    } catch (error) {\n      console.log({\n        error\n      });\n    }\n  }, 200), [channel]);\n  const queryUsers = async (query, onReady) => {\n    if (!query || searching) return;\n    setSearching(true);\n    try {\n      const {\n        users\n      } = await client.queryUsers(\n      // @ts-expect-error\n      {\n        $or: [{\n          id: {\n            $autocomplete: query\n          }\n        }, {\n          name: {\n            $autocomplete: query\n          }\n        }],\n        ...(typeof mentionQueryParams.filters === 'function' ? mentionQueryParams.filters(query) : mentionQueryParams.filters)\n      }, Array.isArray(mentionQueryParams.sort) ? [{\n        id: 1\n      }, ...mentionQueryParams.sort] : {\n        id: 1,\n        ...mentionQueryParams.sort\n      }, {\n        limit: 10,\n        ...mentionQueryParams.options\n      });\n      if (onReady && users.length) {\n        onReady(users);\n      } else {\n        onReady([]);\n      }\n    } catch (error) {\n      console.log({\n        error\n      });\n    }\n    setSearching(false);\n  };\n  const queryUsersThrottled = throttle(queryUsers, 200);\n  return {\n    callback: item => onSelectUser(item),\n    component: UserItem,\n    dataProvider: (query, text, onReady) => {\n      if (disableMentions) return;\n      const filterMutes = data => {\n        if (text.includes('/unmute') && !mutes.length) {\n          return [];\n        }\n        if (!mutes.length) return data;\n        if (text.includes('/unmute')) {\n          return data.filter(suggestion => mutes.some(mute => mute.target.id === suggestion.id));\n        }\n        return data.filter(suggestion => mutes.every(mute => mute.target.id !== suggestion.id));\n      };\n      if (mentionAllAppUsers) {\n        return queryUsersThrottled(query, data => {\n          if (onReady) onReady(filterMutes(data), query);\n        });\n      }\n      /**\n       * By default, we return maximum 100 members via queryChannels api call.\n       * Thus it is safe to assume, that if number of members in channel.state is < 100,\n       * then all the members are already available on client side and we don't need to\n       * make any api call to queryMembers endpoint.\n       */\n      if (!query || Object.values(members || {}).length < 100) {\n        const users = getMembersAndWatchers();\n        const params = {\n          ownUserId: client.userID,\n          query,\n          text,\n          useMentionsTransliteration,\n          users\n        };\n        const matchingUsers = searchLocalUsers(params);\n        const usersToShow = mentionQueryParams.options?.limit ?? 7;\n        const data = matchingUsers.slice(0, usersToShow);\n        if (onReady) onReady(filterMutes(data), query);\n        return data;\n      }\n      return queryMembersThrottled(query, data => {\n        if (onReady) onReady(filterMutes(data), query);\n      });\n    },\n    output: entity => ({\n      caretPosition: 'next',\n      key: entity.id,\n      text: `@${entity.name || entity.id}`\n    })\n  };\n};","map":{"version":3,"names":["useCallback","useState","throttle","searchLocalUsers","UserItem","useChatContext","useChannelStateContext","useUserTrigger","params","disableMentions","mentionAllAppUsers","mentionQueryParams","onSelectUser","useMentionsTransliteration","searching","setSearching","client","mutes","channel","members","state","watchers","getMembersAndWatchers","memberUsers","Object","values","map","user","watcherUsers","users","uniqueUsers","forEach","id","queryMembersThrottled","query","onReady","response","queryMembers","name","$autocomplete","member","length","error","console","log","queryUsers","$or","filters","Array","isArray","sort","limit","options","queryUsersThrottled","callback","item","component","dataProvider","text","filterMutes","data","includes","filter","suggestion","some","mute","target","every","ownUserId","userID","matchingUsers","usersToShow","slice","output","entity","caretPosition","key"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useUserTrigger.js"],"sourcesContent":["import { useCallback, useState } from 'react';\nimport throttle from 'lodash.throttle';\nimport { searchLocalUsers } from './utils';\nimport { UserItem } from '../../UserItem/UserItem';\nimport { useChatContext } from '../../../context/ChatContext';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nexport const useUserTrigger = (params) => {\n    const { disableMentions, mentionAllAppUsers, mentionQueryParams = {}, onSelectUser, useMentionsTransliteration, } = params;\n    const [searching, setSearching] = useState(false);\n    const { client, mutes } = useChatContext('useUserTrigger');\n    const { channel } = useChannelStateContext('useUserTrigger');\n    const { members } = channel.state;\n    const { watchers } = channel.state;\n    const getMembersAndWatchers = useCallback(() => {\n        const memberUsers = members ? Object.values(members).map(({ user }) => user) : [];\n        const watcherUsers = watchers ? Object.values(watchers) : [];\n        const users = [...memberUsers, ...watcherUsers];\n        // make sure we don't list users twice\n        const uniqueUsers = {};\n        users.forEach((user) => {\n            if (user && !uniqueUsers[user.id]) {\n                uniqueUsers[user.id] = user;\n            }\n        });\n        return Object.values(uniqueUsers);\n    }, [members, watchers]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const queryMembersThrottled = useCallback(throttle(async (query, onReady) => {\n        try {\n            // @ts-expect-error\n            const response = await channel.queryMembers({\n                name: { $autocomplete: query },\n            });\n            const users = response.members.map((member) => member.user);\n            if (onReady && users.length) {\n                onReady(users);\n            }\n            else {\n                onReady([]);\n            }\n        }\n        catch (error) {\n            console.log({ error });\n        }\n    }, 200), [channel]);\n    const queryUsers = async (query, onReady) => {\n        if (!query || searching)\n            return;\n        setSearching(true);\n        try {\n            const { users } = await client.queryUsers(\n            // @ts-expect-error\n            {\n                $or: [{ id: { $autocomplete: query } }, { name: { $autocomplete: query } }],\n                ...(typeof mentionQueryParams.filters === 'function'\n                    ? mentionQueryParams.filters(query)\n                    : mentionQueryParams.filters),\n            }, Array.isArray(mentionQueryParams.sort)\n                ? [{ id: 1 }, ...mentionQueryParams.sort]\n                : { id: 1, ...mentionQueryParams.sort }, { limit: 10, ...mentionQueryParams.options });\n            if (onReady && users.length) {\n                onReady(users);\n            }\n            else {\n                onReady([]);\n            }\n        }\n        catch (error) {\n            console.log({ error });\n        }\n        setSearching(false);\n    };\n    const queryUsersThrottled = throttle(queryUsers, 200);\n    return {\n        callback: (item) => onSelectUser(item),\n        component: UserItem,\n        dataProvider: (query, text, onReady) => {\n            if (disableMentions)\n                return;\n            const filterMutes = (data) => {\n                if (text.includes('/unmute') && !mutes.length) {\n                    return [];\n                }\n                if (!mutes.length)\n                    return data;\n                if (text.includes('/unmute')) {\n                    return data.filter((suggestion) => mutes.some((mute) => mute.target.id === suggestion.id));\n                }\n                return data.filter((suggestion) => mutes.every((mute) => mute.target.id !== suggestion.id));\n            };\n            if (mentionAllAppUsers) {\n                return queryUsersThrottled(query, (data) => {\n                    if (onReady)\n                        onReady(filterMutes(data), query);\n                });\n            }\n            /**\n             * By default, we return maximum 100 members via queryChannels api call.\n             * Thus it is safe to assume, that if number of members in channel.state is < 100,\n             * then all the members are already available on client side and we don't need to\n             * make any api call to queryMembers endpoint.\n             */\n            if (!query || Object.values(members || {}).length < 100) {\n                const users = getMembersAndWatchers();\n                const params = {\n                    ownUserId: client.userID,\n                    query,\n                    text,\n                    useMentionsTransliteration,\n                    users,\n                };\n                const matchingUsers = searchLocalUsers(params);\n                const usersToShow = mentionQueryParams.options?.limit ?? 7;\n                const data = matchingUsers.slice(0, usersToShow);\n                if (onReady)\n                    onReady(filterMutes(data), query);\n                return data;\n            }\n            return queryMembersThrottled(query, (data) => {\n                if (onReady)\n                    onReady(filterMutes(data), query);\n            });\n        },\n        output: (entity) => ({\n            caretPosition: 'next',\n            key: entity.id,\n            text: `@${entity.name || entity.id}`,\n        }),\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}