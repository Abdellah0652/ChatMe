{"ast":null,"code":"import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { Virtuoso } from 'react-virtuoso';\nimport { GiphyPreviewMessage as DefaultGiphyPreviewMessage } from './GiphyPreviewMessage';\nimport { useLastReadData } from './hooks';\nimport { useGiphyPreview, useMessageSetKey, useNewMessageNotification, usePrependedMessagesCount, useScrollToBottomOnNewMessage, useShouldForceScrollToBottom, useUnreadMessagesNotificationVirtualized } from './hooks/VirtualizedMessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { getGroupStyles, getLastReceived, processMessages } from './utils';\nimport { MessageSimple } from '../Message';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { calculateFirstItemIndex, calculateItemIndex, EmptyPlaceholder, Header, Item, makeItemsRenderedHandler, messageRenderer } from './VirtualizedMessageListComponents';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from '../MessageList';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { DialogManagerProvider } from '../../context';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nimport { useChannelStateContext } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nfunction captureResizeObserverExceededError(e) {\n  if (e.message === 'ResizeObserver loop completed with undelivered notifications.' || e.message === 'ResizeObserver loop limit exceeded') {\n    e.stopImmediatePropagation();\n  }\n}\nfunction useCaptureResizeObserverExceededError() {\n  useEffect(() => {\n    window.addEventListener('error', captureResizeObserverExceededError);\n    return () => {\n      window.removeEventListener('error', captureResizeObserverExceededError);\n    };\n  }, []);\n}\nfunction fractionalItemSize(element) {\n  return element.getBoundingClientRect().height;\n}\nfunction findMessageIndex(messages, id) {\n  return messages.findIndex(message => message.id === id);\n}\nfunction calculateInitialTopMostItemIndex(messages, highlightedMessageId) {\n  if (highlightedMessageId) {\n    const index = findMessageIndex(messages, highlightedMessageId);\n    if (index !== -1) {\n      return {\n        align: 'center',\n        index\n      };\n    }\n  }\n  return messages.length - 1;\n}\nconst VirtualizedMessageListWithContext = props => {\n  const {\n    additionalMessageInputProps,\n    additionalVirtuosoProps = {},\n    channel,\n    channelUnreadUiState,\n    closeReactionSelectorOnClick,\n    customMessageActions,\n    customMessageRenderer,\n    defaultItemHeight,\n    disableDateSeparator = true,\n    formatDate,\n    groupStyles,\n    hasMoreNewer,\n    head,\n    hideDeletedMessages = false,\n    hideNewMessageSeparator = false,\n    highlightedMessageId,\n    jumpToLatestMessage,\n    loadingMore,\n    loadMore,\n    loadMoreNewer,\n    maxTimeBetweenGroupedMessages,\n    Message: MessageUIComponentFromProps,\n    messageActions,\n    messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE,\n    messages,\n    notifications,\n    openThread,\n    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component\n    overscan = 0,\n    read,\n    returnAllReadData = false,\n    reviewProcessedMessage,\n    scrollSeekPlaceHolder,\n    scrollToLatestMessageOnFocus = false,\n    separateGiphyPreview = false,\n    shouldGroupByUser = false,\n    showUnreadNotificationAlways,\n    reactionDetailsSort,\n    sortReactionDetails,\n    sortReactions,\n    stickToBottomScrollBehavior = 'smooth',\n    suppressAutoscroll,\n    threadList\n  } = props;\n  const {\n    components: virtuosoComponentsFromProps,\n    ...overridingVirtuosoProps\n  } = additionalVirtuosoProps;\n  // Stops errors generated from react-virtuoso to bubble up\n  // to Sentry or other tracking tools.\n  useCaptureResizeObserverExceededError();\n  const {\n    DateSeparator = DefaultDateSeparator,\n    GiphyPreviewMessage = DefaultGiphyPreviewMessage,\n    MessageListNotifications = DefaultMessageListNotifications,\n    MessageNotification = DefaultMessageNotification,\n    MessageSystem = DefaultMessageSystem,\n    MessageListMainPanel = DefaultMessageListMainPanel,\n    UnreadMessagesNotification = DefaultUnreadMessagesNotification,\n    UnreadMessagesSeparator = DefaultUnreadMessagesSeparator,\n    VirtualMessage: MessageUIComponentFromContext = MessageSimple,\n    TypingIndicator\n  } = useComponentContext('VirtualizedMessageList');\n  const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;\n  const {\n    client,\n    customClasses\n  } = useChatContext('VirtualizedMessageList');\n  const virtuoso = useRef(null);\n  const lastRead = useMemo(() => channel.lastRead?.(), [channel]);\n  const {\n    show: showUnreadMessagesNotification,\n    toggleShowUnreadMessagesNotification\n  } = useUnreadMessagesNotificationVirtualized({\n    lastRead: channelUnreadUiState?.last_read,\n    showAlways: !!showUnreadNotificationAlways,\n    unreadCount: channelUnreadUiState?.unread_messages ?? 0\n  });\n  const {\n    giphyPreviewMessage,\n    setGiphyPreviewMessage\n  } = useGiphyPreview(separateGiphyPreview);\n  const processedMessages = useMemo(() => {\n    if (typeof messages === 'undefined') {\n      return [];\n    }\n    if (disableDateSeparator && !hideDeletedMessages && hideNewMessageSeparator && !separateGiphyPreview) {\n      return messages;\n    }\n    return processMessages({\n      enableDateSeparator: !disableDateSeparator,\n      hideDeletedMessages,\n      hideNewMessageSeparator,\n      lastRead,\n      messages,\n      reviewProcessedMessage,\n      setGiphyPreviewMessage,\n      userId: client.userID || ''\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disableDateSeparator, hideDeletedMessages, hideNewMessageSeparator, lastRead, messages, messages?.length, client.userID]);\n  // get the mapping of own messages to array of users who read them\n  const ownMessagesReadByOthers = useLastReadData({\n    messages: processedMessages,\n    read,\n    returnAllReadData,\n    userID: client.userID\n  });\n  const lastReceivedMessageId = useMemo(() => getLastReceived(processedMessages), [processedMessages]);\n  const groupStylesFn = groupStyles || getGroupStyles;\n  const messageGroupStyles = useMemo(() => processedMessages.reduce((acc, message, i) => {\n    const style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);\n    if (style) acc[message.id] = style;\n    return acc;\n  }, {}),\n  // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [maxTimeBetweenGroupedMessages, processedMessages.length, shouldGroupByUser, groupStylesFn]);\n  const {\n    atBottom,\n    isMessageListScrolledToBottom,\n    newMessagesNotification,\n    setIsMessageListScrolledToBottom,\n    setNewMessagesNotification\n  } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);\n  useMarkRead({\n    isMessageListScrolledToBottom,\n    messageListIsThread: !!threadList,\n    unreadCount: channelUnreadUiState?.unread_messages ?? 0,\n    wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id\n  });\n  const scrollToBottom = useCallback(async () => {\n    if (hasMoreNewer) {\n      await jumpToLatestMessage();\n      return;\n    }\n    if (virtuoso.current) {\n      virtuoso.current.scrollToIndex(processedMessages.length - 1);\n    }\n    setNewMessagesNotification(false);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [virtuoso, processedMessages, setNewMessagesNotification,\n  // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n  processedMessages.length, hasMoreNewer, jumpToLatestMessage]);\n  useScrollToBottomOnNewMessage({\n    messages,\n    scrollToBottom,\n    scrollToLatestMessageOnFocus\n  });\n  const numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);\n  const {\n    messageSetKey\n  } = useMessageSetKey({\n    messages\n  });\n  const shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);\n  const handleItemsRendered = useMemo(() => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages), [processedMessages, toggleShowUnreadMessagesNotification]);\n  const followOutput = isAtBottom => {\n    if (hasMoreNewer || suppressAutoscroll) {\n      return false;\n    }\n    if (shouldForceScrollToBottom()) {\n      return isAtBottom ? stickToBottomScrollBehavior : 'auto';\n    }\n    // a message from another user has been received - don't scroll to bottom unless already there\n    return isAtBottom ? stickToBottomScrollBehavior : false;\n  };\n  const computeItemKey = useCallback((index, _, {\n    numItemsPrepended,\n    processedMessages\n  }) => processedMessages[calculateItemIndex(index, numItemsPrepended)].id, []);\n  const atBottomStateChange = isAtBottom => {\n    atBottom.current = isAtBottom;\n    setIsMessageListScrolledToBottom(isAtBottom);\n    if (isAtBottom) {\n      loadMoreNewer?.(messageLimit);\n      setNewMessagesNotification?.(false);\n    }\n  };\n  const atTopStateChange = isAtTop => {\n    if (isAtTop) {\n      loadMore?.(messageLimit);\n    }\n  };\n  useEffect(() => {\n    let scrollTimeout;\n    if (highlightedMessageId) {\n      const index = findMessageIndex(processedMessages, highlightedMessageId);\n      if (index !== -1) {\n        scrollTimeout = setTimeout(() => {\n          virtuoso.current?.scrollToIndex({\n            align: 'center',\n            index\n          });\n        }, 0);\n      }\n    }\n    return () => {\n      clearTimeout(scrollTimeout);\n    };\n  }, [highlightedMessageId, processedMessages]);\n  if (!processedMessages) return null;\n  const dialogManagerId = threadList ? 'virtualized-message-list-dialog-manager-thread' : 'virtualized-message-list-dialog-manager';\n  return React.createElement(React.Fragment, null, React.createElement(MessageListMainPanel, null, React.createElement(DialogManagerProvider, {\n    id: dialogManagerId\n  }, !threadList && showUnreadMessagesNotification && React.createElement(UnreadMessagesNotification, {\n    unreadCount: channelUnreadUiState?.unread_messages\n  }), React.createElement(\"div\", {\n    className: customClasses?.virtualizedMessageList || 'str-chat__virtual-list'\n  }, React.createElement(Virtuoso, {\n    atBottomStateChange: atBottomStateChange,\n    atBottomThreshold: 100,\n    atTopStateChange: atTopStateChange,\n    atTopThreshold: 100,\n    className: 'str-chat__message-list-scroll',\n    components: {\n      EmptyPlaceholder,\n      Header,\n      Item,\n      ...virtuosoComponentsFromProps\n    },\n    computeItemKey: computeItemKey,\n    context: {\n      additionalMessageInputProps,\n      closeReactionSelectorOnClick,\n      customClasses,\n      customMessageActions,\n      customMessageRenderer,\n      DateSeparator,\n      firstUnreadMessageId: channelUnreadUiState?.first_unread_message_id,\n      formatDate,\n      head,\n      lastReadDate: channelUnreadUiState?.last_read,\n      lastReadMessageId: channelUnreadUiState?.last_read_message_id,\n      lastReceivedMessageId,\n      loadingMore,\n      Message: MessageUIComponent,\n      messageActions,\n      messageGroupStyles,\n      MessageSystem,\n      numItemsPrepended,\n      openThread,\n      ownMessagesReadByOthers,\n      processedMessages,\n      reactionDetailsSort,\n      shouldGroupByUser,\n      sortReactionDetails,\n      sortReactions,\n      threadList,\n      unreadMessageCount: channelUnreadUiState?.unread_messages,\n      UnreadMessagesSeparator,\n      virtuosoRef: virtuoso\n    },\n    firstItemIndex: calculateFirstItemIndex(numItemsPrepended),\n    followOutput: followOutput,\n    increaseViewportBy: {\n      bottom: 200,\n      top: 0\n    },\n    initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId),\n    itemContent: messageRenderer,\n    itemSize: fractionalItemSize,\n    itemsRendered: handleItemsRendered,\n    key: messageSetKey,\n    overscan: overscan,\n    ref: virtuoso,\n    style: {\n      overflowX: 'hidden'\n    },\n    totalCount: processedMessages.length,\n    ...overridingVirtuosoProps,\n    ...(scrollSeekPlaceHolder ? {\n      scrollSeek: scrollSeekPlaceHolder\n    } : {}),\n    ...(defaultItemHeight ? {\n      defaultItemHeight\n    } : {})\n  }))), TypingIndicator && React.createElement(TypingIndicator, null)), React.createElement(MessageListNotifications, {\n    hasNewMessages: newMessagesNotification,\n    isMessageListScrolledToBottom: isMessageListScrolledToBottom,\n    isNotAtLatestMessageSet: hasMoreNewer,\n    MessageNotification: MessageNotification,\n    notifications: notifications,\n    scrollToBottom: scrollToBottom,\n    threadList: threadList,\n    unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages\n  }), giphyPreviewMessage && React.createElement(GiphyPreviewMessage, {\n    message: giphyPreviewMessage\n  }));\n};\n/**\n * The VirtualizedMessageList component renders a list of messages in a virtualized list.\n * It is a consumer of the React contexts set in [Channel](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Channel/Channel.tsx).\n */\nexport function VirtualizedMessageList(props) {\n  const {\n    jumpToLatestMessage,\n    loadMore,\n    loadMoreNewer\n  } = useChannelActionContext('VirtualizedMessageList');\n  const {\n    channel,\n    channelUnreadUiState,\n    hasMore,\n    hasMoreNewer,\n    highlightedMessageId,\n    loadingMore,\n    loadingMoreNewer,\n    messages: contextMessages,\n    notifications,\n    read,\n    suppressAutoscroll\n  } = useChannelStateContext('VirtualizedMessageList');\n  const messages = props.messages || contextMessages;\n  return React.createElement(VirtualizedMessageListWithContext, {\n    channel: channel,\n    channelUnreadUiState: props.channelUnreadUiState ?? channelUnreadUiState,\n    hasMore: !!hasMore,\n    hasMoreNewer: !!hasMoreNewer,\n    highlightedMessageId: highlightedMessageId,\n    jumpToLatestMessage: jumpToLatestMessage,\n    loadingMore: !!loadingMore,\n    loadingMoreNewer: !!loadingMoreNewer,\n    loadMore: loadMore,\n    loadMoreNewer: loadMoreNewer,\n    messages: messages,\n    notifications: notifications,\n    read: read,\n    suppressAutoscroll: suppressAutoscroll,\n    ...props\n  });\n}","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useRef","Virtuoso","GiphyPreviewMessage","DefaultGiphyPreviewMessage","useLastReadData","useGiphyPreview","useMessageSetKey","useNewMessageNotification","usePrependedMessagesCount","useScrollToBottomOnNewMessage","useShouldForceScrollToBottom","useUnreadMessagesNotificationVirtualized","useMarkRead","MessageNotification","DefaultMessageNotification","MessageListNotifications","DefaultMessageListNotifications","MessageListMainPanel","DefaultMessageListMainPanel","getGroupStyles","getLastReceived","processMessages","MessageSimple","UnreadMessagesNotification","DefaultUnreadMessagesNotification","calculateFirstItemIndex","calculateItemIndex","EmptyPlaceholder","Header","Item","makeItemsRenderedHandler","messageRenderer","UnreadMessagesSeparator","DefaultUnreadMessagesSeparator","DateSeparator","DefaultDateSeparator","EventComponent","DefaultMessageSystem","DialogManagerProvider","useChannelActionContext","useChannelStateContext","useChatContext","useComponentContext","DEFAULT_NEXT_CHANNEL_PAGE_SIZE","captureResizeObserverExceededError","e","message","stopImmediatePropagation","useCaptureResizeObserverExceededError","window","addEventListener","removeEventListener","fractionalItemSize","element","getBoundingClientRect","height","findMessageIndex","messages","id","findIndex","calculateInitialTopMostItemIndex","highlightedMessageId","index","align","length","VirtualizedMessageListWithContext","props","additionalMessageInputProps","additionalVirtuosoProps","channel","channelUnreadUiState","closeReactionSelectorOnClick","customMessageActions","customMessageRenderer","defaultItemHeight","disableDateSeparator","formatDate","groupStyles","hasMoreNewer","head","hideDeletedMessages","hideNewMessageSeparator","jumpToLatestMessage","loadingMore","loadMore","loadMoreNewer","maxTimeBetweenGroupedMessages","Message","MessageUIComponentFromProps","messageActions","messageLimit","notifications","openThread","overscan","read","returnAllReadData","reviewProcessedMessage","scrollSeekPlaceHolder","scrollToLatestMessageOnFocus","separateGiphyPreview","shouldGroupByUser","showUnreadNotificationAlways","reactionDetailsSort","sortReactionDetails","sortReactions","stickToBottomScrollBehavior","suppressAutoscroll","threadList","components","virtuosoComponentsFromProps","overridingVirtuosoProps","MessageSystem","VirtualMessage","MessageUIComponentFromContext","TypingIndicator","MessageUIComponent","client","customClasses","virtuoso","lastRead","show","showUnreadMessagesNotification","toggleShowUnreadMessagesNotification","last_read","showAlways","unreadCount","unread_messages","giphyPreviewMessage","setGiphyPreviewMessage","processedMessages","enableDateSeparator","userId","userID","ownMessagesReadByOthers","lastReceivedMessageId","groupStylesFn","messageGroupStyles","reduce","acc","i","style","atBottom","isMessageListScrolledToBottom","newMessagesNotification","setIsMessageListScrolledToBottom","setNewMessagesNotification","messageListIsThread","wasMarkedUnread","first_unread_message_id","scrollToBottom","current","scrollToIndex","numItemsPrepended","messageSetKey","shouldForceScrollToBottom","handleItemsRendered","followOutput","isAtBottom","computeItemKey","_","atBottomStateChange","atTopStateChange","isAtTop","scrollTimeout","setTimeout","clearTimeout","dialogManagerId","createElement","Fragment","className","virtualizedMessageList","atBottomThreshold","atTopThreshold","context","firstUnreadMessageId","lastReadDate","lastReadMessageId","last_read_message_id","unreadMessageCount","virtuosoRef","firstItemIndex","increaseViewportBy","bottom","top","initialTopMostItemIndex","itemContent","itemSize","itemsRendered","key","ref","overflowX","totalCount","scrollSeek","hasNewMessages","isNotAtLatestMessageSet","undefined","VirtualizedMessageList","hasMore","loadingMoreNewer","contextMessages"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageList/VirtualizedMessageList.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useRef } from 'react';\nimport { Virtuoso, } from 'react-virtuoso';\nimport { GiphyPreviewMessage as DefaultGiphyPreviewMessage } from './GiphyPreviewMessage';\nimport { useLastReadData } from './hooks';\nimport { useGiphyPreview, useMessageSetKey, useNewMessageNotification, usePrependedMessagesCount, useScrollToBottomOnNewMessage, useShouldForceScrollToBottom, useUnreadMessagesNotificationVirtualized, } from './hooks/VirtualizedMessageList';\nimport { useMarkRead } from './hooks/useMarkRead';\nimport { MessageNotification as DefaultMessageNotification } from './MessageNotification';\nimport { MessageListNotifications as DefaultMessageListNotifications } from './MessageListNotifications';\nimport { MessageListMainPanel as DefaultMessageListMainPanel } from './MessageListMainPanel';\nimport { getGroupStyles, getLastReceived, processMessages, } from './utils';\nimport { MessageSimple } from '../Message';\nimport { UnreadMessagesNotification as DefaultUnreadMessagesNotification } from './UnreadMessagesNotification';\nimport { calculateFirstItemIndex, calculateItemIndex, EmptyPlaceholder, Header, Item, makeItemsRenderedHandler, messageRenderer, } from './VirtualizedMessageListComponents';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from '../MessageList';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { DialogManagerProvider } from '../../context';\nimport { useChannelActionContext, } from '../../context/ChannelActionContext';\nimport { useChannelStateContext, } from '../../context/ChannelStateContext';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { DEFAULT_NEXT_CHANNEL_PAGE_SIZE } from '../../constants/limits';\nfunction captureResizeObserverExceededError(e) {\n    if (e.message === 'ResizeObserver loop completed with undelivered notifications.' ||\n        e.message === 'ResizeObserver loop limit exceeded') {\n        e.stopImmediatePropagation();\n    }\n}\nfunction useCaptureResizeObserverExceededError() {\n    useEffect(() => {\n        window.addEventListener('error', captureResizeObserverExceededError);\n        return () => {\n            window.removeEventListener('error', captureResizeObserverExceededError);\n        };\n    }, []);\n}\nfunction fractionalItemSize(element) {\n    return element.getBoundingClientRect().height;\n}\nfunction findMessageIndex(messages, id) {\n    return messages.findIndex((message) => message.id === id);\n}\nfunction calculateInitialTopMostItemIndex(messages, highlightedMessageId) {\n    if (highlightedMessageId) {\n        const index = findMessageIndex(messages, highlightedMessageId);\n        if (index !== -1) {\n            return { align: 'center', index };\n        }\n    }\n    return messages.length - 1;\n}\nconst VirtualizedMessageListWithContext = (props) => {\n    const { additionalMessageInputProps, additionalVirtuosoProps = {}, channel, channelUnreadUiState, closeReactionSelectorOnClick, customMessageActions, customMessageRenderer, defaultItemHeight, disableDateSeparator = true, formatDate, groupStyles, hasMoreNewer, head, hideDeletedMessages = false, hideNewMessageSeparator = false, highlightedMessageId, jumpToLatestMessage, loadingMore, loadMore, loadMoreNewer, maxTimeBetweenGroupedMessages, Message: MessageUIComponentFromProps, messageActions, messageLimit = DEFAULT_NEXT_CHANNEL_PAGE_SIZE, messages, notifications, openThread, \n    // TODO: refactor to scrollSeekPlaceHolderConfiguration and components.ScrollSeekPlaceholder, like the Virtuoso Component\n    overscan = 0, read, returnAllReadData = false, reviewProcessedMessage, scrollSeekPlaceHolder, scrollToLatestMessageOnFocus = false, separateGiphyPreview = false, shouldGroupByUser = false, showUnreadNotificationAlways, reactionDetailsSort, sortReactionDetails, sortReactions, stickToBottomScrollBehavior = 'smooth', suppressAutoscroll, threadList, } = props;\n    const { components: virtuosoComponentsFromProps, ...overridingVirtuosoProps } = additionalVirtuosoProps;\n    // Stops errors generated from react-virtuoso to bubble up\n    // to Sentry or other tracking tools.\n    useCaptureResizeObserverExceededError();\n    const { DateSeparator = DefaultDateSeparator, GiphyPreviewMessage = DefaultGiphyPreviewMessage, MessageListNotifications = DefaultMessageListNotifications, MessageNotification = DefaultMessageNotification, MessageSystem = DefaultMessageSystem, MessageListMainPanel = DefaultMessageListMainPanel, UnreadMessagesNotification = DefaultUnreadMessagesNotification, UnreadMessagesSeparator = DefaultUnreadMessagesSeparator, VirtualMessage: MessageUIComponentFromContext = MessageSimple, TypingIndicator, } = useComponentContext('VirtualizedMessageList');\n    const MessageUIComponent = MessageUIComponentFromProps || MessageUIComponentFromContext;\n    const { client, customClasses } = useChatContext('VirtualizedMessageList');\n    const virtuoso = useRef(null);\n    const lastRead = useMemo(() => channel.lastRead?.(), [channel]);\n    const { show: showUnreadMessagesNotification, toggleShowUnreadMessagesNotification, } = useUnreadMessagesNotificationVirtualized({\n        lastRead: channelUnreadUiState?.last_read,\n        showAlways: !!showUnreadNotificationAlways,\n        unreadCount: channelUnreadUiState?.unread_messages ?? 0,\n    });\n    const { giphyPreviewMessage, setGiphyPreviewMessage } = useGiphyPreview(separateGiphyPreview);\n    const processedMessages = useMemo(() => {\n        if (typeof messages === 'undefined') {\n            return [];\n        }\n        if (disableDateSeparator &&\n            !hideDeletedMessages &&\n            hideNewMessageSeparator &&\n            !separateGiphyPreview) {\n            return messages;\n        }\n        return processMessages({\n            enableDateSeparator: !disableDateSeparator,\n            hideDeletedMessages,\n            hideNewMessageSeparator,\n            lastRead,\n            messages,\n            reviewProcessedMessage,\n            setGiphyPreviewMessage,\n            userId: client.userID || '',\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        disableDateSeparator,\n        hideDeletedMessages,\n        hideNewMessageSeparator,\n        lastRead,\n        messages,\n        messages?.length,\n        client.userID,\n    ]);\n    // get the mapping of own messages to array of users who read them\n    const ownMessagesReadByOthers = useLastReadData({\n        messages: processedMessages,\n        read,\n        returnAllReadData,\n        userID: client.userID,\n    });\n    const lastReceivedMessageId = useMemo(() => getLastReceived(processedMessages), [\n        processedMessages,\n    ]);\n    const groupStylesFn = groupStyles || getGroupStyles;\n    const messageGroupStyles = useMemo(() => processedMessages.reduce((acc, message, i) => {\n        const style = groupStylesFn(message, processedMessages[i - 1], processedMessages[i + 1], !shouldGroupByUser, maxTimeBetweenGroupedMessages);\n        if (style)\n            acc[message.id] = style;\n        return acc;\n    }, {}), \n    // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [maxTimeBetweenGroupedMessages, processedMessages.length, shouldGroupByUser, groupStylesFn]);\n    const { atBottom, isMessageListScrolledToBottom, newMessagesNotification, setIsMessageListScrolledToBottom, setNewMessagesNotification, } = useNewMessageNotification(processedMessages, client.userID, hasMoreNewer);\n    useMarkRead({\n        isMessageListScrolledToBottom,\n        messageListIsThread: !!threadList,\n        unreadCount: channelUnreadUiState?.unread_messages ?? 0,\n        wasMarkedUnread: !!channelUnreadUiState?.first_unread_message_id,\n    });\n    const scrollToBottom = useCallback(async () => {\n        if (hasMoreNewer) {\n            await jumpToLatestMessage();\n            return;\n        }\n        if (virtuoso.current) {\n            virtuoso.current.scrollToIndex(processedMessages.length - 1);\n        }\n        setNewMessagesNotification(false);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [\n        virtuoso,\n        processedMessages,\n        setNewMessagesNotification,\n        // processedMessages were incorrectly rebuilt with a new object identity at some point, hence the .length usage\n        processedMessages.length,\n        hasMoreNewer,\n        jumpToLatestMessage,\n    ]);\n    useScrollToBottomOnNewMessage({ messages, scrollToBottom, scrollToLatestMessageOnFocus });\n    const numItemsPrepended = usePrependedMessagesCount(processedMessages, !disableDateSeparator);\n    const { messageSetKey } = useMessageSetKey({ messages });\n    const shouldForceScrollToBottom = useShouldForceScrollToBottom(processedMessages, client.userID);\n    const handleItemsRendered = useMemo(() => makeItemsRenderedHandler([toggleShowUnreadMessagesNotification], processedMessages), [processedMessages, toggleShowUnreadMessagesNotification]);\n    const followOutput = (isAtBottom) => {\n        if (hasMoreNewer || suppressAutoscroll) {\n            return false;\n        }\n        if (shouldForceScrollToBottom()) {\n            return isAtBottom ? stickToBottomScrollBehavior : 'auto';\n        }\n        // a message from another user has been received - don't scroll to bottom unless already there\n        return isAtBottom ? stickToBottomScrollBehavior : false;\n    };\n    const computeItemKey = useCallback((index, _, { numItemsPrepended, processedMessages }) => processedMessages[calculateItemIndex(index, numItemsPrepended)].id, []);\n    const atBottomStateChange = (isAtBottom) => {\n        atBottom.current = isAtBottom;\n        setIsMessageListScrolledToBottom(isAtBottom);\n        if (isAtBottom) {\n            loadMoreNewer?.(messageLimit);\n            setNewMessagesNotification?.(false);\n        }\n    };\n    const atTopStateChange = (isAtTop) => {\n        if (isAtTop) {\n            loadMore?.(messageLimit);\n        }\n    };\n    useEffect(() => {\n        let scrollTimeout;\n        if (highlightedMessageId) {\n            const index = findMessageIndex(processedMessages, highlightedMessageId);\n            if (index !== -1) {\n                scrollTimeout = setTimeout(() => {\n                    virtuoso.current?.scrollToIndex({ align: 'center', index });\n                }, 0);\n            }\n        }\n        return () => {\n            clearTimeout(scrollTimeout);\n        };\n    }, [highlightedMessageId, processedMessages]);\n    if (!processedMessages)\n        return null;\n    const dialogManagerId = threadList\n        ? 'virtualized-message-list-dialog-manager-thread'\n        : 'virtualized-message-list-dialog-manager';\n    return (React.createElement(React.Fragment, null,\n        React.createElement(MessageListMainPanel, null,\n            React.createElement(DialogManagerProvider, { id: dialogManagerId },\n                !threadList && showUnreadMessagesNotification && (React.createElement(UnreadMessagesNotification, { unreadCount: channelUnreadUiState?.unread_messages })),\n                React.createElement(\"div\", { className: customClasses?.virtualizedMessageList || 'str-chat__virtual-list' },\n                    React.createElement(Virtuoso, { atBottomStateChange: atBottomStateChange, atBottomThreshold: 100, atTopStateChange: atTopStateChange, atTopThreshold: 100, className: 'str-chat__message-list-scroll', components: {\n                            EmptyPlaceholder,\n                            Header,\n                            Item,\n                            ...virtuosoComponentsFromProps,\n                        }, computeItemKey: computeItemKey, context: {\n                            additionalMessageInputProps,\n                            closeReactionSelectorOnClick,\n                            customClasses,\n                            customMessageActions,\n                            customMessageRenderer,\n                            DateSeparator,\n                            firstUnreadMessageId: channelUnreadUiState?.first_unread_message_id,\n                            formatDate,\n                            head,\n                            lastReadDate: channelUnreadUiState?.last_read,\n                            lastReadMessageId: channelUnreadUiState?.last_read_message_id,\n                            lastReceivedMessageId,\n                            loadingMore,\n                            Message: MessageUIComponent,\n                            messageActions,\n                            messageGroupStyles,\n                            MessageSystem,\n                            numItemsPrepended,\n                            openThread,\n                            ownMessagesReadByOthers,\n                            processedMessages,\n                            reactionDetailsSort,\n                            shouldGroupByUser,\n                            sortReactionDetails,\n                            sortReactions,\n                            threadList,\n                            unreadMessageCount: channelUnreadUiState?.unread_messages,\n                            UnreadMessagesSeparator,\n                            virtuosoRef: virtuoso,\n                        }, firstItemIndex: calculateFirstItemIndex(numItemsPrepended), followOutput: followOutput, increaseViewportBy: { bottom: 200, top: 0 }, initialTopMostItemIndex: calculateInitialTopMostItemIndex(processedMessages, highlightedMessageId), itemContent: messageRenderer, itemSize: fractionalItemSize, itemsRendered: handleItemsRendered, key: messageSetKey, overscan: overscan, ref: virtuoso, style: { overflowX: 'hidden' }, totalCount: processedMessages.length, ...overridingVirtuosoProps, ...(scrollSeekPlaceHolder ? { scrollSeek: scrollSeekPlaceHolder } : {}), ...(defaultItemHeight ? { defaultItemHeight } : {}) }))),\n            TypingIndicator && React.createElement(TypingIndicator, null)),\n        React.createElement(MessageListNotifications, { hasNewMessages: newMessagesNotification, isMessageListScrolledToBottom: isMessageListScrolledToBottom, isNotAtLatestMessageSet: hasMoreNewer, MessageNotification: MessageNotification, notifications: notifications, scrollToBottom: scrollToBottom, threadList: threadList, unreadCount: threadList ? undefined : channelUnreadUiState?.unread_messages }),\n        giphyPreviewMessage && React.createElement(GiphyPreviewMessage, { message: giphyPreviewMessage })));\n};\n/**\n * The VirtualizedMessageList component renders a list of messages in a virtualized list.\n * It is a consumer of the React contexts set in [Channel](https://github.com/GetStream/stream-chat-react/blob/master/src/components/Channel/Channel.tsx).\n */\nexport function VirtualizedMessageList(props) {\n    const { jumpToLatestMessage, loadMore, loadMoreNewer, } = useChannelActionContext('VirtualizedMessageList');\n    const { channel, channelUnreadUiState, hasMore, hasMoreNewer, highlightedMessageId, loadingMore, loadingMoreNewer, messages: contextMessages, notifications, read, suppressAutoscroll, } = useChannelStateContext('VirtualizedMessageList');\n    const messages = props.messages || contextMessages;\n    return (React.createElement(VirtualizedMessageListWithContext, { channel: channel, channelUnreadUiState: props.channelUnreadUiState ?? channelUnreadUiState, hasMore: !!hasMore, hasMoreNewer: !!hasMoreNewer, highlightedMessageId: highlightedMessageId, jumpToLatestMessage: jumpToLatestMessage, loadingMore: !!loadingMore, loadingMoreNewer: !!loadingMoreNewer, loadMore: loadMore, loadMoreNewer: loadMoreNewer, messages: messages, notifications: notifications, read: read, suppressAutoscroll: suppressAutoscroll, ...props }));\n}\n"],"mappings":"AAAA,OAAOA,KAAK,IAAIC,WAAW,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,QAAQ,OAAO;AACtE,SAASC,QAAQ,QAAS,gBAAgB;AAC1C,SAASC,mBAAmB,IAAIC,0BAA0B,QAAQ,uBAAuB;AACzF,SAASC,eAAe,QAAQ,SAAS;AACzC,SAASC,eAAe,EAAEC,gBAAgB,EAAEC,yBAAyB,EAAEC,yBAAyB,EAAEC,6BAA6B,EAAEC,4BAA4B,EAAEC,wCAAwC,QAAS,gCAAgC;AAChP,SAASC,WAAW,QAAQ,qBAAqB;AACjD,SAASC,mBAAmB,IAAIC,0BAA0B,QAAQ,uBAAuB;AACzF,SAASC,wBAAwB,IAAIC,+BAA+B,QAAQ,4BAA4B;AACxG,SAASC,oBAAoB,IAAIC,2BAA2B,QAAQ,wBAAwB;AAC5F,SAASC,cAAc,EAAEC,eAAe,EAAEC,eAAe,QAAS,SAAS;AAC3E,SAASC,aAAa,QAAQ,YAAY;AAC1C,SAASC,0BAA0B,IAAIC,iCAAiC,QAAQ,8BAA8B;AAC9G,SAASC,uBAAuB,EAAEC,kBAAkB,EAAEC,gBAAgB,EAAEC,MAAM,EAAEC,IAAI,EAAEC,wBAAwB,EAAEC,eAAe,QAAS,oCAAoC;AAC5K,SAASC,uBAAuB,IAAIC,8BAA8B,QAAQ,gBAAgB;AAC1F,SAASC,aAAa,IAAIC,oBAAoB,QAAQ,kBAAkB;AACxE,SAASC,cAAc,IAAIC,oBAAoB,QAAQ,mBAAmB;AAC1E,SAASC,qBAAqB,QAAQ,eAAe;AACrD,SAASC,uBAAuB,QAAS,oCAAoC;AAC7E,SAASC,sBAAsB,QAAS,mCAAmC;AAC3E,SAASC,cAAc,QAAQ,2BAA2B;AAC1D,SAASC,mBAAmB,QAAQ,gCAAgC;AACpE,SAASC,8BAA8B,QAAQ,wBAAwB;AACvE,SAASC,kCAAkCA,CAACC,CAAC,EAAE;EAC3C,IAAIA,CAAC,CAACC,OAAO,KAAK,+DAA+D,IAC7ED,CAAC,CAACC,OAAO,KAAK,oCAAoC,EAAE;IACpDD,CAAC,CAACE,wBAAwB,CAAC,CAAC;EAChC;AACJ;AACA,SAASC,qCAAqCA,CAAA,EAAG;EAC7ClD,SAAS,CAAC,MAAM;IACZmD,MAAM,CAACC,gBAAgB,CAAC,OAAO,EAAEN,kCAAkC,CAAC;IACpE,OAAO,MAAM;MACTK,MAAM,CAACE,mBAAmB,CAAC,OAAO,EAAEP,kCAAkC,CAAC;IAC3E,CAAC;EACL,CAAC,EAAE,EAAE,CAAC;AACV;AACA,SAASQ,kBAAkBA,CAACC,OAAO,EAAE;EACjC,OAAOA,OAAO,CAACC,qBAAqB,CAAC,CAAC,CAACC,MAAM;AACjD;AACA,SAASC,gBAAgBA,CAACC,QAAQ,EAAEC,EAAE,EAAE;EACpC,OAAOD,QAAQ,CAACE,SAAS,CAAEb,OAAO,IAAKA,OAAO,CAACY,EAAE,KAAKA,EAAE,CAAC;AAC7D;AACA,SAASE,gCAAgCA,CAACH,QAAQ,EAAEI,oBAAoB,EAAE;EACtE,IAAIA,oBAAoB,EAAE;IACtB,MAAMC,KAAK,GAAGN,gBAAgB,CAACC,QAAQ,EAAEI,oBAAoB,CAAC;IAC9D,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;MACd,OAAO;QAAEC,KAAK,EAAE,QAAQ;QAAED;MAAM,CAAC;IACrC;EACJ;EACA,OAAOL,QAAQ,CAACO,MAAM,GAAG,CAAC;AAC9B;AACA,MAAMC,iCAAiC,GAAIC,KAAK,IAAK;EACjD,MAAM;IAAEC,2BAA2B;IAAEC,uBAAuB,GAAG,CAAC,CAAC;IAAEC,OAAO;IAAEC,oBAAoB;IAAEC,4BAA4B;IAAEC,oBAAoB;IAAEC,qBAAqB;IAAEC,iBAAiB;IAAEC,oBAAoB,GAAG,IAAI;IAAEC,UAAU;IAAEC,WAAW;IAAEC,YAAY;IAAEC,IAAI;IAAEC,mBAAmB,GAAG,KAAK;IAAEC,uBAAuB,GAAG,KAAK;IAAEpB,oBAAoB;IAAEqB,mBAAmB;IAAEC,WAAW;IAAEC,QAAQ;IAAEC,aAAa;IAAEC,6BAA6B;IAAEC,OAAO,EAAEC,2BAA2B;IAAEC,cAAc;IAAEC,YAAY,GAAG/C,8BAA8B;IAAEc,QAAQ;IAAEkC,aAAa;IAAEC,UAAU;IAChkB;IACAC,QAAQ,GAAG,CAAC;IAAEC,IAAI;IAAEC,iBAAiB,GAAG,KAAK;IAAEC,sBAAsB;IAAEC,qBAAqB;IAAEC,4BAA4B,GAAG,KAAK;IAAEC,oBAAoB,GAAG,KAAK;IAAEC,iBAAiB,GAAG,KAAK;IAAEC,4BAA4B;IAAEC,mBAAmB;IAAEC,mBAAmB;IAAEC,aAAa;IAAEC,2BAA2B,GAAG,QAAQ;IAAEC,kBAAkB;IAAEC;EAAY,CAAC,GAAGzC,KAAK;EACrW,MAAM;IAAE0C,UAAU,EAAEC,2BAA2B;IAAE,GAAGC;EAAwB,CAAC,GAAG1C,uBAAuB;EACvG;EACA;EACApB,qCAAqC,CAAC,CAAC;EACvC,MAAM;IAAEd,aAAa,GAAGC,oBAAoB;IAAEjC,mBAAmB,GAAGC,0BAA0B;IAAEY,wBAAwB,GAAGC,+BAA+B;IAAEH,mBAAmB,GAAGC,0BAA0B;IAAEiG,aAAa,GAAG1E,oBAAoB;IAAEpB,oBAAoB,GAAGC,2BAA2B;IAAEK,0BAA0B,GAAGC,iCAAiC;IAAEQ,uBAAuB,GAAGC,8BAA8B;IAAE+E,cAAc,EAAEC,6BAA6B,GAAG3F,aAAa;IAAE4F;EAAiB,CAAC,GAAGxE,mBAAmB,CAAC,wBAAwB,CAAC;EACniB,MAAMyE,kBAAkB,GAAG3B,2BAA2B,IAAIyB,6BAA6B;EACvF,MAAM;IAAEG,MAAM;IAAEC;EAAc,CAAC,GAAG5E,cAAc,CAAC,wBAAwB,CAAC;EAC1E,MAAM6E,QAAQ,GAAGtH,MAAM,CAAC,IAAI,CAAC;EAC7B,MAAMuH,QAAQ,GAAGxH,OAAO,CAAC,MAAMsE,OAAO,CAACkD,QAAQ,GAAG,CAAC,EAAE,CAAClD,OAAO,CAAC,CAAC;EAC/D,MAAM;IAAEmD,IAAI,EAAEC,8BAA8B;IAAEC;EAAsC,CAAC,GAAG/G,wCAAwC,CAAC;IAC7H4G,QAAQ,EAAEjD,oBAAoB,EAAEqD,SAAS;IACzCC,UAAU,EAAE,CAAC,CAACvB,4BAA4B;IAC1CwB,WAAW,EAAEvD,oBAAoB,EAAEwD,eAAe,IAAI;EAC1D,CAAC,CAAC;EACF,MAAM;IAAEC,mBAAmB;IAAEC;EAAuB,CAAC,GAAG3H,eAAe,CAAC8F,oBAAoB,CAAC;EAC7F,MAAM8B,iBAAiB,GAAGlI,OAAO,CAAC,MAAM;IACpC,IAAI,OAAO0D,QAAQ,KAAK,WAAW,EAAE;MACjC,OAAO,EAAE;IACb;IACA,IAAIkB,oBAAoB,IACpB,CAACK,mBAAmB,IACpBC,uBAAuB,IACvB,CAACkB,oBAAoB,EAAE;MACvB,OAAO1C,QAAQ;IACnB;IACA,OAAOpC,eAAe,CAAC;MACnB6G,mBAAmB,EAAE,CAACvD,oBAAoB;MAC1CK,mBAAmB;MACnBC,uBAAuB;MACvBsC,QAAQ;MACR9D,QAAQ;MACRuC,sBAAsB;MACtBgC,sBAAsB;MACtBG,MAAM,EAAEf,MAAM,CAACgB,MAAM,IAAI;IAC7B,CAAC,CAAC;IACF;EACJ,CAAC,EAAE,CACCzD,oBAAoB,EACpBK,mBAAmB,EACnBC,uBAAuB,EACvBsC,QAAQ,EACR9D,QAAQ,EACRA,QAAQ,EAAEO,MAAM,EAChBoD,MAAM,CAACgB,MAAM,CAChB,CAAC;EACF;EACA,MAAMC,uBAAuB,GAAGjI,eAAe,CAAC;IAC5CqD,QAAQ,EAAEwE,iBAAiB;IAC3BnC,IAAI;IACJC,iBAAiB;IACjBqC,MAAM,EAAEhB,MAAM,CAACgB;EACnB,CAAC,CAAC;EACF,MAAME,qBAAqB,GAAGvI,OAAO,CAAC,MAAMqB,eAAe,CAAC6G,iBAAiB,CAAC,EAAE,CAC5EA,iBAAiB,CACpB,CAAC;EACF,MAAMM,aAAa,GAAG1D,WAAW,IAAI1D,cAAc;EACnD,MAAMqH,kBAAkB,GAAGzI,OAAO,CAAC,MAAMkI,iBAAiB,CAACQ,MAAM,CAAC,CAACC,GAAG,EAAE5F,OAAO,EAAE6F,CAAC,KAAK;IACnF,MAAMC,KAAK,GAAGL,aAAa,CAACzF,OAAO,EAAEmF,iBAAiB,CAACU,CAAC,GAAG,CAAC,CAAC,EAAEV,iBAAiB,CAACU,CAAC,GAAG,CAAC,CAAC,EAAE,CAACvC,iBAAiB,EAAEd,6BAA6B,CAAC;IAC3I,IAAIsD,KAAK,EACLF,GAAG,CAAC5F,OAAO,CAACY,EAAE,CAAC,GAAGkF,KAAK;IAC3B,OAAOF,GAAG;EACd,CAAC,EAAE,CAAC,CAAC,CAAC;EACN;EACA;EACA,CAACpD,6BAA6B,EAAE2C,iBAAiB,CAACjE,MAAM,EAAEoC,iBAAiB,EAAEmC,aAAa,CAAC,CAAC;EAC5F,MAAM;IAAEM,QAAQ;IAAEC,6BAA6B;IAAEC,uBAAuB;IAAEC,gCAAgC;IAAEC;EAA4B,CAAC,GAAG1I,yBAAyB,CAAC0H,iBAAiB,EAAEb,MAAM,CAACgB,MAAM,EAAEtD,YAAY,CAAC;EACrNlE,WAAW,CAAC;IACRkI,6BAA6B;IAC7BI,mBAAmB,EAAE,CAAC,CAACvC,UAAU;IACjCkB,WAAW,EAAEvD,oBAAoB,EAAEwD,eAAe,IAAI,CAAC;IACvDqB,eAAe,EAAE,CAAC,CAAC7E,oBAAoB,EAAE8E;EAC7C,CAAC,CAAC;EACF,MAAMC,cAAc,GAAGxJ,WAAW,CAAC,YAAY;IAC3C,IAAIiF,YAAY,EAAE;MACd,MAAMI,mBAAmB,CAAC,CAAC;MAC3B;IACJ;IACA,IAAIoC,QAAQ,CAACgC,OAAO,EAAE;MAClBhC,QAAQ,CAACgC,OAAO,CAACC,aAAa,CAACtB,iBAAiB,CAACjE,MAAM,GAAG,CAAC,CAAC;IAChE;IACAiF,0BAA0B,CAAC,KAAK,CAAC;IACjC;EACJ,CAAC,EAAE,CACC3B,QAAQ,EACRW,iBAAiB,EACjBgB,0BAA0B;EAC1B;EACAhB,iBAAiB,CAACjE,MAAM,EACxBc,YAAY,EACZI,mBAAmB,CACtB,CAAC;EACFzE,6BAA6B,CAAC;IAAEgD,QAAQ;IAAE4F,cAAc;IAAEnD;EAA6B,CAAC,CAAC;EACzF,MAAMsD,iBAAiB,GAAGhJ,yBAAyB,CAACyH,iBAAiB,EAAE,CAACtD,oBAAoB,CAAC;EAC7F,MAAM;IAAE8E;EAAc,CAAC,GAAGnJ,gBAAgB,CAAC;IAAEmD;EAAS,CAAC,CAAC;EACxD,MAAMiG,yBAAyB,GAAGhJ,4BAA4B,CAACuH,iBAAiB,EAAEb,MAAM,CAACgB,MAAM,CAAC;EAChG,MAAMuB,mBAAmB,GAAG5J,OAAO,CAAC,MAAM+B,wBAAwB,CAAC,CAAC4F,oCAAoC,CAAC,EAAEO,iBAAiB,CAAC,EAAE,CAACA,iBAAiB,EAAEP,oCAAoC,CAAC,CAAC;EACzL,MAAMkC,YAAY,GAAIC,UAAU,IAAK;IACjC,IAAI/E,YAAY,IAAI4B,kBAAkB,EAAE;MACpC,OAAO,KAAK;IAChB;IACA,IAAIgD,yBAAyB,CAAC,CAAC,EAAE;MAC7B,OAAOG,UAAU,GAAGpD,2BAA2B,GAAG,MAAM;IAC5D;IACA;IACA,OAAOoD,UAAU,GAAGpD,2BAA2B,GAAG,KAAK;EAC3D,CAAC;EACD,MAAMqD,cAAc,GAAGjK,WAAW,CAAC,CAACiE,KAAK,EAAEiG,CAAC,EAAE;IAAEP,iBAAiB;IAAEvB;EAAkB,CAAC,KAAKA,iBAAiB,CAACvG,kBAAkB,CAACoC,KAAK,EAAE0F,iBAAiB,CAAC,CAAC,CAAC9F,EAAE,EAAE,EAAE,CAAC;EAClK,MAAMsG,mBAAmB,GAAIH,UAAU,IAAK;IACxChB,QAAQ,CAACS,OAAO,GAAGO,UAAU;IAC7Bb,gCAAgC,CAACa,UAAU,CAAC;IAC5C,IAAIA,UAAU,EAAE;MACZxE,aAAa,GAAGK,YAAY,CAAC;MAC7BuD,0BAA0B,GAAG,KAAK,CAAC;IACvC;EACJ,CAAC;EACD,MAAMgB,gBAAgB,GAAIC,OAAO,IAAK;IAClC,IAAIA,OAAO,EAAE;MACT9E,QAAQ,GAAGM,YAAY,CAAC;IAC5B;EACJ,CAAC;EACD5F,SAAS,CAAC,MAAM;IACZ,IAAIqK,aAAa;IACjB,IAAItG,oBAAoB,EAAE;MACtB,MAAMC,KAAK,GAAGN,gBAAgB,CAACyE,iBAAiB,EAAEpE,oBAAoB,CAAC;MACvE,IAAIC,KAAK,KAAK,CAAC,CAAC,EAAE;QACdqG,aAAa,GAAGC,UAAU,CAAC,MAAM;UAC7B9C,QAAQ,CAACgC,OAAO,EAAEC,aAAa,CAAC;YAAExF,KAAK,EAAE,QAAQ;YAAED;UAAM,CAAC,CAAC;QAC/D,CAAC,EAAE,CAAC,CAAC;MACT;IACJ;IACA,OAAO,MAAM;MACTuG,YAAY,CAACF,aAAa,CAAC;IAC/B,CAAC;EACL,CAAC,EAAE,CAACtG,oBAAoB,EAAEoE,iBAAiB,CAAC,CAAC;EAC7C,IAAI,CAACA,iBAAiB,EAClB,OAAO,IAAI;EACf,MAAMqC,eAAe,GAAG3D,UAAU,GAC5B,gDAAgD,GAChD,yCAAyC;EAC/C,OAAQ/G,KAAK,CAAC2K,aAAa,CAAC3K,KAAK,CAAC4K,QAAQ,EAAE,IAAI,EAC5C5K,KAAK,CAAC2K,aAAa,CAACtJ,oBAAoB,EAAE,IAAI,EAC1CrB,KAAK,CAAC2K,aAAa,CAACjI,qBAAqB,EAAE;IAAEoB,EAAE,EAAE4G;EAAgB,CAAC,EAC9D,CAAC3D,UAAU,IAAIc,8BAA8B,IAAK7H,KAAK,CAAC2K,aAAa,CAAChJ,0BAA0B,EAAE;IAAEsG,WAAW,EAAEvD,oBAAoB,EAAEwD;EAAgB,CAAC,CAAE,EAC1JlI,KAAK,CAAC2K,aAAa,CAAC,KAAK,EAAE;IAAEE,SAAS,EAAEpD,aAAa,EAAEqD,sBAAsB,IAAI;EAAyB,CAAC,EACvG9K,KAAK,CAAC2K,aAAa,CAACtK,QAAQ,EAAE;IAAE+J,mBAAmB,EAAEA,mBAAmB;IAAEW,iBAAiB,EAAE,GAAG;IAAEV,gBAAgB,EAAEA,gBAAgB;IAAEW,cAAc,EAAE,GAAG;IAAEH,SAAS,EAAE,+BAA+B;IAAE7D,UAAU,EAAE;MAC3MjF,gBAAgB;MAChBC,MAAM;MACNC,IAAI;MACJ,GAAGgF;IACP,CAAC;IAAEiD,cAAc,EAAEA,cAAc;IAAEe,OAAO,EAAE;MACxC1G,2BAA2B;MAC3BI,4BAA4B;MAC5B8C,aAAa;MACb7C,oBAAoB;MACpBC,qBAAqB;MACrBvC,aAAa;MACb4I,oBAAoB,EAAExG,oBAAoB,EAAE8E,uBAAuB;MACnExE,UAAU;MACVG,IAAI;MACJgG,YAAY,EAAEzG,oBAAoB,EAAEqD,SAAS;MAC7CqD,iBAAiB,EAAE1G,oBAAoB,EAAE2G,oBAAoB;MAC7D3C,qBAAqB;MACrBnD,WAAW;MACXI,OAAO,EAAE4B,kBAAkB;MAC3B1B,cAAc;MACd+C,kBAAkB;MAClBzB,aAAa;MACbyC,iBAAiB;MACjB5D,UAAU;MACVyC,uBAAuB;MACvBJ,iBAAiB;MACjB3B,mBAAmB;MACnBF,iBAAiB;MACjBG,mBAAmB;MACnBC,aAAa;MACbG,UAAU;MACVuE,kBAAkB,EAAE5G,oBAAoB,EAAEwD,eAAe;MACzD9F,uBAAuB;MACvBmJ,WAAW,EAAE7D;IACjB,CAAC;IAAE8D,cAAc,EAAE3J,uBAAuB,CAAC+H,iBAAiB,CAAC;IAAEI,YAAY,EAAEA,YAAY;IAAEyB,kBAAkB,EAAE;MAAEC,MAAM,EAAE,GAAG;MAAEC,GAAG,EAAE;IAAE,CAAC;IAAEC,uBAAuB,EAAE5H,gCAAgC,CAACqE,iBAAiB,EAAEpE,oBAAoB,CAAC;IAAE4H,WAAW,EAAE1J,eAAe;IAAE2J,QAAQ,EAAEtI,kBAAkB;IAAEuI,aAAa,EAAEhC,mBAAmB;IAAEiC,GAAG,EAAEnC,aAAa;IAAE5D,QAAQ,EAAEA,QAAQ;IAAEgG,GAAG,EAAEvE,QAAQ;IAAEsB,KAAK,EAAE;MAAEkD,SAAS,EAAE;IAAS,CAAC;IAAEC,UAAU,EAAE9D,iBAAiB,CAACjE,MAAM;IAAE,GAAG8C,uBAAuB;IAAE,IAAIb,qBAAqB,GAAG;MAAE+F,UAAU,EAAE/F;IAAsB,CAAC,GAAG,CAAC,CAAC,CAAC;IAAE,IAAIvB,iBAAiB,GAAG;MAAEA;IAAkB,CAAC,GAAG,CAAC,CAAC;EAAE,CAAC,CAAC,CAAC,CAAC,EAClnBwC,eAAe,IAAItH,KAAK,CAAC2K,aAAa,CAACrD,eAAe,EAAE,IAAI,CAAC,CAAC,EAClEtH,KAAK,CAAC2K,aAAa,CAACxJ,wBAAwB,EAAE;IAAEkL,cAAc,EAAElD,uBAAuB;IAAED,6BAA6B,EAAEA,6BAA6B;IAAEoD,uBAAuB,EAAEpH,YAAY;IAAEjE,mBAAmB,EAAEA,mBAAmB;IAAE8E,aAAa,EAAEA,aAAa;IAAE0D,cAAc,EAAEA,cAAc;IAAE1C,UAAU,EAAEA,UAAU;IAAEkB,WAAW,EAAElB,UAAU,GAAGwF,SAAS,GAAG7H,oBAAoB,EAAEwD;EAAgB,CAAC,CAAC,EAC5YC,mBAAmB,IAAInI,KAAK,CAAC2K,aAAa,CAACrK,mBAAmB,EAAE;IAAE4C,OAAO,EAAEiF;EAAoB,CAAC,CAAC,CAAC;AAC1G,CAAC;AACD;AACA;AACA;AACA;AACA,OAAO,SAASqE,sBAAsBA,CAAClI,KAAK,EAAE;EAC1C,MAAM;IAAEgB,mBAAmB;IAAEE,QAAQ;IAAEC;EAAe,CAAC,GAAG9C,uBAAuB,CAAC,wBAAwB,CAAC;EAC3G,MAAM;IAAE8B,OAAO;IAAEC,oBAAoB;IAAE+H,OAAO;IAAEvH,YAAY;IAAEjB,oBAAoB;IAAEsB,WAAW;IAAEmH,gBAAgB;IAAE7I,QAAQ,EAAE8I,eAAe;IAAE5G,aAAa;IAAEG,IAAI;IAAEY;EAAoB,CAAC,GAAGlE,sBAAsB,CAAC,wBAAwB,CAAC;EAC3O,MAAMiB,QAAQ,GAAGS,KAAK,CAACT,QAAQ,IAAI8I,eAAe;EAClD,OAAQ3M,KAAK,CAAC2K,aAAa,CAACtG,iCAAiC,EAAE;IAAEI,OAAO,EAAEA,OAAO;IAAEC,oBAAoB,EAAEJ,KAAK,CAACI,oBAAoB,IAAIA,oBAAoB;IAAE+H,OAAO,EAAE,CAAC,CAACA,OAAO;IAAEvH,YAAY,EAAE,CAAC,CAACA,YAAY;IAAEjB,oBAAoB,EAAEA,oBAAoB;IAAEqB,mBAAmB,EAAEA,mBAAmB;IAAEC,WAAW,EAAE,CAAC,CAACA,WAAW;IAAEmH,gBAAgB,EAAE,CAAC,CAACA,gBAAgB;IAAElH,QAAQ,EAAEA,QAAQ;IAAEC,aAAa,EAAEA,aAAa;IAAE5B,QAAQ,EAAEA,QAAQ;IAAEkC,aAAa,EAAEA,aAAa;IAAEG,IAAI,EAAEA,IAAI;IAAEY,kBAAkB,EAAEA,kBAAkB;IAAE,GAAGxC;EAAM,CAAC,CAAC;AAC9gB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}