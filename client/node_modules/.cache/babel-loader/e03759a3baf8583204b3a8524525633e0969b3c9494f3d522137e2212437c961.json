{"ast":null,"code":"import React, { Fragment } from 'react';\nimport { isDateSeparatorMessage } from './utils';\nimport { Message } from '../Message';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from './UnreadMessagesSeparator';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nexport function defaultRenderMessages({\n  channelUnreadUiState,\n  components,\n  customClasses,\n  lastReceivedMessageId: lastReceivedId,\n  messageGroupStyles,\n  messages,\n  readData,\n  sharedMessageProps: messageProps\n}) {\n  const {\n    DateSeparator = DefaultDateSeparator,\n    HeaderComponent,\n    MessageSystem = DefaultMessageSystem,\n    UnreadMessagesSeparator = DefaultUnreadMessagesSeparator\n  } = components;\n  const renderedMessages = [];\n  let firstMessage;\n  for (let index = 0; index < messages.length; index++) {\n    const message = messages[index];\n    if (isDateSeparatorMessage(message)) {\n      renderedMessages.push(React.createElement(\"li\", {\n        key: `${message.date.toISOString()}-i`\n      }, React.createElement(DateSeparator, {\n        date: message.date,\n        formatDate: messageProps.formatDate,\n        unread: message.unread\n      })));\n    } else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {\n      renderedMessages.push(React.createElement(\"li\", {\n        key: 'intro'\n      }, React.createElement(HeaderComponent, null)));\n    } else if (message.type === 'system') {\n      renderedMessages.push(React.createElement(\"li\", {\n        \"data-message-id\": message.id,\n        key: message.id || message.created_at\n      }, React.createElement(MessageSystem, {\n        message: message\n      })));\n    } else {\n      if (!firstMessage) {\n        firstMessage = message;\n      }\n      const groupStyles = messageGroupStyles[message.id] || '';\n      const messageClass = customClasses?.message || `str-chat__li str-chat__li--${groupStyles}`;\n      const createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();\n      const lastReadTimestamp = channelUnreadUiState?.last_read.getTime();\n      const isFirstMessage = firstMessage?.id && firstMessage.id === message.id;\n      const isNewestMessage = index === messages.length - 1;\n      const isLastReadMessage = channelUnreadUiState?.last_read_message_id === message.id || !channelUnreadUiState?.unread_messages && createdAtTimestamp === lastReadTimestamp;\n      const isFirstUnreadMessage = channelUnreadUiState?.first_unread_message_id === message.id || !!channelUnreadUiState?.unread_messages && !!createdAtTimestamp && !!lastReadTimestamp && createdAtTimestamp > lastReadTimestamp && isFirstMessage;\n      const showUnreadSeparatorAbove = !channelUnreadUiState?.last_read_message_id && isFirstUnreadMessage;\n      const showUnreadSeparatorBelow = isLastReadMessage && !isNewestMessage && (channelUnreadUiState?.first_unread_message_id || !!channelUnreadUiState?.unread_messages); // this part has to be here as we do not mark channel read when sending a message\n      renderedMessages.push(React.createElement(Fragment, {\n        key: message.id || message.created_at\n      }, showUnreadSeparatorAbove && UnreadMessagesSeparator && React.createElement(\"li\", {\n        className: 'str-chat__li str-chat__unread-messages-separator-wrapper'\n      }, React.createElement(UnreadMessagesSeparator, {\n        unreadCount: channelUnreadUiState?.unread_messages\n      })), React.createElement(\"li\", {\n        className: messageClass,\n        \"data-message-id\": message.id,\n        \"data-testid\": messageClass\n      }, React.createElement(Message, {\n        groupStyles: [groupStyles],\n        lastReceivedId: lastReceivedId,\n        message: message,\n        readBy: readData[message.id] || [],\n        ...messageProps\n      })), showUnreadSeparatorBelow && UnreadMessagesSeparator && React.createElement(\"li\", {\n        className: 'str-chat__li str-chat__unread-messages-separator-wrapper'\n      }, React.createElement(UnreadMessagesSeparator, {\n        unreadCount: channelUnreadUiState?.unread_messages\n      }))));\n    }\n  }\n  return renderedMessages;\n}","map":{"version":3,"names":["React","Fragment","isDateSeparatorMessage","Message","DateSeparator","DefaultDateSeparator","EventComponent","DefaultMessageSystem","UnreadMessagesSeparator","DefaultUnreadMessagesSeparator","CUSTOM_MESSAGE_TYPE","defaultRenderMessages","channelUnreadUiState","components","customClasses","lastReceivedMessageId","lastReceivedId","messageGroupStyles","messages","readData","sharedMessageProps","messageProps","HeaderComponent","MessageSystem","renderedMessages","firstMessage","index","length","message","push","createElement","key","date","toISOString","formatDate","unread","customType","intro","type","id","created_at","groupStyles","messageClass","createdAtTimestamp","Date","getTime","lastReadTimestamp","last_read","isFirstMessage","isNewestMessage","isLastReadMessage","last_read_message_id","unread_messages","isFirstUnreadMessage","first_unread_message_id","showUnreadSeparatorAbove","showUnreadSeparatorBelow","className","unreadCount","readBy"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageList/renderMessages.js"],"sourcesContent":["import React, { Fragment } from 'react';\nimport { isDateSeparatorMessage } from './utils';\nimport { Message } from '../Message';\nimport { DateSeparator as DefaultDateSeparator } from '../DateSeparator';\nimport { EventComponent as DefaultMessageSystem } from '../EventComponent';\nimport { UnreadMessagesSeparator as DefaultUnreadMessagesSeparator } from './UnreadMessagesSeparator';\nimport { CUSTOM_MESSAGE_TYPE } from '../../constants/messageTypes';\nexport function defaultRenderMessages({ channelUnreadUiState, components, customClasses, lastReceivedMessageId: lastReceivedId, messageGroupStyles, messages, readData, sharedMessageProps: messageProps, }) {\n    const { DateSeparator = DefaultDateSeparator, HeaderComponent, MessageSystem = DefaultMessageSystem, UnreadMessagesSeparator = DefaultUnreadMessagesSeparator, } = components;\n    const renderedMessages = [];\n    let firstMessage;\n    for (let index = 0; index < messages.length; index++) {\n        const message = messages[index];\n        if (isDateSeparatorMessage(message)) {\n            renderedMessages.push(React.createElement(\"li\", { key: `${message.date.toISOString()}-i` },\n                React.createElement(DateSeparator, { date: message.date, formatDate: messageProps.formatDate, unread: message.unread })));\n        }\n        else if (message.customType === CUSTOM_MESSAGE_TYPE.intro && HeaderComponent) {\n            renderedMessages.push(React.createElement(\"li\", { key: 'intro' },\n                React.createElement(HeaderComponent, null)));\n        }\n        else if (message.type === 'system') {\n            renderedMessages.push(React.createElement(\"li\", { \"data-message-id\": message.id, key: message.id || message.created_at },\n                React.createElement(MessageSystem, { message: message })));\n        }\n        else {\n            if (!firstMessage) {\n                firstMessage = message;\n            }\n            const groupStyles = messageGroupStyles[message.id] || '';\n            const messageClass = customClasses?.message || `str-chat__li str-chat__li--${groupStyles}`;\n            const createdAtTimestamp = message.created_at && new Date(message.created_at).getTime();\n            const lastReadTimestamp = channelUnreadUiState?.last_read.getTime();\n            const isFirstMessage = firstMessage?.id && firstMessage.id === message.id;\n            const isNewestMessage = index === messages.length - 1;\n            const isLastReadMessage = channelUnreadUiState?.last_read_message_id === message.id ||\n                (!channelUnreadUiState?.unread_messages && createdAtTimestamp === lastReadTimestamp);\n            const isFirstUnreadMessage = channelUnreadUiState?.first_unread_message_id === message.id ||\n                (!!channelUnreadUiState?.unread_messages &&\n                    !!createdAtTimestamp &&\n                    !!lastReadTimestamp &&\n                    createdAtTimestamp > lastReadTimestamp &&\n                    isFirstMessage);\n            const showUnreadSeparatorAbove = !channelUnreadUiState?.last_read_message_id && isFirstUnreadMessage;\n            const showUnreadSeparatorBelow = isLastReadMessage &&\n                !isNewestMessage &&\n                (channelUnreadUiState?.first_unread_message_id || !!channelUnreadUiState?.unread_messages); // this part has to be here as we do not mark channel read when sending a message\n            renderedMessages.push(React.createElement(Fragment, { key: message.id || message.created_at },\n                showUnreadSeparatorAbove && UnreadMessagesSeparator && (React.createElement(\"li\", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },\n                    React.createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState?.unread_messages }))),\n                React.createElement(\"li\", { className: messageClass, \"data-message-id\": message.id, \"data-testid\": messageClass },\n                    React.createElement(Message, { groupStyles: [groupStyles], lastReceivedId: lastReceivedId, message: message, readBy: readData[message.id] || [], ...messageProps })),\n                showUnreadSeparatorBelow && UnreadMessagesSeparator && (React.createElement(\"li\", { className: 'str-chat__li str-chat__unread-messages-separator-wrapper' },\n                    React.createElement(UnreadMessagesSeparator, { unreadCount: channelUnreadUiState?.unread_messages })))));\n        }\n    }\n    return renderedMessages;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}