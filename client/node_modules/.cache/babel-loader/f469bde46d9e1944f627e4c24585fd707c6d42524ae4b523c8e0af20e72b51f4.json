{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport { defaultDateTimeParser, isLanguageSupported, Streami18n } from '../../../i18n';\nexport const useChat = ({\n  client,\n  defaultLanguage = 'en',\n  i18nInstance,\n  initialNavOpen\n}) => {\n  const [translators, setTranslators] = useState({\n    t: key => key,\n    tDateTimeParser: defaultDateTimeParser,\n    userLanguage: 'en'\n  });\n  const [channel, setChannel] = useState();\n  const [mutes, setMutes] = useState([]);\n  const [navOpen, setNavOpen] = useState(initialNavOpen);\n  const [latestMessageDatesByChannels, setLatestMessageDatesByChannels] = useState({});\n  const clientMutes = client.user?.mutes || [];\n  const closeMobileNav = () => setNavOpen(false);\n  const openMobileNav = () => setTimeout(() => setNavOpen(true), 100);\n  const appSettings = useRef(null);\n  const getAppSettings = () => {\n    if (appSettings.current) {\n      return appSettings.current;\n    }\n    appSettings.current = client.getAppSettings();\n    return appSettings.current;\n  };\n  useEffect(() => {\n    if (!client) return;\n    const userAgent = client.getUserAgent();\n    if (!userAgent.includes('stream-chat-react')) {\n      // result looks like: 'stream-chat-react-2.3.2-stream-chat-javascript-client-browser-2.2.2'\n      // the upper-case text between double underscores is replaced with the actual semantic version of the library\n      client.setUserAgent(`stream-chat-react-12.6.2-${userAgent}`);\n    }\n    client.threads.registerSubscriptions();\n    client.polls.registerSubscriptions();\n    return () => {\n      client.threads.unregisterSubscriptions();\n      client.polls.unregisterSubscriptions();\n    };\n  }, [client]);\n  useEffect(() => {\n    setMutes(clientMutes);\n    const handleEvent = event => {\n      setMutes(event.me?.mutes || []);\n    };\n    client.on('notification.mutes_updated', handleEvent);\n    return () => client.off('notification.mutes_updated', handleEvent);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [clientMutes?.length]);\n  useEffect(() => {\n    let userLanguage = client.user?.language;\n    if (!userLanguage) {\n      const browserLanguage = window.navigator.language.slice(0, 2); // just get language code, not country-specific version\n      userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;\n    }\n    const streami18n = i18nInstance || new Streami18n({\n      language: userLanguage\n    });\n    streami18n.registerSetLanguageCallback(t => setTranslators(prevTranslator => ({\n      ...prevTranslator,\n      t\n    })));\n    streami18n.getTranslators().then(translator => {\n      setTranslators({\n        ...translator,\n        userLanguage: userLanguage || defaultLanguage\n      });\n    });\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [i18nInstance]);\n  const setActiveChannel = useCallback(async (activeChannel, watchers = {}, event) => {\n    if (event && event.preventDefault) event.preventDefault();\n    if (activeChannel && Object.keys(watchers).length) {\n      await activeChannel.query({\n        watch: true,\n        watchers\n      });\n    }\n    setChannel(activeChannel);\n    closeMobileNav();\n  }, []);\n  useEffect(() => {\n    setLatestMessageDatesByChannels({});\n  }, [client.user?.id]);\n  return {\n    channel,\n    closeMobileNav,\n    getAppSettings,\n    latestMessageDatesByChannels,\n    mutes,\n    navOpen,\n    openMobileNav,\n    setActiveChannel,\n    translators\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","defaultDateTimeParser","isLanguageSupported","Streami18n","useChat","client","defaultLanguage","i18nInstance","initialNavOpen","translators","setTranslators","t","key","tDateTimeParser","userLanguage","channel","setChannel","mutes","setMutes","navOpen","setNavOpen","latestMessageDatesByChannels","setLatestMessageDatesByChannels","clientMutes","user","closeMobileNav","openMobileNav","setTimeout","appSettings","getAppSettings","current","userAgent","getUserAgent","includes","setUserAgent","threads","registerSubscriptions","polls","unregisterSubscriptions","handleEvent","event","me","on","off","length","language","browserLanguage","window","navigator","slice","streami18n","registerSetLanguageCallback","prevTranslator","getTranslators","then","translator","setActiveChannel","activeChannel","watchers","preventDefault","Object","keys","query","watch","id"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Chat/hooks/useChat.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport { defaultDateTimeParser, isLanguageSupported, Streami18n, } from '../../../i18n';\nexport const useChat = ({ client, defaultLanguage = 'en', i18nInstance, initialNavOpen, }) => {\n    const [translators, setTranslators] = useState({\n        t: (key) => key,\n        tDateTimeParser: defaultDateTimeParser,\n        userLanguage: 'en',\n    });\n    const [channel, setChannel] = useState();\n    const [mutes, setMutes] = useState([]);\n    const [navOpen, setNavOpen] = useState(initialNavOpen);\n    const [latestMessageDatesByChannels, setLatestMessageDatesByChannels] = useState({});\n    const clientMutes = client.user?.mutes || [];\n    const closeMobileNav = () => setNavOpen(false);\n    const openMobileNav = () => setTimeout(() => setNavOpen(true), 100);\n    const appSettings = useRef(null);\n    const getAppSettings = () => {\n        if (appSettings.current) {\n            return appSettings.current;\n        }\n        appSettings.current = client.getAppSettings();\n        return appSettings.current;\n    };\n    useEffect(() => {\n        if (!client)\n            return;\n        const userAgent = client.getUserAgent();\n        if (!userAgent.includes('stream-chat-react')) {\n            // result looks like: 'stream-chat-react-2.3.2-stream-chat-javascript-client-browser-2.2.2'\n            // the upper-case text between double underscores is replaced with the actual semantic version of the library\n            client.setUserAgent(`stream-chat-react-12.6.2-${userAgent}`);\n        }\n        client.threads.registerSubscriptions();\n        client.polls.registerSubscriptions();\n        return () => {\n            client.threads.unregisterSubscriptions();\n            client.polls.unregisterSubscriptions();\n        };\n    }, [client]);\n    useEffect(() => {\n        setMutes(clientMutes);\n        const handleEvent = (event) => {\n            setMutes(event.me?.mutes || []);\n        };\n        client.on('notification.mutes_updated', handleEvent);\n        return () => client.off('notification.mutes_updated', handleEvent);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [clientMutes?.length]);\n    useEffect(() => {\n        let userLanguage = client.user?.language;\n        if (!userLanguage) {\n            const browserLanguage = window.navigator.language.slice(0, 2); // just get language code, not country-specific version\n            userLanguage = isLanguageSupported(browserLanguage) ? browserLanguage : defaultLanguage;\n        }\n        const streami18n = i18nInstance || new Streami18n({ language: userLanguage });\n        streami18n.registerSetLanguageCallback((t) => setTranslators((prevTranslator) => ({ ...prevTranslator, t })));\n        streami18n.getTranslators().then((translator) => {\n            setTranslators({\n                ...translator,\n                userLanguage: userLanguage || defaultLanguage,\n            });\n        });\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [i18nInstance]);\n    const setActiveChannel = useCallback(async (activeChannel, watchers = {}, event) => {\n        if (event && event.preventDefault)\n            event.preventDefault();\n        if (activeChannel && Object.keys(watchers).length) {\n            await activeChannel.query({ watch: true, watchers });\n        }\n        setChannel(activeChannel);\n        closeMobileNav();\n    }, []);\n    useEffect(() => {\n        setLatestMessageDatesByChannels({});\n    }, [client.user?.id]);\n    return {\n        channel,\n        closeMobileNav,\n        getAppSettings,\n        latestMessageDatesByChannels,\n        mutes,\n        navOpen,\n        openMobileNav,\n        setActiveChannel,\n        translators,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}