{"ast":null,"code":"import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { Item } from './Item';\nimport { escapeRegExp } from '../Message/renderText';\nexport const List = ({\n  className,\n  component,\n  currentTrigger,\n  dropdownScroll,\n  getSelectedItem,\n  getTextToReplace,\n  itemClassName,\n  itemStyle,\n  onSelect,\n  selectionEnd,\n  style,\n  SuggestionItem: PropSuggestionItem,\n  value: propValue,\n  values\n}) => {\n  const {\n    AutocompleteSuggestionItem\n  } = useComponentContext('SuggestionList');\n  const SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item;\n  const [selectedItemIndex, setSelectedItemIndex] = useState(undefined);\n  const itemsRef = [];\n  const isSelected = item => selectedItemIndex === values.findIndex(value => getId(value) === getId(item));\n  const getId = item => {\n    const textToReplace = getTextToReplace(item);\n    if (textToReplace.key) {\n      return textToReplace.key;\n    }\n    if (typeof item === 'string' || !item.key) {\n      return textToReplace.text;\n    }\n    return item.key;\n  };\n  const findItemIndex = useCallback(item => values.findIndex(value => value.id ? value.id === item.id : value.name === item.name), [values]);\n  const modifyText = value => {\n    if (!value) return;\n    onSelect(getTextToReplace(value));\n    if (getSelectedItem) getSelectedItem(value);\n  };\n  const handleClick = useCallback((e, item) => {\n    e?.preventDefault();\n    const index = findItemIndex(item);\n    modifyText(values[index]);\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [modifyText, findItemIndex]);\n  const selectItem = useCallback(item => {\n    const index = findItemIndex(item);\n    setSelectedItemIndex(index);\n  }, [findItemIndex]);\n  const handleKeyDown = useCallback(event => {\n    if (event.key === 'ArrowUp') {\n      setSelectedItemIndex(prevSelected => {\n        if (prevSelected === undefined) return 0;\n        const newIndex = prevSelected === 0 ? values.length - 1 : prevSelected - 1;\n        dropdownScroll(itemsRef[newIndex]);\n        return newIndex;\n      });\n    }\n    if (event.key === 'ArrowDown') {\n      setSelectedItemIndex(prevSelected => {\n        if (prevSelected === undefined) return 0;\n        const newIndex = prevSelected === values.length - 1 ? 0 : prevSelected + 1;\n        dropdownScroll(itemsRef[newIndex]);\n        return newIndex;\n      });\n    }\n    if ((event.key === 'Enter' || event.key === 'Tab') && selectedItemIndex !== undefined) {\n      handleClick(event, values[selectedItemIndex]);\n    }\n    return null;\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [selectedItemIndex, values]);\n  useEffect(() => {\n    document.addEventListener('keydown', handleKeyDown, false);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [handleKeyDown]);\n  useEffect(() => {\n    if (values?.length) selectItem(values[0]);\n  }, [values]); // eslint-disable-line\n  const restructureItem = useCallback(item => {\n    const matched = item.name || item.id;\n    const textBeforeCursor = propValue.slice(0, selectionEnd);\n    const triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);\n    const editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));\n    const parts = matched.split(new RegExp(`(${editedPropValue})`, 'gi'));\n    const itemNameParts = {\n      match: editedPropValue,\n      parts\n    };\n    return {\n      ...item,\n      itemNameParts\n    };\n  }, [propValue, selectionEnd, currentTrigger]);\n  const restructuredValues = useMemo(() => values.map(restructureItem), [values, restructureItem]);\n  return React.createElement(\"ul\", {\n    className: clsx('str-chat__suggestion-list', className),\n    style: style\n  }, restructuredValues.map((item, i) => React.createElement(SuggestionItem, {\n    className: itemClassName,\n    component: component,\n    item: item,\n    key: getId(item),\n    onClickHandler: handleClick,\n    onSelectHandler: selectItem,\n    ref: ref => {\n      itemsRef[i] = ref;\n    },\n    selected: isSelected(item),\n    style: itemStyle,\n    value: propValue\n  })));\n};","map":{"version":3,"names":["React","useCallback","useEffect","useMemo","useState","clsx","useComponentContext","Item","escapeRegExp","List","className","component","currentTrigger","dropdownScroll","getSelectedItem","getTextToReplace","itemClassName","itemStyle","onSelect","selectionEnd","style","SuggestionItem","PropSuggestionItem","value","propValue","values","AutocompleteSuggestionItem","selectedItemIndex","setSelectedItemIndex","undefined","itemsRef","isSelected","item","findIndex","getId","textToReplace","key","text","findItemIndex","id","name","modifyText","handleClick","e","preventDefault","index","selectItem","handleKeyDown","event","prevSelected","newIndex","length","document","addEventListener","removeEventListener","restructureItem","matched","textBeforeCursor","slice","triggerIndex","lastIndexOf","editedPropValue","parts","split","RegExp","itemNameParts","match","restructuredValues","map","createElement","i","onClickHandler","onSelectHandler","ref","selected"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/AutoCompleteTextarea/List.js"],"sourcesContent":["import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport clsx from 'clsx';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { Item } from './Item';\nimport { escapeRegExp } from '../Message/renderText';\nexport const List = ({ className, component, currentTrigger, dropdownScroll, getSelectedItem, getTextToReplace, itemClassName, itemStyle, onSelect, selectionEnd, style, SuggestionItem: PropSuggestionItem, value: propValue, values, }) => {\n    const { AutocompleteSuggestionItem } = useComponentContext('SuggestionList');\n    const SuggestionItem = PropSuggestionItem || AutocompleteSuggestionItem || Item;\n    const [selectedItemIndex, setSelectedItemIndex] = useState(undefined);\n    const itemsRef = [];\n    const isSelected = (item) => selectedItemIndex === values.findIndex((value) => getId(value) === getId(item));\n    const getId = (item) => {\n        const textToReplace = getTextToReplace(item);\n        if (textToReplace.key) {\n            return textToReplace.key;\n        }\n        if (typeof item === 'string' || !item.key) {\n            return textToReplace.text;\n        }\n        return item.key;\n    };\n    const findItemIndex = useCallback((item) => values.findIndex((value) => (value.id ? value.id === item.id : value.name === item.name)), [values]);\n    const modifyText = (value) => {\n        if (!value)\n            return;\n        onSelect(getTextToReplace(value));\n        if (getSelectedItem)\n            getSelectedItem(value);\n    };\n    const handleClick = useCallback((e, item) => {\n        e?.preventDefault();\n        const index = findItemIndex(item);\n        modifyText(values[index]);\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [modifyText, findItemIndex]);\n    const selectItem = useCallback((item) => {\n        const index = findItemIndex(item);\n        setSelectedItemIndex(index);\n    }, [findItemIndex]);\n    const handleKeyDown = useCallback((event) => {\n        if (event.key === 'ArrowUp') {\n            setSelectedItemIndex((prevSelected) => {\n                if (prevSelected === undefined)\n                    return 0;\n                const newIndex = prevSelected === 0 ? values.length - 1 : prevSelected - 1;\n                dropdownScroll(itemsRef[newIndex]);\n                return newIndex;\n            });\n        }\n        if (event.key === 'ArrowDown') {\n            setSelectedItemIndex((prevSelected) => {\n                if (prevSelected === undefined)\n                    return 0;\n                const newIndex = prevSelected === values.length - 1 ? 0 : prevSelected + 1;\n                dropdownScroll(itemsRef[newIndex]);\n                return newIndex;\n            });\n        }\n        if ((event.key === 'Enter' || event.key === 'Tab') && selectedItemIndex !== undefined) {\n            handleClick(event, values[selectedItemIndex]);\n        }\n        return null;\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [selectedItemIndex, values]);\n    useEffect(() => {\n        document.addEventListener('keydown', handleKeyDown, false);\n        return () => document.removeEventListener('keydown', handleKeyDown);\n    }, [handleKeyDown]);\n    useEffect(() => {\n        if (values?.length)\n            selectItem(values[0]);\n    }, [values]); // eslint-disable-line\n    const restructureItem = useCallback((item) => {\n        const matched = item.name || item.id;\n        const textBeforeCursor = propValue.slice(0, selectionEnd);\n        const triggerIndex = textBeforeCursor.lastIndexOf(currentTrigger);\n        const editedPropValue = escapeRegExp(textBeforeCursor.slice(triggerIndex + 1));\n        const parts = matched.split(new RegExp(`(${editedPropValue})`, 'gi'));\n        const itemNameParts = { match: editedPropValue, parts };\n        return { ...item, itemNameParts };\n    }, [propValue, selectionEnd, currentTrigger]);\n    const restructuredValues = useMemo(() => values.map(restructureItem), [values, restructureItem]);\n    return (React.createElement(\"ul\", { className: clsx('str-chat__suggestion-list', className), style: style }, restructuredValues.map((item, i) => (React.createElement(SuggestionItem, { className: itemClassName, component: component, item: item, key: getId(item), onClickHandler: handleClick, onSelectHandler: selectItem, ref: (ref) => {\n            itemsRef[i] = ref;\n        }, selected: isSelected(item), style: itemStyle, value: propValue })))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}