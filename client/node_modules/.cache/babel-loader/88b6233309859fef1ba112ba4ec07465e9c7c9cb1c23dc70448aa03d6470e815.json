{"ast":null,"code":"import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { useChannelsQueryState } from './hooks/useChannelsQueryState';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport const Chat = props => {\n  const {\n    children,\n    client,\n    customClasses,\n    defaultLanguage,\n    i18nInstance,\n    initialNavOpen = true,\n    theme = 'messaging light',\n    useImageFlagEmojisOnWindows = false\n  } = props;\n  const {\n    channel,\n    closeMobileNav,\n    getAppSettings,\n    latestMessageDatesByChannels,\n    mutes,\n    navOpen,\n    openMobileNav,\n    setActiveChannel,\n    translators\n  } = useChat({\n    client,\n    defaultLanguage,\n    i18nInstance,\n    initialNavOpen\n  });\n  const channelsQueryState = useChannelsQueryState();\n  const chatContextValue = useCreateChatContext({\n    channel,\n    channelsQueryState,\n    client,\n    closeMobileNav,\n    customClasses,\n    getAppSettings,\n    latestMessageDatesByChannels,\n    mutes,\n    navOpen,\n    openMobileNav,\n    setActiveChannel,\n    theme,\n    useImageFlagEmojisOnWindows\n  });\n  if (!translators.t) return null;\n  return React.createElement(ChatProvider, {\n    value: chatContextValue\n  }, React.createElement(TranslationProvider, {\n    value: translators\n  }, children));\n};","map":{"version":3,"names":["React","useChat","useCreateChatContext","useChannelsQueryState","ChatProvider","TranslationProvider","Chat","props","children","client","customClasses","defaultLanguage","i18nInstance","initialNavOpen","theme","useImageFlagEmojisOnWindows","channel","closeMobileNav","getAppSettings","latestMessageDatesByChannels","mutes","navOpen","openMobileNav","setActiveChannel","translators","channelsQueryState","chatContextValue","t","createElement","value"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Chat/Chat.js"],"sourcesContent":["import React from 'react';\nimport { useChat } from './hooks/useChat';\nimport { useCreateChatContext } from './hooks/useCreateChatContext';\nimport { useChannelsQueryState } from './hooks/useChannelsQueryState';\nimport { ChatProvider } from '../../context/ChatContext';\nimport { TranslationProvider } from '../../context/TranslationContext';\n/**\n * Wrapper component for a StreamChat application. Chat needs to be placed around any other chat components\n * as it provides the ChatContext.\n */\nexport const Chat = (props) => {\n    const { children, client, customClasses, defaultLanguage, i18nInstance, initialNavOpen = true, theme = 'messaging light', useImageFlagEmojisOnWindows = false, } = props;\n    const { channel, closeMobileNav, getAppSettings, latestMessageDatesByChannels, mutes, navOpen, openMobileNav, setActiveChannel, translators, } = useChat({ client, defaultLanguage, i18nInstance, initialNavOpen });\n    const channelsQueryState = useChannelsQueryState();\n    const chatContextValue = useCreateChatContext({\n        channel,\n        channelsQueryState,\n        client,\n        closeMobileNav,\n        customClasses,\n        getAppSettings,\n        latestMessageDatesByChannels,\n        mutes,\n        navOpen,\n        openMobileNav,\n        setActiveChannel,\n        theme,\n        useImageFlagEmojisOnWindows,\n    });\n    if (!translators.t)\n        return null;\n    return (React.createElement(ChatProvider, { value: chatContextValue },\n        React.createElement(TranslationProvider, { value: translators }, children)));\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,OAAO,QAAQ,iBAAiB;AACzC,SAASC,oBAAoB,QAAQ,8BAA8B;AACnE,SAASC,qBAAqB,QAAQ,+BAA+B;AACrE,SAASC,YAAY,QAAQ,2BAA2B;AACxD,SAASC,mBAAmB,QAAQ,kCAAkC;AACtE;AACA;AACA;AACA;AACA,OAAO,MAAMC,IAAI,GAAIC,KAAK,IAAK;EAC3B,MAAM;IAAEC,QAAQ;IAAEC,MAAM;IAAEC,aAAa;IAAEC,eAAe;IAAEC,YAAY;IAAEC,cAAc,GAAG,IAAI;IAAEC,KAAK,GAAG,iBAAiB;IAAEC,2BAA2B,GAAG;EAAO,CAAC,GAAGR,KAAK;EACxK,MAAM;IAAES,OAAO;IAAEC,cAAc;IAAEC,cAAc;IAAEC,4BAA4B;IAAEC,KAAK;IAAEC,OAAO;IAAEC,aAAa;IAAEC,gBAAgB;IAAEC;EAAa,CAAC,GAAGvB,OAAO,CAAC;IAAEQ,MAAM;IAAEE,eAAe;IAAEC,YAAY;IAAEC;EAAe,CAAC,CAAC;EACnN,MAAMY,kBAAkB,GAAGtB,qBAAqB,CAAC,CAAC;EAClD,MAAMuB,gBAAgB,GAAGxB,oBAAoB,CAAC;IAC1Cc,OAAO;IACPS,kBAAkB;IAClBhB,MAAM;IACNQ,cAAc;IACdP,aAAa;IACbQ,cAAc;IACdC,4BAA4B;IAC5BC,KAAK;IACLC,OAAO;IACPC,aAAa;IACbC,gBAAgB;IAChBT,KAAK;IACLC;EACJ,CAAC,CAAC;EACF,IAAI,CAACS,WAAW,CAACG,CAAC,EACd,OAAO,IAAI;EACf,OAAQ3B,KAAK,CAAC4B,aAAa,CAACxB,YAAY,EAAE;IAAEyB,KAAK,EAAEH;EAAiB,CAAC,EACjE1B,KAAK,CAAC4B,aAAa,CAACvB,mBAAmB,EAAE;IAAEwB,KAAK,EAAEL;EAAY,CAAC,EAAEhB,QAAQ,CAAC,CAAC;AACnF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}