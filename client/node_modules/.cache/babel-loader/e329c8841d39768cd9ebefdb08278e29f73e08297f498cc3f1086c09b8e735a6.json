{"ast":null,"code":"import { useCallback, useReducer, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useAttachments } from './useAttachments';\nimport { useLinkPreviews } from './useLinkPreviews';\nimport { useMessageInputText } from './useMessageInputText';\nimport { useSubmitHandler } from './useSubmitHandler';\nimport { usePasteHandler } from './usePasteHandler';\nimport { useMediaRecorder } from '../../MediaRecorder/hooks/useMediaRecorder';\nimport { LinkPreviewState, SetLinkPreviewMode } from '../types';\nimport { mergeDeep } from '../../../utils/mergeDeep';\nconst makeEmptyMessageInputState = () => ({\n  attachments: [],\n  linkPreviews: new Map(),\n  mentioned_users: [],\n  setText: () => null,\n  text: ''\n});\n/**\n * Initializes the state. Empty if the message prop is falsy.\n */\nconst initState = message => {\n  if (!message) {\n    return makeEmptyMessageInputState();\n  }\n  const linkPreviews = message.attachments?.reduce((acc, attachment) => {\n    if (!attachment.og_scrape_url) return acc;\n    acc.set(attachment.og_scrape_url, {\n      ...attachment,\n      state: LinkPreviewState.LOADED\n    });\n    return acc;\n  }, new Map()) ?? new Map();\n  const attachments = message.attachments?.filter(({\n    og_scrape_url\n  }) => !og_scrape_url).map(att => ({\n    ...att,\n    localMetadata: {\n      id: nanoid()\n    }\n  })) || [];\n  const mentioned_users = message.mentioned_users || [];\n  return {\n    attachments,\n    linkPreviews,\n    mentioned_users,\n    setText: () => null,\n    text: message.text || ''\n  };\n};\n/**\n * MessageInput state reducer\n */\nconst messageInputReducer = (state, action) => {\n  switch (action.type) {\n    case 'setText':\n      return {\n        ...state,\n        text: action.getNewText(state.text)\n      };\n    case 'clear':\n      return makeEmptyMessageInputState();\n    case 'upsertAttachments':\n      {\n        const attachments = [...state.attachments];\n        action.attachments.forEach(actionAttachment => {\n          const attachmentIndex = state.attachments.findIndex(att => att.localMetadata?.id && att.localMetadata?.id === actionAttachment.localMetadata?.id);\n          if (attachmentIndex === -1) {\n            attachments.push(actionAttachment);\n          } else {\n            const upsertedAttachment = mergeDeep(state.attachments[attachmentIndex] ?? {}, actionAttachment);\n            attachments.splice(attachmentIndex, 1, upsertedAttachment);\n          }\n        });\n        return {\n          ...state,\n          attachments\n        };\n      }\n    case 'removeAttachments':\n      {\n        return {\n          ...state,\n          attachments: state.attachments.filter(att => !action.ids.includes(att.localMetadata?.id))\n        };\n      }\n    case 'setLinkPreviews':\n      {\n        const linkPreviews = new Map(state.linkPreviews);\n        if (action.mode === SetLinkPreviewMode.REMOVE) {\n          Array.from(action.linkPreviews.keys()).forEach(key => {\n            linkPreviews.delete(key);\n          });\n        } else {\n          Array.from(action.linkPreviews.values()).reduce((acc, linkPreview) => {\n            const existingPreview = acc.get(linkPreview.og_scrape_url);\n            const alreadyEnqueued = linkPreview.state === LinkPreviewState.QUEUED && existingPreview?.state !== LinkPreviewState.FAILED;\n            if (existingPreview && alreadyEnqueued) return acc;\n            acc.set(linkPreview.og_scrape_url, linkPreview);\n            return acc;\n          }, linkPreviews);\n          if (action.mode === SetLinkPreviewMode.SET) {\n            Array.from(state.linkPreviews.keys()).forEach(key => {\n              if (!action.linkPreviews.get(key)) linkPreviews.delete(key);\n            });\n          }\n        }\n        return {\n          ...state,\n          linkPreviews\n        };\n      }\n    case 'addMentionedUser':\n      return {\n        ...state,\n        mentioned_users: state.mentioned_users.concat(action.user)\n      };\n    default:\n      return state;\n  }\n};\n/**\n * hook for MessageInput state\n */\nexport const useMessageInputState = props => {\n  const {\n    additionalTextareaProps,\n    asyncMessagesMultiSendEnabled,\n    audioRecordingConfig,\n    audioRecordingEnabled,\n    getDefaultValue,\n    message,\n    urlEnrichmentConfig\n  } = props;\n  const {\n    channelCapabilities = {},\n    enrichURLForPreview: enrichURLForPreviewChannelContext\n  } = useChannelStateContext('useMessageInputState');\n  const defaultValue = getDefaultValue?.() || additionalTextareaProps?.defaultValue;\n  const initialStateValue = message || (Array.isArray(defaultValue) ? {\n    text: defaultValue.join('')\n  } : {\n    text: defaultValue?.toString()\n  });\n  const [state, dispatch] = useReducer(messageInputReducer, initialStateValue, initState);\n  const enrichURLsController = useLinkPreviews({\n    dispatch,\n    linkPreviews: state.linkPreviews,\n    ...urlEnrichmentConfig,\n    enrichURLForPreview: urlEnrichmentConfig?.enrichURLForPreview ?? enrichURLForPreviewChannelContext\n  });\n  const {\n    handleChange,\n    insertText,\n    textareaRef\n  } = useMessageInputText(props, state, dispatch, enrichURLsController.findAndEnqueueURLsToEnrich);\n  const [showCommandsList, setShowCommandsList] = useState(false);\n  const [showMentionsList, setShowMentionsList] = useState(false);\n  const openCommandsList = () => {\n    dispatch({\n      getNewText: () => '/',\n      type: 'setText'\n    });\n    setShowCommandsList(true);\n  };\n  const closeCommandsList = () => setShowCommandsList(false);\n  const openMentionsList = () => {\n    dispatch({\n      getNewText: currentText => currentText + '@',\n      type: 'setText'\n    });\n    setShowMentionsList(true);\n  };\n  const closeMentionsList = () => setShowMentionsList(false);\n  const {\n    maxFilesLeft,\n    numberOfUploads,\n    removeAttachments,\n    uploadAttachment,\n    uploadNewFiles,\n    upsertAttachments\n  } = useAttachments(props, state, dispatch, textareaRef);\n  const {\n    handleSubmit\n  } = useSubmitHandler(props, state, dispatch, numberOfUploads, enrichURLsController);\n  const recordingController = useMediaRecorder({\n    asyncMessagesMultiSendEnabled,\n    enabled: !!audioRecordingEnabled,\n    handleSubmit,\n    recordingConfig: audioRecordingConfig,\n    uploadAttachment\n  });\n  const isUploadEnabled = !!channelCapabilities['upload-file'];\n  const {\n    onPaste\n  } = usePasteHandler(uploadNewFiles, insertText, isUploadEnabled, enrichURLsController.findAndEnqueueURLsToEnrich);\n  const onSelectUser = useCallback(item => {\n    dispatch({\n      type: 'addMentionedUser',\n      user: item\n    });\n  }, []);\n  const setText = useCallback(text => {\n    dispatch({\n      getNewText: () => text,\n      type: 'setText'\n    });\n  }, []);\n  return {\n    ...state,\n    ...enrichURLsController,\n    closeCommandsList,\n    closeMentionsList,\n    handleChange,\n    handleSubmit,\n    insertText,\n    isUploadEnabled,\n    maxFilesLeft,\n    numberOfUploads,\n    onPaste,\n    onSelectUser,\n    openCommandsList,\n    openMentionsList,\n    recordingController,\n    removeAttachments,\n    setText,\n    showCommandsList,\n    showMentionsList,\n    textareaRef,\n    uploadAttachment,\n    uploadNewFiles,\n    upsertAttachments\n  };\n};","map":{"version":3,"names":["useCallback","useReducer","useState","nanoid","useChannelStateContext","useAttachments","useLinkPreviews","useMessageInputText","useSubmitHandler","usePasteHandler","useMediaRecorder","LinkPreviewState","SetLinkPreviewMode","mergeDeep","makeEmptyMessageInputState","attachments","linkPreviews","Map","mentioned_users","setText","text","initState","message","reduce","acc","attachment","og_scrape_url","set","state","LOADED","filter","map","att","localMetadata","id","messageInputReducer","action","type","getNewText","forEach","actionAttachment","attachmentIndex","findIndex","push","upsertedAttachment","splice","ids","includes","mode","REMOVE","Array","from","keys","key","delete","values","linkPreview","existingPreview","get","alreadyEnqueued","QUEUED","FAILED","SET","concat","user","useMessageInputState","props","additionalTextareaProps","asyncMessagesMultiSendEnabled","audioRecordingConfig","audioRecordingEnabled","getDefaultValue","urlEnrichmentConfig","channelCapabilities","enrichURLForPreview","enrichURLForPreviewChannelContext","defaultValue","initialStateValue","isArray","join","toString","dispatch","enrichURLsController","handleChange","insertText","textareaRef","findAndEnqueueURLsToEnrich","showCommandsList","setShowCommandsList","showMentionsList","setShowMentionsList","openCommandsList","closeCommandsList","openMentionsList","currentText","closeMentionsList","maxFilesLeft","numberOfUploads","removeAttachments","uploadAttachment","uploadNewFiles","upsertAttachments","handleSubmit","recordingController","enabled","recordingConfig","isUploadEnabled","onPaste","onSelectUser","item"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useMessageInputState.js"],"sourcesContent":["import { useCallback, useReducer, useState } from 'react';\nimport { nanoid } from 'nanoid';\nimport { useChannelStateContext } from '../../../context/ChannelStateContext';\nimport { useAttachments } from './useAttachments';\nimport { useLinkPreviews } from './useLinkPreviews';\nimport { useMessageInputText } from './useMessageInputText';\nimport { useSubmitHandler } from './useSubmitHandler';\nimport { usePasteHandler } from './usePasteHandler';\nimport { useMediaRecorder } from '../../MediaRecorder/hooks/useMediaRecorder';\nimport { LinkPreviewState, SetLinkPreviewMode } from '../types';\nimport { mergeDeep } from '../../../utils/mergeDeep';\nconst makeEmptyMessageInputState = () => ({\n    attachments: [],\n    linkPreviews: new Map(),\n    mentioned_users: [],\n    setText: () => null,\n    text: '',\n});\n/**\n * Initializes the state. Empty if the message prop is falsy.\n */\nconst initState = (message) => {\n    if (!message) {\n        return makeEmptyMessageInputState();\n    }\n    const linkPreviews = message.attachments?.reduce((acc, attachment) => {\n        if (!attachment.og_scrape_url)\n            return acc;\n        acc.set(attachment.og_scrape_url, {\n            ...attachment,\n            state: LinkPreviewState.LOADED,\n        });\n        return acc;\n    }, new Map()) ?? new Map();\n    const attachments = message.attachments\n        ?.filter(({ og_scrape_url }) => !og_scrape_url)\n        .map((att) => ({\n        ...att,\n        localMetadata: { id: nanoid() },\n    })) || [];\n    const mentioned_users = message.mentioned_users || [];\n    return {\n        attachments,\n        linkPreviews,\n        mentioned_users,\n        setText: () => null,\n        text: message.text || '',\n    };\n};\n/**\n * MessageInput state reducer\n */\nconst messageInputReducer = (state, action) => {\n    switch (action.type) {\n        case 'setText':\n            return { ...state, text: action.getNewText(state.text) };\n        case 'clear':\n            return makeEmptyMessageInputState();\n        case 'upsertAttachments': {\n            const attachments = [...state.attachments];\n            action.attachments.forEach((actionAttachment) => {\n                const attachmentIndex = state.attachments.findIndex((att) => att.localMetadata?.id && att.localMetadata?.id === actionAttachment.localMetadata?.id);\n                if (attachmentIndex === -1) {\n                    attachments.push(actionAttachment);\n                }\n                else {\n                    const upsertedAttachment = mergeDeep(state.attachments[attachmentIndex] ?? {}, actionAttachment);\n                    attachments.splice(attachmentIndex, 1, upsertedAttachment);\n                }\n            });\n            return {\n                ...state,\n                attachments,\n            };\n        }\n        case 'removeAttachments': {\n            return {\n                ...state,\n                attachments: state.attachments.filter((att) => !action.ids.includes(att.localMetadata?.id)),\n            };\n        }\n        case 'setLinkPreviews': {\n            const linkPreviews = new Map(state.linkPreviews);\n            if (action.mode === SetLinkPreviewMode.REMOVE) {\n                Array.from(action.linkPreviews.keys()).forEach((key) => {\n                    linkPreviews.delete(key);\n                });\n            }\n            else {\n                Array.from(action.linkPreviews.values()).reduce((acc, linkPreview) => {\n                    const existingPreview = acc.get(linkPreview.og_scrape_url);\n                    const alreadyEnqueued = linkPreview.state === LinkPreviewState.QUEUED &&\n                        existingPreview?.state !== LinkPreviewState.FAILED;\n                    if (existingPreview && alreadyEnqueued)\n                        return acc;\n                    acc.set(linkPreview.og_scrape_url, linkPreview);\n                    return acc;\n                }, linkPreviews);\n                if (action.mode === SetLinkPreviewMode.SET) {\n                    Array.from(state.linkPreviews.keys()).forEach((key) => {\n                        if (!action.linkPreviews.get(key))\n                            linkPreviews.delete(key);\n                    });\n                }\n            }\n            return {\n                ...state,\n                linkPreviews,\n            };\n        }\n        case 'addMentionedUser':\n            return {\n                ...state,\n                mentioned_users: state.mentioned_users.concat(action.user),\n            };\n        default:\n            return state;\n    }\n};\n/**\n * hook for MessageInput state\n */\nexport const useMessageInputState = (props) => {\n    const { additionalTextareaProps, asyncMessagesMultiSendEnabled, audioRecordingConfig, audioRecordingEnabled, getDefaultValue, message, urlEnrichmentConfig, } = props;\n    const { channelCapabilities = {}, enrichURLForPreview: enrichURLForPreviewChannelContext, } = useChannelStateContext('useMessageInputState');\n    const defaultValue = getDefaultValue?.() || additionalTextareaProps?.defaultValue;\n    const initialStateValue = message ||\n        (Array.isArray(defaultValue)\n            ? { text: defaultValue.join('') }\n            : { text: defaultValue?.toString() });\n    const [state, dispatch] = useReducer(messageInputReducer, initialStateValue, initState);\n    const enrichURLsController = useLinkPreviews({\n        dispatch,\n        linkPreviews: state.linkPreviews,\n        ...urlEnrichmentConfig,\n        enrichURLForPreview: urlEnrichmentConfig?.enrichURLForPreview ?? enrichURLForPreviewChannelContext,\n    });\n    const { handleChange, insertText, textareaRef } = useMessageInputText(props, state, dispatch, enrichURLsController.findAndEnqueueURLsToEnrich);\n    const [showCommandsList, setShowCommandsList] = useState(false);\n    const [showMentionsList, setShowMentionsList] = useState(false);\n    const openCommandsList = () => {\n        dispatch({\n            getNewText: () => '/',\n            type: 'setText',\n        });\n        setShowCommandsList(true);\n    };\n    const closeCommandsList = () => setShowCommandsList(false);\n    const openMentionsList = () => {\n        dispatch({\n            getNewText: (currentText) => currentText + '@',\n            type: 'setText',\n        });\n        setShowMentionsList(true);\n    };\n    const closeMentionsList = () => setShowMentionsList(false);\n    const { maxFilesLeft, numberOfUploads, removeAttachments, uploadAttachment, uploadNewFiles, upsertAttachments, } = useAttachments(props, state, dispatch, textareaRef);\n    const { handleSubmit } = useSubmitHandler(props, state, dispatch, numberOfUploads, enrichURLsController);\n    const recordingController = useMediaRecorder({\n        asyncMessagesMultiSendEnabled,\n        enabled: !!audioRecordingEnabled,\n        handleSubmit,\n        recordingConfig: audioRecordingConfig,\n        uploadAttachment,\n    });\n    const isUploadEnabled = !!channelCapabilities['upload-file'];\n    const { onPaste } = usePasteHandler(uploadNewFiles, insertText, isUploadEnabled, enrichURLsController.findAndEnqueueURLsToEnrich);\n    const onSelectUser = useCallback((item) => {\n        dispatch({ type: 'addMentionedUser', user: item });\n    }, []);\n    const setText = useCallback((text) => {\n        dispatch({ getNewText: () => text, type: 'setText' });\n    }, []);\n    return {\n        ...state,\n        ...enrichURLsController,\n        closeCommandsList,\n        closeMentionsList,\n        handleChange,\n        handleSubmit,\n        insertText,\n        isUploadEnabled,\n        maxFilesLeft,\n        numberOfUploads,\n        onPaste,\n        onSelectUser,\n        openCommandsList,\n        openMentionsList,\n        recordingController,\n        removeAttachments,\n        setText,\n        showCommandsList,\n        showMentionsList,\n        textareaRef,\n        uploadAttachment,\n        uploadNewFiles,\n        upsertAttachments,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}