{"ast":null,"code":"import clsx from 'clsx';\nimport React, { useState } from 'react';\nimport { useChannelStateContext, useMessageInputContext } from '../../context';\nimport { LinkPreviewState } from './types';\nimport { CloseIcon, LinkIcon } from './icons';\nimport { PopperTooltip } from '../Tooltip';\nimport { useEnterLeaveHandlers } from '../Tooltip/hooks';\nexport const LinkPreviewList = ({\n  linkPreviews\n}) => {\n  const {\n    quotedMessage\n  } = useChannelStateContext();\n  const showLinkPreviews = linkPreviews.length > 0 && !quotedMessage;\n  if (!showLinkPreviews) return null;\n  return React.createElement(\"div\", {\n    className: 'str-chat__link-preview-list'\n  }, Array.from(linkPreviews.values()).map(linkPreview => linkPreview.state === LinkPreviewState.LOADED ? React.createElement(LinkPreviewCard, {\n    key: linkPreview.og_scrape_url,\n    linkPreview: linkPreview\n  }) : null));\n};\nconst LinkPreviewCard = ({\n  linkPreview\n}) => {\n  const {\n    dismissLinkPreview\n  } = useMessageInputContext();\n  const {\n    handleEnter,\n    handleLeave,\n    tooltipVisible\n  } = useEnterLeaveHandlers();\n  const [referenceElement, setReferenceElement] = useState(null);\n  return React.createElement(\"div\", {\n    className: clsx('str-chat__link-preview-card', {\n      'str-chat__link-preview-card--loading': linkPreview.state === LinkPreviewState.LOADING\n    }),\n    \"data-testid\": 'link-preview-card'\n  }, React.createElement(PopperTooltip, {\n    offset: [0, 5],\n    referenceElement: referenceElement,\n    visible: tooltipVisible\n  }, linkPreview.og_scrape_url), React.createElement(\"div\", {\n    className: 'str-chat__link-preview-card__icon-container',\n    onMouseEnter: handleEnter,\n    onMouseLeave: handleLeave,\n    ref: setReferenceElement\n  }, React.createElement(LinkIcon, null)), React.createElement(\"div\", {\n    className: 'str-chat__link-preview-card__content'\n  }, React.createElement(\"div\", {\n    className: 'str-chat__link-preview-card__content-title'\n  }, linkPreview.title), React.createElement(\"div\", {\n    className: 'str-chat__link-preview-card__content-description'\n  }, linkPreview.text)), React.createElement(\"button\", {\n    className: 'str-chat__link-preview-card__dismiss-button',\n    \"data-testid\": 'link-preview-card-dismiss-btn',\n    onClick: () => dismissLinkPreview(linkPreview)\n  }, React.createElement(CloseIcon, null)));\n};","map":{"version":3,"names":["clsx","React","useState","useChannelStateContext","useMessageInputContext","LinkPreviewState","CloseIcon","LinkIcon","PopperTooltip","useEnterLeaveHandlers","LinkPreviewList","linkPreviews","quotedMessage","showLinkPreviews","length","createElement","className","Array","from","values","map","linkPreview","state","LOADED","LinkPreviewCard","key","og_scrape_url","dismissLinkPreview","handleEnter","handleLeave","tooltipVisible","referenceElement","setReferenceElement","LOADING","offset","visible","onMouseEnter","onMouseLeave","ref","title","text","onClick"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageInput/LinkPreviewList.js"],"sourcesContent":["import clsx from 'clsx';\nimport React, { useState } from 'react';\nimport { useChannelStateContext, useMessageInputContext } from '../../context';\nimport { LinkPreviewState } from './types';\nimport { CloseIcon, LinkIcon } from './icons';\nimport { PopperTooltip } from '../Tooltip';\nimport { useEnterLeaveHandlers } from '../Tooltip/hooks';\nexport const LinkPreviewList = ({ linkPreviews }) => {\n    const { quotedMessage } = useChannelStateContext();\n    const showLinkPreviews = linkPreviews.length > 0 && !quotedMessage;\n    if (!showLinkPreviews)\n        return null;\n    return (React.createElement(\"div\", { className: 'str-chat__link-preview-list' }, Array.from(linkPreviews.values()).map((linkPreview) => linkPreview.state === LinkPreviewState.LOADED ? (React.createElement(LinkPreviewCard, { key: linkPreview.og_scrape_url, linkPreview: linkPreview })) : null)));\n};\nconst LinkPreviewCard = ({ linkPreview }) => {\n    const { dismissLinkPreview } = useMessageInputContext();\n    const { handleEnter, handleLeave, tooltipVisible } = useEnterLeaveHandlers();\n    const [referenceElement, setReferenceElement] = useState(null);\n    return (React.createElement(\"div\", { className: clsx('str-chat__link-preview-card', {\n            'str-chat__link-preview-card--loading': linkPreview.state === LinkPreviewState.LOADING,\n        }), \"data-testid\": 'link-preview-card' },\n        React.createElement(PopperTooltip, { offset: [0, 5], referenceElement: referenceElement, visible: tooltipVisible }, linkPreview.og_scrape_url),\n        React.createElement(\"div\", { className: 'str-chat__link-preview-card__icon-container', onMouseEnter: handleEnter, onMouseLeave: handleLeave, ref: setReferenceElement },\n            React.createElement(LinkIcon, null)),\n        React.createElement(\"div\", { className: 'str-chat__link-preview-card__content' },\n            React.createElement(\"div\", { className: 'str-chat__link-preview-card__content-title' }, linkPreview.title),\n            React.createElement(\"div\", { className: 'str-chat__link-preview-card__content-description' }, linkPreview.text)),\n        React.createElement(\"button\", { className: 'str-chat__link-preview-card__dismiss-button', \"data-testid\": 'link-preview-card-dismiss-btn', onClick: () => dismissLinkPreview(linkPreview) },\n            React.createElement(CloseIcon, null))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}