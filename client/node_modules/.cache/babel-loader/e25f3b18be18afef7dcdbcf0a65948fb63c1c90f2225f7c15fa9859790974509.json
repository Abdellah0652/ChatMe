{"ast":null,"code":"import { useCallback } from 'react';\nimport { dataTransferItemsToFiles } from '../../ReactFileUtilities';\nimport { SetLinkPreviewMode } from '../types';\nexport const usePasteHandler = (uploadNewFiles, insertText, isUploadEnabled, findAndEnqueueURLsToEnrich) => {\n  const onPaste = useCallback(clipboardEvent => {\n    (async event => {\n      const {\n        items\n      } = event.clipboardData;\n      event.preventDefault();\n      // Get a promise for the plain text in case no files are\n      // found. This needs to be done here because chrome cleans\n      // up the DataTransferItems after resolving of a promise.\n      let plainTextPromise = undefined;\n      for (let i = 0; i < items.length; i++) {\n        const item = items[i];\n        if (item.kind === 'string' && item.type === 'text/plain') {\n          plainTextPromise = new Promise(resolve => {\n            item.getAsString(string => {\n              resolve(string);\n            });\n          });\n          break;\n        }\n      }\n      const fileLikes = await dataTransferItemsToFiles(Array.from(items));\n      if (plainTextPromise) {\n        const pastedText = await plainTextPromise;\n        insertText(pastedText);\n        findAndEnqueueURLsToEnrich?.(pastedText, SetLinkPreviewMode.UPSERT);\n        findAndEnqueueURLsToEnrich?.flush();\n      } else if (fileLikes.length && isUploadEnabled) {\n        uploadNewFiles(fileLikes);\n        return;\n      }\n    })(clipboardEvent);\n  }, [findAndEnqueueURLsToEnrich, insertText, isUploadEnabled, uploadNewFiles]);\n  return {\n    onPaste\n  };\n};","map":{"version":3,"names":["useCallback","dataTransferItemsToFiles","SetLinkPreviewMode","usePasteHandler","uploadNewFiles","insertText","isUploadEnabled","findAndEnqueueURLsToEnrich","onPaste","clipboardEvent","event","items","clipboardData","preventDefault","plainTextPromise","undefined","i","length","item","kind","type","Promise","resolve","getAsString","string","fileLikes","Array","from","pastedText","UPSERT","flush"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/usePasteHandler.js"],"sourcesContent":["import { useCallback } from 'react';\nimport { dataTransferItemsToFiles } from '../../ReactFileUtilities';\nimport { SetLinkPreviewMode } from '../types';\nexport const usePasteHandler = (uploadNewFiles, insertText, isUploadEnabled, findAndEnqueueURLsToEnrich) => {\n    const onPaste = useCallback((clipboardEvent) => {\n        (async (event) => {\n            const { items } = event.clipboardData;\n            event.preventDefault();\n            // Get a promise for the plain text in case no files are\n            // found. This needs to be done here because chrome cleans\n            // up the DataTransferItems after resolving of a promise.\n            let plainTextPromise = undefined;\n            for (let i = 0; i < items.length; i++) {\n                const item = items[i];\n                if (item.kind === 'string' && item.type === 'text/plain') {\n                    plainTextPromise = new Promise((resolve) => {\n                        item.getAsString((string) => {\n                            resolve(string);\n                        });\n                    });\n                    break;\n                }\n            }\n            const fileLikes = await dataTransferItemsToFiles(Array.from(items));\n            if (plainTextPromise) {\n                const pastedText = await plainTextPromise;\n                insertText(pastedText);\n                findAndEnqueueURLsToEnrich?.(pastedText, SetLinkPreviewMode.UPSERT);\n                findAndEnqueueURLsToEnrich?.flush();\n            }\n            else if (fileLikes.length && isUploadEnabled) {\n                uploadNewFiles(fileLikes);\n                return;\n            }\n        })(clipboardEvent);\n    }, [findAndEnqueueURLsToEnrich, insertText, isUploadEnabled, uploadNewFiles]);\n    return { onPaste };\n};\n"],"mappings":"AAAA,SAASA,WAAW,QAAQ,OAAO;AACnC,SAASC,wBAAwB,QAAQ,0BAA0B;AACnE,SAASC,kBAAkB,QAAQ,UAAU;AAC7C,OAAO,MAAMC,eAAe,GAAGA,CAACC,cAAc,EAAEC,UAAU,EAAEC,eAAe,EAAEC,0BAA0B,KAAK;EACxG,MAAMC,OAAO,GAAGR,WAAW,CAAES,cAAc,IAAK;IAC5C,CAAC,MAAOC,KAAK,IAAK;MACd,MAAM;QAAEC;MAAM,CAAC,GAAGD,KAAK,CAACE,aAAa;MACrCF,KAAK,CAACG,cAAc,CAAC,CAAC;MACtB;MACA;MACA;MACA,IAAIC,gBAAgB,GAAGC,SAAS;MAChC,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGL,KAAK,CAACM,MAAM,EAAED,CAAC,EAAE,EAAE;QACnC,MAAME,IAAI,GAAGP,KAAK,CAACK,CAAC,CAAC;QACrB,IAAIE,IAAI,CAACC,IAAI,KAAK,QAAQ,IAAID,IAAI,CAACE,IAAI,KAAK,YAAY,EAAE;UACtDN,gBAAgB,GAAG,IAAIO,OAAO,CAAEC,OAAO,IAAK;YACxCJ,IAAI,CAACK,WAAW,CAAEC,MAAM,IAAK;cACzBF,OAAO,CAACE,MAAM,CAAC;YACnB,CAAC,CAAC;UACN,CAAC,CAAC;UACF;QACJ;MACJ;MACA,MAAMC,SAAS,GAAG,MAAMxB,wBAAwB,CAACyB,KAAK,CAACC,IAAI,CAAChB,KAAK,CAAC,CAAC;MACnE,IAAIG,gBAAgB,EAAE;QAClB,MAAMc,UAAU,GAAG,MAAMd,gBAAgB;QACzCT,UAAU,CAACuB,UAAU,CAAC;QACtBrB,0BAA0B,GAAGqB,UAAU,EAAE1B,kBAAkB,CAAC2B,MAAM,CAAC;QACnEtB,0BAA0B,EAAEuB,KAAK,CAAC,CAAC;MACvC,CAAC,MACI,IAAIL,SAAS,CAACR,MAAM,IAAIX,eAAe,EAAE;QAC1CF,cAAc,CAACqB,SAAS,CAAC;QACzB;MACJ;IACJ,CAAC,EAAEhB,cAAc,CAAC;EACtB,CAAC,EAAE,CAACF,0BAA0B,EAAEF,UAAU,EAAEC,eAAe,EAAEF,cAAc,CAAC,CAAC;EAC7E,OAAO;IAAEI;EAAQ,CAAC;AACtB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}