{"ast":null,"code":"import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { useProcessReactions } from './hooks/useProcessReactions';\nimport { ReactionsListModal } from './ReactionsListModal';\nimport { useTranslationContext } from '../../context';\nimport { MAX_MESSAGE_REACTIONS_TO_FETCH } from '../Message/hooks';\nconst UnMemoizedReactionsList = props => {\n  const {\n    handleFetchReactions,\n    reactionDetailsSort,\n    reverse = false,\n    sortReactionDetails,\n    ...rest\n  } = props;\n  const {\n    existingReactions,\n    hasReactions,\n    totalReactionCount\n  } = useProcessReactions(rest);\n  const [selectedReactionType, setSelectedReactionType] = useState(null);\n  const {\n    t\n  } = useTranslationContext('ReactionsList');\n  const handleReactionButtonClick = reactionType => {\n    if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {\n      return;\n    }\n    setSelectedReactionType(reactionType);\n  };\n  if (!hasReactions) return null;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    \"aria-label\": t('aria/Reaction list'),\n    className: clsx('str-chat__reaction-list str-chat__message-reactions-container', {\n      // we are stuck with both classes as both are used in CSS\n      'str-chat__reaction-list--reverse': reverse\n    }),\n    \"data-testid\": 'reaction-list',\n    role: 'figure'\n  }, React.createElement(\"ul\", {\n    className: 'str-chat__message-reactions'\n  }, existingReactions.map(({\n    EmojiComponent,\n    isOwnReaction,\n    reactionCount,\n    reactionType\n  }) => EmojiComponent && React.createElement(\"li\", {\n    className: clsx('str-chat__message-reaction', {\n      'str-chat__message-reaction-own': isOwnReaction\n    }),\n    key: reactionType\n  }, React.createElement(\"button\", {\n    \"aria-label\": `Reactions: ${reactionType}`,\n    \"data-testid\": `reactions-list-button-${reactionType}`,\n    onClick: () => handleReactionButtonClick(reactionType),\n    type: 'button'\n  }, React.createElement(\"span\", {\n    className: 'str-chat__message-reaction-emoji'\n  }, React.createElement(EmojiComponent, null)), \"\\u00A0\", React.createElement(\"span\", {\n    className: 'str-chat__message-reaction-count',\n    \"data-testclass\": 'reaction-list-reaction-count'\n  }, reactionCount)))), React.createElement(\"li\", null, React.createElement(\"span\", {\n    className: 'str-chat__reaction-list--counter'\n  }, totalReactionCount)))), selectedReactionType !== null && React.createElement(ReactionsListModal, {\n    handleFetchReactions: handleFetchReactions,\n    onClose: () => setSelectedReactionType(null),\n    onSelectedReactionTypeChange: setSelectedReactionType,\n    open: selectedReactionType !== null,\n    reactions: existingReactions,\n    selectedReactionType: selectedReactionType,\n    sortReactionDetails: sortReactionDetails\n  }));\n};\n/**\n * Component that displays a list of reactions on a message.\n */\nexport const ReactionsList = React.memo(UnMemoizedReactionsList);","map":{"version":3,"names":["React","useState","clsx","useProcessReactions","ReactionsListModal","useTranslationContext","MAX_MESSAGE_REACTIONS_TO_FETCH","UnMemoizedReactionsList","props","handleFetchReactions","reactionDetailsSort","reverse","sortReactionDetails","rest","existingReactions","hasReactions","totalReactionCount","selectedReactionType","setSelectedReactionType","t","handleReactionButtonClick","reactionType","createElement","Fragment","className","role","map","EmojiComponent","isOwnReaction","reactionCount","key","onClick","type","onClose","onSelectedReactionTypeChange","open","reactions","ReactionsList","memo"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Reactions/ReactionsList.js"],"sourcesContent":["import React, { useState } from 'react';\nimport clsx from 'clsx';\nimport { useProcessReactions } from './hooks/useProcessReactions';\nimport { ReactionsListModal } from './ReactionsListModal';\nimport { useTranslationContext } from '../../context';\nimport { MAX_MESSAGE_REACTIONS_TO_FETCH } from '../Message/hooks';\nconst UnMemoizedReactionsList = (props) => {\n    const { handleFetchReactions, reactionDetailsSort, reverse = false, sortReactionDetails, ...rest } = props;\n    const { existingReactions, hasReactions, totalReactionCount } = useProcessReactions(rest);\n    const [selectedReactionType, setSelectedReactionType,] = useState(null);\n    const { t } = useTranslationContext('ReactionsList');\n    const handleReactionButtonClick = (reactionType) => {\n        if (totalReactionCount > MAX_MESSAGE_REACTIONS_TO_FETCH) {\n            return;\n        }\n        setSelectedReactionType(reactionType);\n    };\n    if (!hasReactions)\n        return null;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { \"aria-label\": t('aria/Reaction list'), className: clsx('str-chat__reaction-list str-chat__message-reactions-container', {\n                // we are stuck with both classes as both are used in CSS\n                'str-chat__reaction-list--reverse': reverse,\n            }), \"data-testid\": 'reaction-list', role: 'figure' },\n            React.createElement(\"ul\", { className: 'str-chat__message-reactions' },\n                existingReactions.map(({ EmojiComponent, isOwnReaction, reactionCount, reactionType }) => EmojiComponent && (React.createElement(\"li\", { className: clsx('str-chat__message-reaction', {\n                        'str-chat__message-reaction-own': isOwnReaction,\n                    }), key: reactionType },\n                    React.createElement(\"button\", { \"aria-label\": `Reactions: ${reactionType}`, \"data-testid\": `reactions-list-button-${reactionType}`, onClick: () => handleReactionButtonClick(reactionType), type: 'button' },\n                        React.createElement(\"span\", { className: 'str-chat__message-reaction-emoji' },\n                            React.createElement(EmojiComponent, null)),\n                        \"\\u00A0\",\n                        React.createElement(\"span\", { className: 'str-chat__message-reaction-count', \"data-testclass\": 'reaction-list-reaction-count' }, reactionCount))))),\n                React.createElement(\"li\", null,\n                    React.createElement(\"span\", { className: 'str-chat__reaction-list--counter' }, totalReactionCount)))),\n        selectedReactionType !== null && (React.createElement(ReactionsListModal, { handleFetchReactions: handleFetchReactions, onClose: () => setSelectedReactionType(null), onSelectedReactionTypeChange: setSelectedReactionType, open: selectedReactionType !== null, reactions: existingReactions, selectedReactionType: selectedReactionType, sortReactionDetails: sortReactionDetails }))));\n};\n/**\n * Component that displays a list of reactions on a message.\n */\nexport const ReactionsList = React.memo(UnMemoizedReactionsList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}