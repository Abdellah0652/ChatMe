{"ast":null,"code":"import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { ChannelListMessenger } from './ChannelListMessenger';\nimport { useChannelDeletedListener } from './hooks/useChannelDeletedListener';\nimport { useChannelHiddenListener } from './hooks/useChannelHiddenListener';\nimport { useChannelTruncatedListener } from './hooks/useChannelTruncatedListener';\nimport { useChannelUpdatedListener } from './hooks/useChannelUpdatedListener';\nimport { useChannelVisibleListener } from './hooks/useChannelVisibleListener';\nimport { useConnectionRecoveredListener } from './hooks/useConnectionRecoveredListener';\nimport { useMessageNewListener } from './hooks/useMessageNewListener';\nimport { useMobileNavigation } from './hooks/useMobileNavigation';\nimport { useNotificationAddedToChannelListener } from './hooks/useNotificationAddedToChannelListener';\nimport { useNotificationMessageNewListener } from './hooks/useNotificationMessageNewListener';\nimport { useNotificationRemovedFromChannelListener } from './hooks/useNotificationRemovedFromChannelListener';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useUserPresenceChangedListener } from './hooks/useUserPresenceChangedListener';\nimport { MAX_QUERY_CHANNELS_LIMIT, moveChannelUp } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { ChannelSearch as DefaultChannelSearch } from '../ChannelSearch/ChannelSearch';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator } from '../EmptyStateIndicator';\nimport { LoadingChannels } from '../Loading/LoadingChannels';\nimport { LoadMorePaginator } from '../LoadMore/LoadMorePaginator';\nimport { NullComponent } from '../UtilityComponents';\nimport { ChannelListContextProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nconst DEFAULT_FILTERS = {};\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_SORT = {};\nconst UnMemoizedChannelList = props => {\n  const {\n    additionalChannelSearchProps,\n    Avatar = DefaultAvatar,\n    allowNewMessagesFromUnfilteredChannels,\n    channelRenderFilterFn,\n    ChannelSearch = DefaultChannelSearch,\n    customActiveChannel,\n    customQueryChannels,\n    EmptyStateIndicator = DefaultEmptyStateIndicator,\n    filters,\n    getLatestMessagePreview,\n    LoadingErrorIndicator = NullComponent,\n    LoadingIndicator = LoadingChannels,\n    List = ChannelListMessenger,\n    lockChannelOrder,\n    onAddedToChannel,\n    onChannelDeleted,\n    onChannelHidden,\n    onChannelTruncated,\n    onChannelUpdated,\n    onChannelVisible,\n    onMessageNew,\n    onMessageNewHandler,\n    onRemovedFromChannel,\n    options,\n    Paginator = LoadMorePaginator,\n    Preview,\n    recoveryThrottleIntervalMs,\n    renderChannels,\n    sendChannelsToList = false,\n    setActiveChannelOnMount = true,\n    showChannelSearch = false,\n    sort = DEFAULT_SORT,\n    watchers = {}\n  } = props;\n  const {\n    channel,\n    channelsQueryState,\n    client,\n    closeMobileNav,\n    customClasses,\n    navOpen = false,\n    setActiveChannel,\n    theme,\n    useImageFlagEmojisOnWindows\n  } = useChatContext('ChannelList');\n  const channelListRef = useRef(null);\n  const [channelUpdateCount, setChannelUpdateCount] = useState(0);\n  const [searchActive, setSearchActive] = useState(false);\n  /**\n   * Set a channel with id {customActiveChannel} as active and move it to the top of the list.\n   * If customActiveChannel prop is absent, then set the first channel in list as active channel.\n   */\n  const activeChannelHandler = async (channels, setChannels) => {\n    if (!channels.length || channels.length > (options?.limit || MAX_QUERY_CHANNELS_LIMIT)) {\n      return;\n    }\n    if (customActiveChannel) {\n      let customActiveChannelObject = channels.find(chan => chan.id === customActiveChannel);\n      if (!customActiveChannelObject) {\n        //@ts-expect-error\n        [customActiveChannelObject] = await client.queryChannels({\n          id: customActiveChannel\n        });\n      }\n      if (customActiveChannelObject) {\n        setActiveChannel(customActiveChannelObject, watchers);\n        const newChannels = moveChannelUp({\n          activeChannel: customActiveChannelObject,\n          channels,\n          cid: customActiveChannelObject.cid\n        });\n        setChannels(newChannels);\n      }\n      return;\n    }\n    if (setActiveChannelOnMount) {\n      setActiveChannel(channels[0], watchers);\n    }\n  };\n  /**\n   * For some events, inner properties on the channel will update but the shallow comparison will not\n   * force a re-render. Incrementing this dummy variable ensures the channel previews update.\n   */\n  const forceUpdate = useCallback(() => setChannelUpdateCount(count => count + 1), [setChannelUpdateCount]);\n  const onSearch = useCallback(event => {\n    if (!event.target.value) {\n      setSearchActive(false);\n    } else {\n      setSearchActive(true);\n    }\n    additionalChannelSearchProps?.onSearch?.(event);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const onSearchExit = useCallback(() => {\n    setSearchActive(false);\n    additionalChannelSearchProps?.onSearchExit?.();\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n  const {\n    channels,\n    hasNextPage,\n    loadNextPage,\n    setChannels\n  } = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels);\n  const loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;\n  useMobileNavigation(channelListRef, navOpen, closeMobileNav);\n  useMessageNewListener(setChannels, onMessageNewHandler, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);\n  useNotificationMessageNewListener(setChannels, onMessageNew, allowNewMessagesFromUnfilteredChannels);\n  useNotificationAddedToChannelListener(setChannels, onAddedToChannel, allowNewMessagesFromUnfilteredChannels);\n  useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);\n  useChannelDeletedListener(setChannels, onChannelDeleted);\n  useChannelHiddenListener(setChannels, onChannelHidden);\n  useChannelVisibleListener(setChannels, onChannelVisible);\n  useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);\n  useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);\n  useConnectionRecoveredListener(forceUpdate);\n  useUserPresenceChangedListener(setChannels);\n  useEffect(() => {\n    const handleEvent = event => {\n      if (event.cid === channel?.cid) {\n        setActiveChannel();\n      }\n    };\n    client.on('channel.deleted', handleEvent);\n    client.on('channel.hidden', handleEvent);\n    return () => {\n      client.off('channel.deleted', handleEvent);\n      client.off('channel.hidden', handleEvent);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [channel?.cid]);\n  const renderChannel = item => {\n    const previewProps = {\n      activeChannel: channel,\n      Avatar,\n      channel: item,\n      // forces the update of preview component on channel update\n      channelUpdateCount,\n      getLatestMessagePreview,\n      key: item.cid,\n      Preview,\n      setActiveChannel,\n      watchers\n    };\n    return React.createElement(ChannelPreview, {\n      ...previewProps\n    });\n  };\n  const baseClass = 'str-chat__channel-list';\n  const className = clsx(customClasses?.chat ?? 'str-chat', theme, customClasses?.channelList ?? `${baseClass} ${baseClass}-react`, {\n    'str-chat--windows-flags': useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),\n    [`${baseClass}--open`]: navOpen\n  });\n  const showChannelList = !searchActive || additionalChannelSearchProps?.popupResults;\n  return React.createElement(ChannelListContextProvider, {\n    value: {\n      channels,\n      setChannels\n    }\n  }, React.createElement(\"div\", {\n    className: className,\n    ref: channelListRef\n  }, showChannelSearch && React.createElement(ChannelSearch, {\n    onSearch: onSearch,\n    onSearchExit: onSearchExit,\n    setChannels: setChannels,\n    ...additionalChannelSearchProps\n  }), showChannelList && React.createElement(List, {\n    error: channelsQueryState.error,\n    loadedChannels: sendChannelsToList ? loadedChannels : undefined,\n    loading: !!channelsQueryState.queryInProgress && ['reload', 'uninitialized'].includes(channelsQueryState.queryInProgress),\n    LoadingErrorIndicator: LoadingErrorIndicator,\n    LoadingIndicator: LoadingIndicator,\n    setChannels: setChannels\n  }, !loadedChannels?.length ? React.createElement(EmptyStateIndicator, {\n    listType: 'channel'\n  }) : React.createElement(Paginator, {\n    hasNextPage: hasNextPage,\n    isLoading: channelsQueryState.queryInProgress === 'load-more',\n    loadNextPage: loadNextPage\n  }, renderChannels ? renderChannels(loadedChannels, renderChannel) : loadedChannels.map(channel => renderChannel(channel))))));\n};\n/**\n * Renders a preview list of Channels, allowing you to select the Channel you want to open\n */\nexport const ChannelList = React.memo(UnMemoizedChannelList);","map":{"version":3,"names":["React","useCallback","useEffect","useRef","useState","clsx","ChannelListMessenger","useChannelDeletedListener","useChannelHiddenListener","useChannelTruncatedListener","useChannelUpdatedListener","useChannelVisibleListener","useConnectionRecoveredListener","useMessageNewListener","useMobileNavigation","useNotificationAddedToChannelListener","useNotificationMessageNewListener","useNotificationRemovedFromChannelListener","usePaginatedChannels","useUserPresenceChangedListener","MAX_QUERY_CHANNELS_LIMIT","moveChannelUp","Avatar","DefaultAvatar","ChannelPreview","ChannelSearch","DefaultChannelSearch","EmptyStateIndicator","DefaultEmptyStateIndicator","LoadingChannels","LoadMorePaginator","NullComponent","ChannelListContextProvider","useChatContext","DEFAULT_FILTERS","DEFAULT_OPTIONS","DEFAULT_SORT","UnMemoizedChannelList","props","additionalChannelSearchProps","allowNewMessagesFromUnfilteredChannels","channelRenderFilterFn","customActiveChannel","customQueryChannels","filters","getLatestMessagePreview","LoadingErrorIndicator","LoadingIndicator","List","lockChannelOrder","onAddedToChannel","onChannelDeleted","onChannelHidden","onChannelTruncated","onChannelUpdated","onChannelVisible","onMessageNew","onMessageNewHandler","onRemovedFromChannel","options","Paginator","Preview","recoveryThrottleIntervalMs","renderChannels","sendChannelsToList","setActiveChannelOnMount","showChannelSearch","sort","watchers","channel","channelsQueryState","client","closeMobileNav","customClasses","navOpen","setActiveChannel","theme","useImageFlagEmojisOnWindows","channelListRef","channelUpdateCount","setChannelUpdateCount","searchActive","setSearchActive","activeChannelHandler","channels","setChannels","length","limit","customActiveChannelObject","find","chan","id","queryChannels","newChannels","activeChannel","cid","forceUpdate","count","onSearch","event","target","value","onSearchExit","hasNextPage","loadNextPage","loadedChannels","handleEvent","on","off","renderChannel","item","previewProps","key","createElement","baseClass","className","chat","channelList","navigator","userAgent","match","showChannelList","popupResults","ref","error","undefined","loading","queryInProgress","includes","listType","isLoading","map","ChannelList","memo"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/ChannelList/ChannelList.js"],"sourcesContent":["import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport clsx from 'clsx';\nimport { ChannelListMessenger } from './ChannelListMessenger';\nimport { useChannelDeletedListener } from './hooks/useChannelDeletedListener';\nimport { useChannelHiddenListener } from './hooks/useChannelHiddenListener';\nimport { useChannelTruncatedListener } from './hooks/useChannelTruncatedListener';\nimport { useChannelUpdatedListener } from './hooks/useChannelUpdatedListener';\nimport { useChannelVisibleListener } from './hooks/useChannelVisibleListener';\nimport { useConnectionRecoveredListener } from './hooks/useConnectionRecoveredListener';\nimport { useMessageNewListener } from './hooks/useMessageNewListener';\nimport { useMobileNavigation } from './hooks/useMobileNavigation';\nimport { useNotificationAddedToChannelListener } from './hooks/useNotificationAddedToChannelListener';\nimport { useNotificationMessageNewListener } from './hooks/useNotificationMessageNewListener';\nimport { useNotificationRemovedFromChannelListener } from './hooks/useNotificationRemovedFromChannelListener';\nimport { usePaginatedChannels } from './hooks/usePaginatedChannels';\nimport { useUserPresenceChangedListener } from './hooks/useUserPresenceChangedListener';\nimport { MAX_QUERY_CHANNELS_LIMIT, moveChannelUp } from './utils';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { ChannelPreview } from '../ChannelPreview/ChannelPreview';\nimport { ChannelSearch as DefaultChannelSearch, } from '../ChannelSearch/ChannelSearch';\nimport { EmptyStateIndicator as DefaultEmptyStateIndicator, } from '../EmptyStateIndicator';\nimport { LoadingChannels } from '../Loading/LoadingChannels';\nimport { LoadMorePaginator } from '../LoadMore/LoadMorePaginator';\nimport { NullComponent } from '../UtilityComponents';\nimport { ChannelListContextProvider } from '../../context';\nimport { useChatContext } from '../../context/ChatContext';\nconst DEFAULT_FILTERS = {};\nconst DEFAULT_OPTIONS = {};\nconst DEFAULT_SORT = {};\nconst UnMemoizedChannelList = (props) => {\n    const { additionalChannelSearchProps, Avatar = DefaultAvatar, allowNewMessagesFromUnfilteredChannels, channelRenderFilterFn, ChannelSearch = DefaultChannelSearch, customActiveChannel, customQueryChannels, EmptyStateIndicator = DefaultEmptyStateIndicator, filters, getLatestMessagePreview, LoadingErrorIndicator = NullComponent, LoadingIndicator = LoadingChannels, List = ChannelListMessenger, lockChannelOrder, onAddedToChannel, onChannelDeleted, onChannelHidden, onChannelTruncated, onChannelUpdated, onChannelVisible, onMessageNew, onMessageNewHandler, onRemovedFromChannel, options, Paginator = LoadMorePaginator, Preview, recoveryThrottleIntervalMs, renderChannels, sendChannelsToList = false, setActiveChannelOnMount = true, showChannelSearch = false, sort = DEFAULT_SORT, watchers = {}, } = props;\n    const { channel, channelsQueryState, client, closeMobileNav, customClasses, navOpen = false, setActiveChannel, theme, useImageFlagEmojisOnWindows, } = useChatContext('ChannelList');\n    const channelListRef = useRef(null);\n    const [channelUpdateCount, setChannelUpdateCount] = useState(0);\n    const [searchActive, setSearchActive] = useState(false);\n    /**\n     * Set a channel with id {customActiveChannel} as active and move it to the top of the list.\n     * If customActiveChannel prop is absent, then set the first channel in list as active channel.\n     */\n    const activeChannelHandler = async (channels, setChannels) => {\n        if (!channels.length || channels.length > (options?.limit || MAX_QUERY_CHANNELS_LIMIT)) {\n            return;\n        }\n        if (customActiveChannel) {\n            let customActiveChannelObject = channels.find((chan) => chan.id === customActiveChannel);\n            if (!customActiveChannelObject) {\n                //@ts-expect-error\n                [customActiveChannelObject] = await client.queryChannels({ id: customActiveChannel });\n            }\n            if (customActiveChannelObject) {\n                setActiveChannel(customActiveChannelObject, watchers);\n                const newChannels = moveChannelUp({\n                    activeChannel: customActiveChannelObject,\n                    channels,\n                    cid: customActiveChannelObject.cid,\n                });\n                setChannels(newChannels);\n            }\n            return;\n        }\n        if (setActiveChannelOnMount) {\n            setActiveChannel(channels[0], watchers);\n        }\n    };\n    /**\n     * For some events, inner properties on the channel will update but the shallow comparison will not\n     * force a re-render. Incrementing this dummy variable ensures the channel previews update.\n     */\n    const forceUpdate = useCallback(() => setChannelUpdateCount((count) => count + 1), [\n        setChannelUpdateCount,\n    ]);\n    const onSearch = useCallback((event) => {\n        if (!event.target.value) {\n            setSearchActive(false);\n        }\n        else {\n            setSearchActive(true);\n        }\n        additionalChannelSearchProps?.onSearch?.(event);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const onSearchExit = useCallback(() => {\n        setSearchActive(false);\n        additionalChannelSearchProps?.onSearchExit?.();\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const { channels, hasNextPage, loadNextPage, setChannels } = usePaginatedChannels(client, filters || DEFAULT_FILTERS, sort || DEFAULT_SORT, options || DEFAULT_OPTIONS, activeChannelHandler, recoveryThrottleIntervalMs, customQueryChannels);\n    const loadedChannels = channelRenderFilterFn ? channelRenderFilterFn(channels) : channels;\n    useMobileNavigation(channelListRef, navOpen, closeMobileNav);\n    useMessageNewListener(setChannels, onMessageNewHandler, lockChannelOrder, allowNewMessagesFromUnfilteredChannels);\n    useNotificationMessageNewListener(setChannels, onMessageNew, allowNewMessagesFromUnfilteredChannels);\n    useNotificationAddedToChannelListener(setChannels, onAddedToChannel, allowNewMessagesFromUnfilteredChannels);\n    useNotificationRemovedFromChannelListener(setChannels, onRemovedFromChannel);\n    useChannelDeletedListener(setChannels, onChannelDeleted);\n    useChannelHiddenListener(setChannels, onChannelHidden);\n    useChannelVisibleListener(setChannels, onChannelVisible);\n    useChannelTruncatedListener(setChannels, onChannelTruncated, forceUpdate);\n    useChannelUpdatedListener(setChannels, onChannelUpdated, forceUpdate);\n    useConnectionRecoveredListener(forceUpdate);\n    useUserPresenceChangedListener(setChannels);\n    useEffect(() => {\n        const handleEvent = (event) => {\n            if (event.cid === channel?.cid) {\n                setActiveChannel();\n            }\n        };\n        client.on('channel.deleted', handleEvent);\n        client.on('channel.hidden', handleEvent);\n        return () => {\n            client.off('channel.deleted', handleEvent);\n            client.off('channel.hidden', handleEvent);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [channel?.cid]);\n    const renderChannel = (item) => {\n        const previewProps = {\n            activeChannel: channel,\n            Avatar,\n            channel: item,\n            // forces the update of preview component on channel update\n            channelUpdateCount,\n            getLatestMessagePreview,\n            key: item.cid,\n            Preview,\n            setActiveChannel,\n            watchers,\n        };\n        return React.createElement(ChannelPreview, { ...previewProps });\n    };\n    const baseClass = 'str-chat__channel-list';\n    const className = clsx(customClasses?.chat ?? 'str-chat', theme, customClasses?.channelList ?? `${baseClass} ${baseClass}-react`, {\n        'str-chat--windows-flags': useImageFlagEmojisOnWindows && navigator.userAgent.match(/Win/),\n        [`${baseClass}--open`]: navOpen,\n    });\n    const showChannelList = !searchActive || additionalChannelSearchProps?.popupResults;\n    return (React.createElement(ChannelListContextProvider, { value: { channels, setChannels } },\n        React.createElement(\"div\", { className: className, ref: channelListRef },\n            showChannelSearch && (React.createElement(ChannelSearch, { onSearch: onSearch, onSearchExit: onSearchExit, setChannels: setChannels, ...additionalChannelSearchProps })),\n            showChannelList && (React.createElement(List, { error: channelsQueryState.error, loadedChannels: sendChannelsToList ? loadedChannels : undefined, loading: !!channelsQueryState.queryInProgress &&\n                    ['reload', 'uninitialized'].includes(channelsQueryState.queryInProgress), LoadingErrorIndicator: LoadingErrorIndicator, LoadingIndicator: LoadingIndicator, setChannels: setChannels }, !loadedChannels?.length ? (React.createElement(EmptyStateIndicator, { listType: 'channel' })) : (React.createElement(Paginator, { hasNextPage: hasNextPage, isLoading: channelsQueryState.queryInProgress === 'load-more', loadNextPage: loadNextPage }, renderChannels\n                ? renderChannels(loadedChannels, renderChannel)\n                : loadedChannels.map((channel) => renderChannel(channel)))))))));\n};\n/**\n * Renders a preview list of Channels, allowing you to select the Channel you want to open\n */\nexport const ChannelList = React.memo(UnMemoizedChannelList);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}