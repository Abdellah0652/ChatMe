{"ast":null,"code":"import { EmoticonItem } from '../../EmoticonItem/EmoticonItem';\nexport const useEmojiTrigger = emojiSearchIndex => ({\n  component: EmoticonItem,\n  dataProvider: async (query, _, onReady) => {\n    if (query.length === 0 || query.charAt(0).match(/[^a-zA-Z0-9+-]/)) {\n      return onReady([], query);\n    }\n    const emojis = (await emojiSearchIndex?.search(query)) ?? [];\n    // emojiIndex.search sometimes returns undefined values, so filter those out first\n    const result = emojis.filter(Boolean).slice(0, 7).map(({\n      id,\n      name,\n      native,\n      skins = []\n    }) => {\n      const [firstSkin] = skins;\n      return {\n        id,\n        name,\n        native: native ?? firstSkin.native\n      };\n    });\n    if (onReady) onReady(result, query);\n  },\n  output: entity => ({\n    caretPosition: 'next',\n    key: entity.id,\n    text: `${'native' in entity ? entity.native : ''}`\n  })\n});","map":{"version":3,"names":["EmoticonItem","useEmojiTrigger","emojiSearchIndex","component","dataProvider","query","_","onReady","length","charAt","match","emojis","search","result","filter","Boolean","slice","map","id","name","native","skins","firstSkin","output","entity","caretPosition","key","text"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/MessageInput/hooks/useEmojiTrigger.js"],"sourcesContent":["import { EmoticonItem } from '../../EmoticonItem/EmoticonItem';\nexport const useEmojiTrigger = (emojiSearchIndex) => ({\n    component: EmoticonItem,\n    dataProvider: async (query, _, onReady) => {\n        if (query.length === 0 || query.charAt(0).match(/[^a-zA-Z0-9+-]/)) {\n            return onReady([], query);\n        }\n        const emojis = (await emojiSearchIndex?.search(query)) ?? [];\n        // emojiIndex.search sometimes returns undefined values, so filter those out first\n        const result = emojis\n            .filter(Boolean)\n            .slice(0, 7)\n            .map(({ id, name, native, skins = [] }) => {\n            const [firstSkin] = skins;\n            return {\n                id,\n                name,\n                native: native ?? firstSkin.native,\n            };\n        });\n        if (onReady)\n            onReady(result, query);\n    },\n    output: (entity) => ({\n        caretPosition: 'next',\n        key: entity.id,\n        text: `${'native' in entity ? entity.native : ''}`,\n    }),\n});\n"],"mappings":"AAAA,SAASA,YAAY,QAAQ,iCAAiC;AAC9D,OAAO,MAAMC,eAAe,GAAIC,gBAAgB,KAAM;EAClDC,SAAS,EAAEH,YAAY;EACvBI,YAAY,EAAE,MAAAA,CAAOC,KAAK,EAAEC,CAAC,EAAEC,OAAO,KAAK;IACvC,IAAIF,KAAK,CAACG,MAAM,KAAK,CAAC,IAAIH,KAAK,CAACI,MAAM,CAAC,CAAC,CAAC,CAACC,KAAK,CAAC,gBAAgB,CAAC,EAAE;MAC/D,OAAOH,OAAO,CAAC,EAAE,EAAEF,KAAK,CAAC;IAC7B;IACA,MAAMM,MAAM,GAAG,CAAC,MAAMT,gBAAgB,EAAEU,MAAM,CAACP,KAAK,CAAC,KAAK,EAAE;IAC5D;IACA,MAAMQ,MAAM,GAAGF,MAAM,CAChBG,MAAM,CAACC,OAAO,CAAC,CACfC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CACXC,GAAG,CAAC,CAAC;MAAEC,EAAE;MAAEC,IAAI;MAAEC,MAAM;MAAEC,KAAK,GAAG;IAAG,CAAC,KAAK;MAC3C,MAAM,CAACC,SAAS,CAAC,GAAGD,KAAK;MACzB,OAAO;QACHH,EAAE;QACFC,IAAI;QACJC,MAAM,EAAEA,MAAM,IAAIE,SAAS,CAACF;MAChC,CAAC;IACL,CAAC,CAAC;IACF,IAAIb,OAAO,EACPA,OAAO,CAACM,MAAM,EAAER,KAAK,CAAC;EAC9B,CAAC;EACDkB,MAAM,EAAGC,MAAM,KAAM;IACjBC,aAAa,EAAE,MAAM;IACrBC,GAAG,EAAEF,MAAM,CAACN,EAAE;IACdS,IAAI,EAAE,GAAG,QAAQ,IAAIH,MAAM,GAAGA,MAAM,CAACJ,MAAM,GAAG,EAAE;EACpD,CAAC;AACL,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}