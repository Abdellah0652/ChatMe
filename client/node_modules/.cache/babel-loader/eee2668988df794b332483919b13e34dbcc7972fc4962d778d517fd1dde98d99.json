{"ast":null,"code":"import { useCallback, useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport uniqBy from 'lodash.uniqby';\nimport { isChannel } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelSearch = ({\n  channelType = 'messaging',\n  clearSearchOnClickOutside = true,\n  disabled = false,\n  onSearch: onSearchCallback,\n  onSearchExit,\n  onSelectResult,\n  searchDebounceIntervalMs = 300,\n  searchForChannels = false,\n  searchFunction,\n  searchQueryParams,\n  setChannels\n}) => {\n  const {\n    client,\n    setActiveChannel\n  } = useChatContext('useChannelSearch');\n  const [inputIsFocused, setInputIsFocused] = useState(false);\n  const [query, setQuery] = useState('');\n  const [results, setResults] = useState([]);\n  const [searching, setSearching] = useState(false);\n  const searchQueryPromiseInProgress = useRef();\n  const shouldIgnoreQueryResults = useRef(false);\n  const inputRef = useRef(null);\n  const searchBarRef = useRef(null);\n  const clearState = useCallback(() => {\n    setQuery('');\n    setResults([]);\n    setSearching(false);\n    if (searchQueryPromiseInProgress.current) {\n      shouldIgnoreQueryResults.current = true;\n    }\n  }, []);\n  const activateSearch = useCallback(() => {\n    setInputIsFocused(true);\n  }, []);\n  const exitSearch = useCallback(() => {\n    setInputIsFocused(false);\n    inputRef.current?.blur();\n    clearState();\n    onSearchExit?.();\n  }, [clearState, onSearchExit]);\n  useEffect(() => {\n    if (disabled) return;\n    const clickListener = event => {\n      if (!(event.target instanceof HTMLElement)) return;\n      const isInputClick = searchBarRef.current?.contains(event.target);\n      if (isInputClick) return;\n      if (inputIsFocused && !query || clearSearchOnClickOutside) {\n        exitSearch();\n      }\n    };\n    document.addEventListener('click', clickListener);\n    return () => document.removeEventListener('click', clickListener);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);\n  useEffect(() => {\n    if (!inputRef.current || disabled) return;\n    const handleKeyDown = event => {\n      if (event.key === 'Escape') return exitSearch();\n    };\n    inputRef.current.addEventListener('keydown', handleKeyDown);\n    return () => {\n      // eslint-disable-next-line react-hooks/exhaustive-deps\n      inputRef.current?.removeEventListener('keydown', handleKeyDown);\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [disabled]);\n  const selectResult = useCallback(async result => {\n    if (!client.userID) return;\n    if (onSelectResult) {\n      await onSelectResult({\n        setQuery,\n        setResults,\n        setSearching\n      }, result);\n      return;\n    }\n    let selectedChannel;\n    if (isChannel(result)) {\n      setActiveChannel(result);\n      selectedChannel = result;\n    } else {\n      const newChannel = client.channel(channelType, {\n        members: [client.userID, result.id]\n      });\n      await newChannel.watch();\n      setActiveChannel(newChannel);\n      selectedChannel = newChannel;\n    }\n    setChannels?.(channels => uniqBy([selectedChannel, ...channels], 'cid'));\n    if (clearSearchOnClickOutside) {\n      exitSearch();\n    }\n  },\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [clearSearchOnClickOutside, client, exitSearch, onSelectResult, setActiveChannel, setChannels]);\n  const getChannels = useCallback(async text => {\n    let results = [];\n    try {\n      const userQueryPromise = client.queryUsers(\n      // @ts-expect-error\n      {\n        $or: [{\n          id: {\n            $autocomplete: text\n          }\n        }, {\n          name: {\n            $autocomplete: text\n          }\n        }],\n        ...searchQueryParams?.userFilters?.filters\n      }, {\n        id: 1,\n        ...searchQueryParams?.userFilters?.sort\n      }, {\n        limit: 8,\n        ...searchQueryParams?.userFilters?.options\n      });\n      if (!searchForChannels) {\n        searchQueryPromiseInProgress.current = userQueryPromise;\n        const {\n          users\n        } = await searchQueryPromiseInProgress.current;\n        results = users.filter(u => u.id !== client.user?.id);\n      } else {\n        const channelQueryPromise = client.queryChannels(\n        // @ts-expect-error\n        {\n          name: {\n            $autocomplete: text\n          },\n          ...searchQueryParams?.channelFilters?.filters\n        }, searchQueryParams?.channelFilters?.sort || {}, {\n          limit: 5,\n          ...searchQueryParams?.channelFilters?.options\n        });\n        searchQueryPromiseInProgress.current = Promise.all([channelQueryPromise, userQueryPromise]);\n        const [channels, {\n          users\n        }] = await searchQueryPromiseInProgress.current;\n        results = [...channels, ...users.filter(u => u.id !== client.user?.id)];\n      }\n    } catch (error) {\n      console.error(error);\n    }\n    setSearching(false);\n    if (!shouldIgnoreQueryResults.current) {\n      setResults(results);\n    } else {\n      shouldIgnoreQueryResults.current = false;\n    }\n    searchQueryPromiseInProgress.current = undefined;\n  }, [client, searchForChannels, searchQueryParams]);\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const scheduleGetChannels = useCallback(debounce(getChannels, searchDebounceIntervalMs), [getChannels, searchDebounceIntervalMs]);\n  const onSearch = useCallback(event => {\n    event.preventDefault();\n    if (disabled) return;\n    if (searchFunction) {\n      searchFunction({\n        setQuery,\n        setResults,\n        setSearching\n      }, event);\n    } else if (event.target.value) {\n      setSearching(true);\n      setQuery(event.target.value);\n      scheduleGetChannels(event.target.value);\n    } else if (!event.target.value) {\n      clearState();\n      scheduleGetChannels.cancel();\n    }\n    onSearchCallback?.(event);\n  }, [clearState, disabled, scheduleGetChannels, onSearchCallback, searchFunction]);\n  return {\n    activateSearch,\n    clearState,\n    exitSearch,\n    inputIsFocused,\n    inputRef,\n    onSearch,\n    query,\n    results,\n    searchBarRef,\n    searching,\n    selectResult\n  };\n};","map":{"version":3,"names":["useCallback","useEffect","useRef","useState","debounce","uniqBy","isChannel","useChatContext","useChannelSearch","channelType","clearSearchOnClickOutside","disabled","onSearch","onSearchCallback","onSearchExit","onSelectResult","searchDebounceIntervalMs","searchForChannels","searchFunction","searchQueryParams","setChannels","client","setActiveChannel","inputIsFocused","setInputIsFocused","query","setQuery","results","setResults","searching","setSearching","searchQueryPromiseInProgress","shouldIgnoreQueryResults","inputRef","searchBarRef","clearState","current","activateSearch","exitSearch","blur","clickListener","event","target","HTMLElement","isInputClick","contains","document","addEventListener","removeEventListener","handleKeyDown","key","selectResult","result","userID","selectedChannel","newChannel","channel","members","id","watch","channels","getChannels","text","userQueryPromise","queryUsers","$or","$autocomplete","name","userFilters","filters","sort","limit","options","users","filter","u","user","channelQueryPromise","queryChannels","channelFilters","Promise","all","error","console","undefined","scheduleGetChannels","preventDefault","value","cancel"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/ChannelSearch/hooks/useChannelSearch.js"],"sourcesContent":["import { useCallback, useEffect, useRef, useState } from 'react';\nimport debounce from 'lodash.debounce';\nimport uniqBy from 'lodash.uniqby';\nimport { isChannel } from '../utils';\nimport { useChatContext } from '../../../context/ChatContext';\nexport const useChannelSearch = ({ channelType = 'messaging', clearSearchOnClickOutside = true, disabled = false, onSearch: onSearchCallback, onSearchExit, onSelectResult, searchDebounceIntervalMs = 300, searchForChannels = false, searchFunction, searchQueryParams, setChannels, }) => {\n    const { client, setActiveChannel } = useChatContext('useChannelSearch');\n    const [inputIsFocused, setInputIsFocused] = useState(false);\n    const [query, setQuery] = useState('');\n    const [results, setResults] = useState([]);\n    const [searching, setSearching] = useState(false);\n    const searchQueryPromiseInProgress = useRef();\n    const shouldIgnoreQueryResults = useRef(false);\n    const inputRef = useRef(null);\n    const searchBarRef = useRef(null);\n    const clearState = useCallback(() => {\n        setQuery('');\n        setResults([]);\n        setSearching(false);\n        if (searchQueryPromiseInProgress.current) {\n            shouldIgnoreQueryResults.current = true;\n        }\n    }, []);\n    const activateSearch = useCallback(() => {\n        setInputIsFocused(true);\n    }, []);\n    const exitSearch = useCallback(() => {\n        setInputIsFocused(false);\n        inputRef.current?.blur();\n        clearState();\n        onSearchExit?.();\n    }, [clearState, onSearchExit]);\n    useEffect(() => {\n        if (disabled)\n            return;\n        const clickListener = (event) => {\n            if (!(event.target instanceof HTMLElement))\n                return;\n            const isInputClick = searchBarRef.current?.contains(event.target);\n            if (isInputClick)\n                return;\n            if ((inputIsFocused && !query) || clearSearchOnClickOutside) {\n                exitSearch();\n            }\n        };\n        document.addEventListener('click', clickListener);\n        return () => document.removeEventListener('click', clickListener);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled, inputIsFocused, query, exitSearch, clearSearchOnClickOutside]);\n    useEffect(() => {\n        if (!inputRef.current || disabled)\n            return;\n        const handleKeyDown = (event) => {\n            if (event.key === 'Escape')\n                return exitSearch();\n        };\n        inputRef.current.addEventListener('keydown', handleKeyDown);\n        return () => {\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            inputRef.current?.removeEventListener('keydown', handleKeyDown);\n        };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [disabled]);\n    const selectResult = useCallback(async (result) => {\n        if (!client.userID)\n            return;\n        if (onSelectResult) {\n            await onSelectResult({\n                setQuery,\n                setResults,\n                setSearching,\n            }, result);\n            return;\n        }\n        let selectedChannel;\n        if (isChannel(result)) {\n            setActiveChannel(result);\n            selectedChannel = result;\n        }\n        else {\n            const newChannel = client.channel(channelType, { members: [client.userID, result.id] });\n            await newChannel.watch();\n            setActiveChannel(newChannel);\n            selectedChannel = newChannel;\n        }\n        setChannels?.((channels) => uniqBy([selectedChannel, ...channels], 'cid'));\n        if (clearSearchOnClickOutside) {\n            exitSearch();\n        }\n    }, \n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [clearSearchOnClickOutside, client, exitSearch, onSelectResult, setActiveChannel, setChannels]);\n    const getChannels = useCallback(async (text) => {\n        let results = [];\n        try {\n            const userQueryPromise = client.queryUsers(\n            // @ts-expect-error\n            {\n                $or: [{ id: { $autocomplete: text } }, { name: { $autocomplete: text } }],\n                ...searchQueryParams?.userFilters?.filters,\n            }, { id: 1, ...searchQueryParams?.userFilters?.sort }, { limit: 8, ...searchQueryParams?.userFilters?.options });\n            if (!searchForChannels) {\n                searchQueryPromiseInProgress.current = userQueryPromise;\n                const { users } = await searchQueryPromiseInProgress.current;\n                results = users.filter((u) => u.id !== client.user?.id);\n            }\n            else {\n                const channelQueryPromise = client.queryChannels(\n                // @ts-expect-error\n                {\n                    name: { $autocomplete: text },\n                    ...searchQueryParams?.channelFilters?.filters,\n                }, searchQueryParams?.channelFilters?.sort || {}, { limit: 5, ...searchQueryParams?.channelFilters?.options });\n                searchQueryPromiseInProgress.current = Promise.all([\n                    channelQueryPromise,\n                    userQueryPromise,\n                ]);\n                const [channels, { users }] = await searchQueryPromiseInProgress.current;\n                results = [...channels, ...users.filter((u) => u.id !== client.user?.id)];\n            }\n        }\n        catch (error) {\n            console.error(error);\n        }\n        setSearching(false);\n        if (!shouldIgnoreQueryResults.current) {\n            setResults(results);\n        }\n        else {\n            shouldIgnoreQueryResults.current = false;\n        }\n        searchQueryPromiseInProgress.current = undefined;\n    }, [client, searchForChannels, searchQueryParams]);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const scheduleGetChannels = useCallback(debounce(getChannels, searchDebounceIntervalMs), [\n        getChannels,\n        searchDebounceIntervalMs,\n    ]);\n    const onSearch = useCallback((event) => {\n        event.preventDefault();\n        if (disabled)\n            return;\n        if (searchFunction) {\n            searchFunction({\n                setQuery,\n                setResults,\n                setSearching,\n            }, event);\n        }\n        else if (event.target.value) {\n            setSearching(true);\n            setQuery(event.target.value);\n            scheduleGetChannels(event.target.value);\n        }\n        else if (!event.target.value) {\n            clearState();\n            scheduleGetChannels.cancel();\n        }\n        onSearchCallback?.(event);\n    }, [clearState, disabled, scheduleGetChannels, onSearchCallback, searchFunction]);\n    return {\n        activateSearch,\n        clearState,\n        exitSearch,\n        inputIsFocused,\n        inputRef,\n        onSearch,\n        query,\n        results,\n        searchBarRef,\n        searching,\n        selectResult,\n    };\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}