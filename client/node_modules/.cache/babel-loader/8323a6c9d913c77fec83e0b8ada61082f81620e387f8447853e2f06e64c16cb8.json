{"ast":null,"code":"import React, { useCallback } from 'react';\nimport { AutoCompleteTextarea } from '../AutoCompleteTextarea';\nimport { LoadingIndicator } from '../Loading/LoadingIndicator';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nconst UnMemoizedChatAutoComplete = props => {\n  const {\n    AutocompleteSuggestionItem: SuggestionItem,\n    AutocompleteSuggestionList: SuggestionList\n  } = useComponentContext('ChatAutoComplete');\n  const {\n    t\n  } = useTranslationContext('ChatAutoComplete');\n  const messageInput = useMessageInputContext('ChatAutoComplete');\n  const {\n    cooldownRemaining,\n    disabled,\n    emojiSearchIndex,\n    textareaRef: innerRef\n  } = messageInput;\n  const placeholder = props.placeholder || t('Type your message');\n  const emojiReplace = props.wordReplace ? word => props.wordReplace?.(word, emojiSearchIndex) : async word => {\n    const found = (await emojiSearchIndex?.search(word)) || [];\n    const emoji = found.filter(Boolean).slice(0, 10).find(({\n      emoticons\n    }) => !!emoticons?.includes(word));\n    if (!emoji) return null;\n    const [firstSkin] = emoji.skins ?? [];\n    return emoji.native ?? firstSkin.native;\n  };\n  const updateInnerRef = useCallback(ref => {\n    if (innerRef) {\n      innerRef.current = ref;\n    }\n  }, [innerRef]);\n  return React.createElement(AutoCompleteTextarea, {\n    additionalTextareaProps: messageInput.additionalTextareaProps,\n    \"aria-label\": cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    className: 'str-chat__textarea__textarea str-chat__message-textarea',\n    closeCommandsList: messageInput.closeCommandsList,\n    closeMentionsList: messageInput.closeMentionsList,\n    containerClassName: 'str-chat__textarea str-chat__message-textarea-react-host',\n    disabled: disabled || !!cooldownRemaining,\n    disableMentions: messageInput.disableMentions,\n    grow: messageInput.grow,\n    handleSubmit: props.handleSubmit || messageInput.handleSubmit,\n    innerRef: updateInnerRef,\n    loadingComponent: LoadingIndicator,\n    maxRows: messageInput.maxRows,\n    minChar: 0,\n    minRows: messageInput.minRows,\n    onBlur: props.onBlur,\n    onChange: props.onChange || messageInput.handleChange,\n    onFocus: props.onFocus,\n    onPaste: props.onPaste || messageInput.onPaste,\n    placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder,\n    replaceWord: emojiReplace,\n    rows: props.rows || 1,\n    shouldSubmit: messageInput.shouldSubmit,\n    showCommandsList: messageInput.showCommandsList,\n    showMentionsList: messageInput.showMentionsList,\n    SuggestionItem: SuggestionItem,\n    SuggestionList: SuggestionList,\n    trigger: messageInput.autocompleteTriggers || {},\n    value: props.value || messageInput.text\n  });\n};\nexport const ChatAutoComplete = React.memo(UnMemoizedChatAutoComplete);","map":{"version":3,"names":["React","useCallback","AutoCompleteTextarea","LoadingIndicator","useMessageInputContext","useTranslationContext","useComponentContext","UnMemoizedChatAutoComplete","props","AutocompleteSuggestionItem","SuggestionItem","AutocompleteSuggestionList","SuggestionList","t","messageInput","cooldownRemaining","disabled","emojiSearchIndex","textareaRef","innerRef","placeholder","emojiReplace","wordReplace","word","found","search","emoji","filter","Boolean","slice","find","emoticons","includes","firstSkin","skins","native","updateInnerRef","ref","current","createElement","additionalTextareaProps","className","closeCommandsList","closeMentionsList","containerClassName","disableMentions","grow","handleSubmit","loadingComponent","maxRows","minChar","minRows","onBlur","onChange","handleChange","onFocus","onPaste","replaceWord","rows","shouldSubmit","showCommandsList","showMentionsList","trigger","autocompleteTriggers","value","text","ChatAutoComplete","memo"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/ChatAutoComplete/ChatAutoComplete.js"],"sourcesContent":["import React, { useCallback } from 'react';\nimport { AutoCompleteTextarea } from '../AutoCompleteTextarea';\nimport { LoadingIndicator } from '../Loading/LoadingIndicator';\nimport { useMessageInputContext } from '../../context/MessageInputContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nconst UnMemoizedChatAutoComplete = (props) => {\n    const { AutocompleteSuggestionItem: SuggestionItem, AutocompleteSuggestionList: SuggestionList, } = useComponentContext('ChatAutoComplete');\n    const { t } = useTranslationContext('ChatAutoComplete');\n    const messageInput = useMessageInputContext('ChatAutoComplete');\n    const { cooldownRemaining, disabled, emojiSearchIndex, textareaRef: innerRef } = messageInput;\n    const placeholder = props.placeholder || t('Type your message');\n    const emojiReplace = props.wordReplace\n        ? (word) => props.wordReplace?.(word, emojiSearchIndex)\n        : async (word) => {\n            const found = (await emojiSearchIndex?.search(word)) || [];\n            const emoji = found\n                .filter(Boolean)\n                .slice(0, 10)\n                .find(({ emoticons }) => !!emoticons?.includes(word));\n            if (!emoji)\n                return null;\n            const [firstSkin] = emoji.skins ?? [];\n            return emoji.native ?? firstSkin.native;\n        };\n    const updateInnerRef = useCallback((ref) => {\n        if (innerRef) {\n            innerRef.current = ref;\n        }\n    }, [innerRef]);\n    return (React.createElement(AutoCompleteTextarea, { additionalTextareaProps: messageInput.additionalTextareaProps, \"aria-label\": cooldownRemaining ? t('Slow Mode ON') : placeholder, className: 'str-chat__textarea__textarea str-chat__message-textarea', closeCommandsList: messageInput.closeCommandsList, closeMentionsList: messageInput.closeMentionsList, containerClassName: 'str-chat__textarea str-chat__message-textarea-react-host', disabled: disabled || !!cooldownRemaining, disableMentions: messageInput.disableMentions, grow: messageInput.grow, handleSubmit: props.handleSubmit || messageInput.handleSubmit, innerRef: updateInnerRef, loadingComponent: LoadingIndicator, maxRows: messageInput.maxRows, minChar: 0, minRows: messageInput.minRows, onBlur: props.onBlur, onChange: props.onChange || messageInput.handleChange, onFocus: props.onFocus, onPaste: props.onPaste || messageInput.onPaste, placeholder: cooldownRemaining ? t('Slow Mode ON') : placeholder, replaceWord: emojiReplace, rows: props.rows || 1, shouldSubmit: messageInput.shouldSubmit, showCommandsList: messageInput.showCommandsList, showMentionsList: messageInput.showMentionsList, SuggestionItem: SuggestionItem, SuggestionList: SuggestionList, trigger: messageInput.autocompleteTriggers || {}, value: props.value || messageInput.text }));\n};\nexport const ChatAutoComplete = React.memo(UnMemoizedChatAutoComplete);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}