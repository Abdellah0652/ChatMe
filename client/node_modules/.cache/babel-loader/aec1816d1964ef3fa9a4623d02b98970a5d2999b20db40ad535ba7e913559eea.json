{"ast":null,"code":"import clsx from 'clsx';\nimport { MAX_POLL_OPTIONS } from '../constants';\nimport { nanoid } from 'nanoid';\nimport React, { useCallback } from 'react';\nimport { FieldError } from '../../Form/FieldError';\nimport { DragAndDropContainer } from '../../DragAndDrop/DragAndDropContainer';\nimport { useTranslationContext } from '../../../context';\nconst VALIDATION_ERRORS = {\n  'Option already exists': true\n};\nexport const OptionFieldSet = ({\n  errors,\n  options,\n  setErrors,\n  setState\n}) => {\n  const {\n    t\n  } = useTranslationContext('OptionFieldSet');\n  const findOptionDuplicate = sourceOption => {\n    const isDuplicateFilter = option => !!sourceOption.text.trim() &&\n    // do not include empty options into consideration\n    option.id !== sourceOption.id && option.text.trim() === sourceOption.text.trim();\n    return options.find(isDuplicateFilter);\n  };\n  const onSetNewOrder = useCallback(newOrder => {\n    setState(prev => ({\n      ...prev,\n      options: newOrder.map(index => prev.options[index])\n    }));\n  }, [setState]);\n  const draggable = options.length > 1;\n  return React.createElement(\"fieldset\", {\n    className: 'str-chat__form__field str-chat__form__input-fieldset'\n  }, React.createElement(\"legend\", {\n    className: 'str-chat__form__field-label'\n  }, t('Options')), React.createElement(DragAndDropContainer, {\n    className: 'str-chat__form__input-fieldset__values',\n    draggable: draggable,\n    onSetNewOrder: onSetNewOrder\n  }, options.map((option, i) => React.createElement(\"div\", {\n    className: clsx('str-chat__form__input-field', {\n      'str-chat__form__input-field--draggable': draggable,\n      'str-chat__form__input-field--has-error': errors[option.id]\n    }),\n    key: `new-poll-option-${i}`\n  }, React.createElement(\"div\", {\n    className: 'str-chat__form__input-field__value'\n  }, React.createElement(FieldError, {\n    className: 'str-chat__form__input-field__error',\n    \"data-testid\": 'poll-option-input-field-error',\n    text: errors[option.id]\n  }), React.createElement(\"input\", {\n    id: option.id,\n    onBlur: e => {\n      if (findOptionDuplicate({\n        id: e.target.id,\n        text: e.target.value\n      })) {\n        setErrors(prev => ({\n          ...prev,\n          [e.target.id]: t('Option already exists')\n        }));\n      }\n    },\n    onChange: e => {\n      setState(prev => {\n        const shouldAddEmptyOption = prev.options.length < MAX_POLL_OPTIONS && (!prev.options || prev.options.slice(i + 1).length === 0 && !!e.target.value);\n        const shouldRemoveOption = prev.options && prev.options.slice(i + 1).length > 0 && !e.target.value;\n        const optionListHead = prev.options ? prev.options.slice(0, i) : [];\n        const optionListTail = shouldAddEmptyOption ? [{\n          id: nanoid(),\n          text: ''\n        }] : (prev.options || []).slice(i + 1);\n        if (errors[option.id] && !e.target.value || VALIDATION_ERRORS[errors[option.id]] && !findOptionDuplicate({\n          id: e.target.id,\n          text: e.target.value\n        })) {\n          setErrors(prev => {\n            delete prev[option.id];\n            return prev;\n          });\n        }\n        return {\n          ...prev,\n          options: [...optionListHead, ...(shouldRemoveOption ? [] : [{\n            ...option,\n            text: e.target.value\n          }]), ...optionListTail]\n        };\n      });\n    },\n    onKeyUp: event => {\n      if (event.key === 'Enter') {\n        const nextInputId = options[i + 1].id;\n        document.getElementById(nextInputId)?.focus();\n      }\n    },\n    placeholder: t('Add an option'),\n    type: 'text',\n    value: option.text\n  })), draggable && React.createElement(\"div\", {\n    className: 'str-chat__drag-handle'\n  })))));\n};","map":{"version":3,"names":["clsx","MAX_POLL_OPTIONS","nanoid","React","useCallback","FieldError","DragAndDropContainer","useTranslationContext","VALIDATION_ERRORS","OptionFieldSet","errors","options","setErrors","setState","t","findOptionDuplicate","sourceOption","isDuplicateFilter","option","text","trim","id","find","onSetNewOrder","newOrder","prev","map","index","draggable","length","createElement","className","i","key","onBlur","e","target","value","onChange","shouldAddEmptyOption","slice","shouldRemoveOption","optionListHead","optionListTail","onKeyUp","event","nextInputId","document","getElementById","focus","placeholder","type"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/OptionFieldSet.js"],"sourcesContent":["import clsx from 'clsx';\nimport { MAX_POLL_OPTIONS } from '../constants';\nimport { nanoid } from 'nanoid';\nimport React, { useCallback } from 'react';\nimport { FieldError } from '../../Form/FieldError';\nimport { DragAndDropContainer } from '../../DragAndDrop/DragAndDropContainer';\nimport { useTranslationContext } from '../../../context';\nconst VALIDATION_ERRORS = { 'Option already exists': true };\nexport const OptionFieldSet = ({ errors, options, setErrors, setState }) => {\n    const { t } = useTranslationContext('OptionFieldSet');\n    const findOptionDuplicate = (sourceOption) => {\n        const isDuplicateFilter = (option) => !!sourceOption.text.trim() && // do not include empty options into consideration\n            option.id !== sourceOption.id &&\n            option.text.trim() === sourceOption.text.trim();\n        return options.find(isDuplicateFilter);\n    };\n    const onSetNewOrder = useCallback((newOrder) => {\n        setState((prev) => ({ ...prev, options: newOrder.map((index) => prev.options[index]) }));\n    }, [setState]);\n    const draggable = options.length > 1;\n    return (React.createElement(\"fieldset\", { className: 'str-chat__form__field str-chat__form__input-fieldset' },\n        React.createElement(\"legend\", { className: 'str-chat__form__field-label' }, t('Options')),\n        React.createElement(DragAndDropContainer, { className: 'str-chat__form__input-fieldset__values', draggable: draggable, onSetNewOrder: onSetNewOrder }, options.map((option, i) => (React.createElement(\"div\", { className: clsx('str-chat__form__input-field', {\n                'str-chat__form__input-field--draggable': draggable,\n                'str-chat__form__input-field--has-error': errors[option.id],\n            }), key: `new-poll-option-${i}` },\n            React.createElement(\"div\", { className: 'str-chat__form__input-field__value' },\n                React.createElement(FieldError, { className: 'str-chat__form__input-field__error', \"data-testid\": 'poll-option-input-field-error', text: errors[option.id] }),\n                React.createElement(\"input\", { id: option.id, onBlur: (e) => {\n                        if (findOptionDuplicate({ id: e.target.id, text: e.target.value })) {\n                            setErrors((prev) => ({\n                                ...prev,\n                                [e.target.id]: t('Option already exists'),\n                            }));\n                        }\n                    }, onChange: (e) => {\n                        setState((prev) => {\n                            const shouldAddEmptyOption = prev.options.length < MAX_POLL_OPTIONS &&\n                                (!prev.options ||\n                                    (prev.options.slice(i + 1).length === 0 && !!e.target.value));\n                            const shouldRemoveOption = prev.options && prev.options.slice(i + 1).length > 0 && !e.target.value;\n                            const optionListHead = prev.options ? prev.options.slice(0, i) : [];\n                            const optionListTail = shouldAddEmptyOption\n                                ? [{ id: nanoid(), text: '' }]\n                                : (prev.options || []).slice(i + 1);\n                            if ((errors[option.id] && !e.target.value) ||\n                                (VALIDATION_ERRORS[errors[option.id]] &&\n                                    !findOptionDuplicate({ id: e.target.id, text: e.target.value }))) {\n                                setErrors((prev) => {\n                                    delete prev[option.id];\n                                    return prev;\n                                });\n                            }\n                            return {\n                                ...prev,\n                                options: [\n                                    ...optionListHead,\n                                    ...(shouldRemoveOption ? [] : [{ ...option, text: e.target.value }]),\n                                    ...optionListTail,\n                                ],\n                            };\n                        });\n                    }, onKeyUp: (event) => {\n                        if (event.key === 'Enter') {\n                            const nextInputId = options[i + 1].id;\n                            document.getElementById(nextInputId)?.focus();\n                        }\n                    }, placeholder: t('Add an option'), type: 'text', value: option.text })),\n            draggable && React.createElement(\"div\", { className: 'str-chat__drag-handle' })))))));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}