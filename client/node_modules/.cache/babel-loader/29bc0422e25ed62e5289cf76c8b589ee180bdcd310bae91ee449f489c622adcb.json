{"ast":null,"code":"import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { MESSAGE_ACTIONS } from '../Message';\nimport { MessageInput, MessageInputFlat } from '../MessageInput';\nimport { MessageList, VirtualizedMessageList } from '../MessageList';\nimport { ThreadHeader as DefaultThreadHeader } from './ThreadHeader';\nimport { ThreadHead as DefaultThreadHead } from '../Thread/ThreadHead';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext } from '../../context';\nimport { useThreadContext } from '../Threads';\nimport { useStateStore } from '../../store';\n/**\n * The Thread component renders a parent Message with a list of replies\n */\nexport const Thread = props => {\n  const {\n    channel,\n    channelConfig,\n    thread\n  } = useChannelStateContext('Thread');\n  const threadInstance = useThreadContext();\n  if (!thread && !threadInstance || channelConfig?.replies === false) return null;\n  // the wrapper ensures a key variable is set and the component recreates on thread switch\n  return (\n    // FIXME: TS is having trouble here as at least one of the two would always be defined\n    React.createElement(ThreadInner, {\n      ...props,\n      key: `thread-${(thread ?? threadInstance)?.id}-${channel?.cid}`\n    })\n  );\n};\nconst selector = nextValue => ({\n  isLoadingNext: nextValue.pagination.isLoadingNext,\n  isLoadingPrev: nextValue.pagination.isLoadingPrev,\n  parentMessage: nextValue.parentMessage,\n  replies: nextValue.replies\n});\nconst ThreadInner = props => {\n  const {\n    additionalMessageInputProps,\n    additionalMessageListProps,\n    additionalParentMessageProps,\n    additionalVirtualizedMessageListProps,\n    autoFocus = true,\n    enableDateSeparator = false,\n    Input: PropInput,\n    Message: PropMessage,\n    messageActions = Object.keys(MESSAGE_ACTIONS),\n    virtualized\n  } = props;\n  const threadInstance = useThreadContext();\n  const {\n    isLoadingNext,\n    isLoadingPrev,\n    parentMessage,\n    replies\n  } = useStateStore(threadInstance?.state, selector) ?? {};\n  const {\n    thread,\n    threadHasMore,\n    threadLoadingMore,\n    threadMessages = [],\n    threadSuppressAutoscroll\n  } = useChannelStateContext('Thread');\n  const {\n    closeThread,\n    loadMoreThread\n  } = useChannelActionContext('Thread');\n  const {\n    customClasses\n  } = useChatContext('Thread');\n  const {\n    ThreadInput: ContextInput,\n    Message: ContextMessage,\n    ThreadHead = DefaultThreadHead,\n    ThreadHeader = DefaultThreadHeader,\n    VirtualMessage\n  } = useComponentContext('Thread');\n  const ThreadInput = PropInput ?? additionalMessageInputProps?.Input ?? ContextInput ?? MessageInputFlat;\n  const ThreadMessage = PropMessage || additionalMessageListProps?.Message;\n  const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;\n  const MessageUIComponent = ThreadMessage || FallbackMessage;\n  const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;\n  useEffect(() => {\n    if (thread?.id && thread?.reply_count) {\n      // FIXME: integrators can customize channel query options but cannot customize channel.getReplies() options\n      loadMoreThread();\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [thread, loadMoreThread]);\n  const threadProps = threadInstance ? {\n    loadingMore: isLoadingPrev,\n    loadingMoreNewer: isLoadingNext,\n    loadMore: threadInstance.loadPrevPage,\n    loadMoreNewer: threadInstance.loadNextPage,\n    messages: replies\n  } : {\n    hasMore: threadHasMore,\n    loadingMore: threadLoadingMore,\n    loadMore: loadMoreThread,\n    messages: threadMessages\n  };\n  const messageAsThread = thread ?? parentMessage;\n  if (!messageAsThread) return null;\n  const threadClass = customClasses?.thread || clsx('str-chat__thread-container str-chat__thread', {\n    'str-chat__thread--virtualized': virtualized\n  });\n  const head = React.createElement(ThreadHead, {\n    key: messageAsThread.id,\n    message: messageAsThread,\n    Message: MessageUIComponent,\n    ...additionalParentMessageProps\n  });\n  return React.createElement(\"div\", {\n    className: threadClass\n  }, React.createElement(ThreadHeader, {\n    closeThread: closeThread,\n    thread: messageAsThread\n  }), React.createElement(ThreadMessageList, {\n    disableDateSeparator: !enableDateSeparator,\n    head: head,\n    Message: MessageUIComponent,\n    messageActions: messageActions,\n    suppressAutoscroll: threadSuppressAutoscroll,\n    threadList: true,\n    ...threadProps,\n    ...(virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps)\n  }), React.createElement(MessageInput, {\n    focus: autoFocus,\n    Input: ThreadInput,\n    isThreadInput: true,\n    parent: thread ?? parentMessage,\n    publishTypingEvent: false,\n    ...additionalMessageInputProps\n  }));\n};","map":{"version":3,"names":["React","useEffect","clsx","MESSAGE_ACTIONS","MessageInput","MessageInputFlat","MessageList","VirtualizedMessageList","ThreadHeader","DefaultThreadHeader","ThreadHead","DefaultThreadHead","useChannelActionContext","useChannelStateContext","useChatContext","useComponentContext","useThreadContext","useStateStore","Thread","props","channel","channelConfig","thread","threadInstance","replies","createElement","ThreadInner","key","id","cid","selector","nextValue","isLoadingNext","pagination","isLoadingPrev","parentMessage","additionalMessageInputProps","additionalMessageListProps","additionalParentMessageProps","additionalVirtualizedMessageListProps","autoFocus","enableDateSeparator","Input","PropInput","Message","PropMessage","messageActions","Object","keys","virtualized","state","threadHasMore","threadLoadingMore","threadMessages","threadSuppressAutoscroll","closeThread","loadMoreThread","customClasses","ThreadInput","ContextInput","ContextMessage","VirtualMessage","ThreadMessage","FallbackMessage","MessageUIComponent","ThreadMessageList","reply_count","threadProps","loadingMore","loadingMoreNewer","loadMore","loadPrevPage","loadMoreNewer","loadNextPage","messages","hasMore","messageAsThread","threadClass","head","message","className","disableDateSeparator","suppressAutoscroll","threadList","focus","isThreadInput","parent","publishTypingEvent"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Thread/Thread.js"],"sourcesContent":["import React, { useEffect } from 'react';\nimport clsx from 'clsx';\nimport { MESSAGE_ACTIONS } from '../Message';\nimport { MessageInput, MessageInputFlat } from '../MessageInput';\nimport { MessageList, VirtualizedMessageList, } from '../MessageList';\nimport { ThreadHeader as DefaultThreadHeader } from './ThreadHeader';\nimport { ThreadHead as DefaultThreadHead } from '../Thread/ThreadHead';\nimport { useChannelActionContext, useChannelStateContext, useChatContext, useComponentContext, } from '../../context';\nimport { useThreadContext } from '../Threads';\nimport { useStateStore } from '../../store';\n/**\n * The Thread component renders a parent Message with a list of replies\n */\nexport const Thread = (props) => {\n    const { channel, channelConfig, thread } = useChannelStateContext('Thread');\n    const threadInstance = useThreadContext();\n    if ((!thread && !threadInstance) || channelConfig?.replies === false)\n        return null;\n    // the wrapper ensures a key variable is set and the component recreates on thread switch\n    return (\n    // FIXME: TS is having trouble here as at least one of the two would always be defined\n    React.createElement(ThreadInner, { ...props, key: `thread-${(thread ?? threadInstance)?.id}-${channel?.cid}` }));\n};\nconst selector = (nextValue) => ({\n    isLoadingNext: nextValue.pagination.isLoadingNext,\n    isLoadingPrev: nextValue.pagination.isLoadingPrev,\n    parentMessage: nextValue.parentMessage,\n    replies: nextValue.replies,\n});\nconst ThreadInner = (props) => {\n    const { additionalMessageInputProps, additionalMessageListProps, additionalParentMessageProps, additionalVirtualizedMessageListProps, autoFocus = true, enableDateSeparator = false, Input: PropInput, Message: PropMessage, messageActions = Object.keys(MESSAGE_ACTIONS), virtualized, } = props;\n    const threadInstance = useThreadContext();\n    const { isLoadingNext, isLoadingPrev, parentMessage, replies } = useStateStore(threadInstance?.state, selector) ?? {};\n    const { thread, threadHasMore, threadLoadingMore, threadMessages = [], threadSuppressAutoscroll, } = useChannelStateContext('Thread');\n    const { closeThread, loadMoreThread } = useChannelActionContext('Thread');\n    const { customClasses } = useChatContext('Thread');\n    const { ThreadInput: ContextInput, Message: ContextMessage, ThreadHead = DefaultThreadHead, ThreadHeader = DefaultThreadHeader, VirtualMessage, } = useComponentContext('Thread');\n    const ThreadInput = PropInput ?? additionalMessageInputProps?.Input ?? ContextInput ?? MessageInputFlat;\n    const ThreadMessage = PropMessage || additionalMessageListProps?.Message;\n    const FallbackMessage = virtualized && VirtualMessage ? VirtualMessage : ContextMessage;\n    const MessageUIComponent = ThreadMessage || FallbackMessage;\n    const ThreadMessageList = virtualized ? VirtualizedMessageList : MessageList;\n    useEffect(() => {\n        if (thread?.id && thread?.reply_count) {\n            // FIXME: integrators can customize channel query options but cannot customize channel.getReplies() options\n            loadMoreThread();\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [thread, loadMoreThread]);\n    const threadProps = threadInstance\n        ? {\n            loadingMore: isLoadingPrev,\n            loadingMoreNewer: isLoadingNext,\n            loadMore: threadInstance.loadPrevPage,\n            loadMoreNewer: threadInstance.loadNextPage,\n            messages: replies,\n        }\n        : {\n            hasMore: threadHasMore,\n            loadingMore: threadLoadingMore,\n            loadMore: loadMoreThread,\n            messages: threadMessages,\n        };\n    const messageAsThread = thread ?? parentMessage;\n    if (!messageAsThread)\n        return null;\n    const threadClass = customClasses?.thread ||\n        clsx('str-chat__thread-container str-chat__thread', {\n            'str-chat__thread--virtualized': virtualized,\n        });\n    const head = (React.createElement(ThreadHead, { key: messageAsThread.id, message: messageAsThread, Message: MessageUIComponent, ...additionalParentMessageProps }));\n    return (React.createElement(\"div\", { className: threadClass },\n        React.createElement(ThreadHeader, { closeThread: closeThread, thread: messageAsThread }),\n        React.createElement(ThreadMessageList, { disableDateSeparator: !enableDateSeparator, head: head, Message: MessageUIComponent, messageActions: messageActions, suppressAutoscroll: threadSuppressAutoscroll, threadList: true, ...threadProps, ...(virtualized ? additionalVirtualizedMessageListProps : additionalMessageListProps) }),\n        React.createElement(MessageInput, { focus: autoFocus, Input: ThreadInput, isThreadInput: true, parent: thread ?? parentMessage, publishTypingEvent: false, ...additionalMessageInputProps })));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}