{"ast":null,"code":"import React from 'react';\nimport clsx from 'clsx';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Poll } from '../Poll';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nexport const QuotedMessage = () => {\n  const {\n    Attachment = DefaultAttachment,\n    Avatar: ContextAvatar\n  } = useComponentContext('QuotedMessage');\n  const {\n    client\n  } = useChatContext();\n  const {\n    isMyMessage,\n    message\n  } = useMessageContext('QuotedMessage');\n  const {\n    t,\n    userLanguage\n  } = useTranslationContext('QuotedMessage');\n  const {\n    jumpToMessage\n  } = useChannelActionContext('QuotedMessage');\n  const Avatar = ContextAvatar || DefaultAvatar;\n  const {\n    quoted_message\n  } = message;\n  if (!quoted_message) return null;\n  const poll = quoted_message.poll_id && client.polls.fromState(quoted_message.poll_id);\n  const quotedMessageDeleted = quoted_message.deleted_at || quoted_message.type === 'deleted';\n  const quotedMessageText = quotedMessageDeleted ? t('This message was deleted...') : quoted_message.i18n?.[`${userLanguage}_text`] || quoted_message.text;\n  const quotedMessageAttachment = quoted_message.attachments?.length && !quotedMessageDeleted ? quoted_message.attachments[0] : null;\n  if (!quoted_message.poll && !quotedMessageText && !quotedMessageAttachment) return null;\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    className: clsx('str-chat__quoted-message-preview', {\n      mine: isMyMessage()\n    }),\n    \"data-testid\": 'quoted-message',\n    onClickCapture: e => {\n      e.stopPropagation();\n      e.preventDefault();\n      jumpToMessage(quoted_message.id);\n    }\n  }, quoted_message.user && React.createElement(Avatar, {\n    className: 'str-chat__avatar--quoted-message-sender',\n    image: quoted_message.user.image,\n    name: quoted_message.user.name || quoted_message.user.id,\n    user: quoted_message.user\n  }), React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-bubble',\n    \"data-testid\": 'quoted-message-contents'\n  }, poll ? React.createElement(Poll, {\n    isQuoted: true,\n    poll: poll\n  }) : React.createElement(React.Fragment, null, quotedMessageAttachment && React.createElement(Attachment, {\n    attachments: [quotedMessageAttachment],\n    isQuoted: true\n  }), React.createElement(\"div\", {\n    className: 'str-chat__quoted-message-bubble__text',\n    \"data-testid\": 'quoted-message-text'\n  }, quotedMessageText)))), message.attachments?.length ? React.createElement(Attachment, {\n    attachments: message.attachments\n  }) : null);\n};","map":{"version":3,"names":["React","clsx","Attachment","DefaultAttachment","Avatar","DefaultAvatar","Poll","useChatContext","useComponentContext","useMessageContext","useTranslationContext","useChannelActionContext","QuotedMessage","ContextAvatar","client","isMyMessage","message","t","userLanguage","jumpToMessage","quoted_message","poll","poll_id","polls","fromState","quotedMessageDeleted","deleted_at","type","quotedMessageText","i18n","text","quotedMessageAttachment","attachments","length","createElement","Fragment","className","mine","onClickCapture","e","stopPropagation","preventDefault","id","user","image","name","isQuoted"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Message/QuotedMessage.js"],"sourcesContent":["import React from 'react';\nimport clsx from 'clsx';\nimport { Attachment as DefaultAttachment } from '../Attachment';\nimport { Avatar as DefaultAvatar } from '../Avatar';\nimport { Poll } from '../Poll';\nimport { useChatContext } from '../../context/ChatContext';\nimport { useComponentContext } from '../../context/ComponentContext';\nimport { useMessageContext } from '../../context/MessageContext';\nimport { useTranslationContext } from '../../context/TranslationContext';\nimport { useChannelActionContext } from '../../context/ChannelActionContext';\nexport const QuotedMessage = () => {\n    const { Attachment = DefaultAttachment, Avatar: ContextAvatar, } = useComponentContext('QuotedMessage');\n    const { client } = useChatContext();\n    const { isMyMessage, message } = useMessageContext('QuotedMessage');\n    const { t, userLanguage } = useTranslationContext('QuotedMessage');\n    const { jumpToMessage } = useChannelActionContext('QuotedMessage');\n    const Avatar = ContextAvatar || DefaultAvatar;\n    const { quoted_message } = message;\n    if (!quoted_message)\n        return null;\n    const poll = quoted_message.poll_id && client.polls.fromState(quoted_message.poll_id);\n    const quotedMessageDeleted = quoted_message.deleted_at || quoted_message.type === 'deleted';\n    const quotedMessageText = quotedMessageDeleted\n        ? t('This message was deleted...')\n        : quoted_message.i18n?.[`${userLanguage}_text`] ||\n            quoted_message.text;\n    const quotedMessageAttachment = quoted_message.attachments?.length && !quotedMessageDeleted\n        ? quoted_message.attachments[0]\n        : null;\n    if (!quoted_message.poll && !quotedMessageText && !quotedMessageAttachment)\n        return null;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: clsx('str-chat__quoted-message-preview', { mine: isMyMessage() }), \"data-testid\": 'quoted-message', onClickCapture: (e) => {\n                e.stopPropagation();\n                e.preventDefault();\n                jumpToMessage(quoted_message.id);\n            } },\n            quoted_message.user && (React.createElement(Avatar, { className: 'str-chat__avatar--quoted-message-sender', image: quoted_message.user.image, name: quoted_message.user.name || quoted_message.user.id, user: quoted_message.user })),\n            React.createElement(\"div\", { className: 'str-chat__quoted-message-bubble', \"data-testid\": 'quoted-message-contents' }, poll ? (React.createElement(Poll, { isQuoted: true, poll: poll })) : (React.createElement(React.Fragment, null,\n                quotedMessageAttachment && (React.createElement(Attachment, { attachments: [quotedMessageAttachment], isQuoted: true })),\n                React.createElement(\"div\", { className: 'str-chat__quoted-message-bubble__text', \"data-testid\": 'quoted-message-text' }, quotedMessageText))))),\n        message.attachments?.length ? React.createElement(Attachment, { attachments: message.attachments }) : null));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}