{"ast":null,"code":"import clsx from 'clsx';\nimport { nanoid } from 'nanoid';\nimport React, { useState } from 'react';\nimport { FieldError } from '../../Form/FieldError';\nimport { OptionFieldSet } from './OptionFieldSet';\nimport { PollCreationDialogControls } from './PollCreationDialogControls';\nimport { VALID_MAX_VOTES_VALUE_REGEX } from '../constants';\nimport { ModalHeader } from '../../Modal/ModalHeader';\nimport { SimpleSwitchField } from '../../Form/SwitchField';\nimport { useChatContext, useTranslationContext } from '../../../context';\nexport const PollCreationDialog = ({\n  close\n}) => {\n  const {\n    client\n  } = useChatContext();\n  const {\n    t\n  } = useTranslationContext();\n  const [nameError, setNameError] = useState();\n  const [optionsErrors, setOptionsErrors] = useState({});\n  const [multipleAnswerCountError, setMultipleAnswerCountError] = useState();\n  const [state, setState] = useState(() => ({\n    allow_answers: false,\n    allow_user_suggested_options: false,\n    description: '',\n    enforce_unique_vote: true,\n    id: nanoid(),\n    max_votes_allowed: '',\n    name: '',\n    options: [{\n      id: nanoid(),\n      text: ''\n    }],\n    user_id: client.user?.id,\n    voting_visibility: 'public'\n  }));\n  return React.createElement(\"div\", {\n    className: 'str-chat__dialog str-chat__poll-creation-dialog',\n    \"data-testid\": 'poll-creation-dialog'\n  }, React.createElement(ModalHeader, {\n    close: close,\n    title: t('Create poll')\n  }), React.createElement(\"div\", {\n    className: 'str-chat__dialog__body'\n  }, React.createElement(\"form\", {\n    autoComplete: 'off'\n  }, React.createElement(\"div\", {\n    className: clsx('str-chat__form__field str-chat__form__input-field str-chat__form__input-field--with-label', {\n      'str-chat__form__input-field--has-error': nameError\n    })\n  }, React.createElement(\"label\", {\n    className: 'str-chat__form__field-label',\n    htmlFor: 'name'\n  }, t('Question')), React.createElement(\"div\", {\n    className: clsx('str-chat__form__input-field__value')\n  }, React.createElement(FieldError, {\n    className: 'str-chat__form__input-field__error',\n    \"data-testid\": 'poll-name-input-field-error',\n    text: nameError\n  }), React.createElement(\"input\", {\n    id: 'name',\n    onBlur: e => {\n      if (!e.target.value) {\n        setNameError('The field is required');\n      }\n    },\n    onChange: e => {\n      setState(prev => ({\n        ...prev,\n        name: e.target.value\n      }));\n      if (nameError && e.target.value) {\n        setNameError(undefined);\n      }\n    },\n    placeholder: t('Ask a question'),\n    type: 'text',\n    value: state.name\n  }))), React.createElement(OptionFieldSet, {\n    errors: optionsErrors,\n    options: state.options,\n    setErrors: setOptionsErrors,\n    setState: setState\n  }), React.createElement(\"div\", {\n    className: clsx('str-chat__form__expandable-field', {\n      'str-chat__form__expandable-field--expanded': !state.enforce_unique_vote\n    })\n  }, React.createElement(SimpleSwitchField, {\n    checked: !state.enforce_unique_vote,\n    id: 'enforce_unique_vote',\n    labelText: t('Multiple answers'),\n    onChange: e => {\n      setState(prev => ({\n        ...prev,\n        enforce_unique_vote: !e.target.checked,\n        max_votes_allowed: ''\n      }));\n      setMultipleAnswerCountError(undefined);\n    }\n  }), !state.enforce_unique_vote && React.createElement(\"div\", {\n    className: clsx('str-chat__form__input-field', {\n      'str-chat__form__input-field--has-error': multipleAnswerCountError\n    })\n  }, React.createElement(\"div\", {\n    className: clsx('str-chat__form__input-field__value')\n  }, React.createElement(FieldError, {\n    className: 'str-chat__form__input-field__error',\n    \"data-testid\": 'poll-max-votes-allowed-input-field-error',\n    text: multipleAnswerCountError\n  }), React.createElement(\"input\", {\n    id: 'max_votes_allowed',\n    onChange: e => {\n      const isValidValue = !e.target.value || e.target.value.match(VALID_MAX_VOTES_VALUE_REGEX);\n      if (!isValidValue) {\n        setMultipleAnswerCountError(t('Type a number from 2 to 10'));\n      } else if (multipleAnswerCountError) {\n        setMultipleAnswerCountError(undefined);\n      }\n      setState(prev => ({\n        ...prev,\n        max_votes_allowed: e.target.value\n      }));\n    },\n    placeholder: t('Maximum number of votes (from 2 to 10)'),\n    type: 'number',\n    value: state.max_votes_allowed\n  })))), React.createElement(SimpleSwitchField, {\n    checked: state.voting_visibility === 'anonymous',\n    id: 'voting_visibility',\n    labelText: t('Anonymous poll'),\n    onChange: e => setState(prev => ({\n      ...prev,\n      voting_visibility: e.target.checked ? 'anonymous' : 'public'\n    }))\n  }), React.createElement(SimpleSwitchField, {\n    checked: state.allow_user_suggested_options,\n    id: 'allow_user_suggested_options',\n    labelText: t('Allow option suggestion'),\n    onChange: e => setState(prev => ({\n      ...prev,\n      allow_user_suggested_options: e.target.checked\n    }))\n  }), React.createElement(SimpleSwitchField, {\n    checked: state.allow_answers,\n    id: 'allow_answers',\n    labelText: t('Allow comments'),\n    onChange: e => setState(prev => ({\n      ...prev,\n      allow_answers: e.target.checked\n    }))\n  }))), React.createElement(PollCreationDialogControls, {\n    close: close,\n    errors: [...(nameError ?? []), ...(multipleAnswerCountError ?? []), ...Object.keys(optionsErrors)],\n    state: state\n  }));\n};","map":{"version":3,"names":["clsx","nanoid","React","useState","FieldError","OptionFieldSet","PollCreationDialogControls","VALID_MAX_VOTES_VALUE_REGEX","ModalHeader","SimpleSwitchField","useChatContext","useTranslationContext","PollCreationDialog","close","client","t","nameError","setNameError","optionsErrors","setOptionsErrors","multipleAnswerCountError","setMultipleAnswerCountError","state","setState","allow_answers","allow_user_suggested_options","description","enforce_unique_vote","id","max_votes_allowed","name","options","text","user_id","user","voting_visibility","createElement","className","title","autoComplete","htmlFor","onBlur","e","target","value","onChange","prev","undefined","placeholder","type","errors","setErrors","checked","labelText","isValidValue","match","Object","keys"],"sources":["C:/Users/abdel/OneDrive/Desktop/Medical-plager/client/node_modules/stream-chat-react/dist/components/Poll/PollCreationDialog/PollCreationDialog.js"],"sourcesContent":["import clsx from 'clsx';\nimport { nanoid } from 'nanoid';\nimport React, { useState } from 'react';\nimport { FieldError } from '../../Form/FieldError';\nimport { OptionFieldSet } from './OptionFieldSet';\nimport { PollCreationDialogControls } from './PollCreationDialogControls';\nimport { VALID_MAX_VOTES_VALUE_REGEX } from '../constants';\nimport { ModalHeader } from '../../Modal/ModalHeader';\nimport { SimpleSwitchField } from '../../Form/SwitchField';\nimport { useChatContext, useTranslationContext } from '../../../context';\nexport const PollCreationDialog = ({ close }) => {\n    const { client } = useChatContext();\n    const { t } = useTranslationContext();\n    const [nameError, setNameError] = useState();\n    const [optionsErrors, setOptionsErrors] = useState({});\n    const [multipleAnswerCountError, setMultipleAnswerCountError] = useState();\n    const [state, setState] = useState(() => ({\n        allow_answers: false,\n        allow_user_suggested_options: false,\n        description: '',\n        enforce_unique_vote: true,\n        id: nanoid(),\n        max_votes_allowed: '',\n        name: '',\n        options: [{ id: nanoid(), text: '' }],\n        user_id: client.user?.id,\n        voting_visibility: 'public',\n    }));\n    return (React.createElement(\"div\", { className: 'str-chat__dialog str-chat__poll-creation-dialog', \"data-testid\": 'poll-creation-dialog' },\n        React.createElement(ModalHeader, { close: close, title: t('Create poll') }),\n        React.createElement(\"div\", { className: 'str-chat__dialog__body' },\n            React.createElement(\"form\", { autoComplete: 'off' },\n                React.createElement(\"div\", { className: clsx('str-chat__form__field str-chat__form__input-field str-chat__form__input-field--with-label', {\n                        'str-chat__form__input-field--has-error': nameError,\n                    }) },\n                    React.createElement(\"label\", { className: 'str-chat__form__field-label', htmlFor: 'name' }, t('Question')),\n                    React.createElement(\"div\", { className: clsx('str-chat__form__input-field__value') },\n                        React.createElement(FieldError, { className: 'str-chat__form__input-field__error', \"data-testid\": 'poll-name-input-field-error', text: nameError }),\n                        React.createElement(\"input\", { id: 'name', onBlur: (e) => {\n                                if (!e.target.value) {\n                                    setNameError('The field is required');\n                                }\n                            }, onChange: (e) => {\n                                setState((prev) => ({ ...prev, name: e.target.value }));\n                                if (nameError && e.target.value) {\n                                    setNameError(undefined);\n                                }\n                            }, placeholder: t('Ask a question'), type: 'text', value: state.name }))),\n                React.createElement(OptionFieldSet, { errors: optionsErrors, options: state.options, setErrors: setOptionsErrors, setState: setState }),\n                React.createElement(\"div\", { className: clsx('str-chat__form__expandable-field', {\n                        'str-chat__form__expandable-field--expanded': !state.enforce_unique_vote,\n                    }) },\n                    React.createElement(SimpleSwitchField, { checked: !state.enforce_unique_vote, id: 'enforce_unique_vote', labelText: t('Multiple answers'), onChange: (e) => {\n                            setState((prev) => ({\n                                ...prev,\n                                enforce_unique_vote: !e.target.checked,\n                                max_votes_allowed: '',\n                            }));\n                            setMultipleAnswerCountError(undefined);\n                        } }),\n                    !state.enforce_unique_vote && (React.createElement(\"div\", { className: clsx('str-chat__form__input-field', {\n                            'str-chat__form__input-field--has-error': multipleAnswerCountError,\n                        }) },\n                        React.createElement(\"div\", { className: clsx('str-chat__form__input-field__value') },\n                            React.createElement(FieldError, { className: 'str-chat__form__input-field__error', \"data-testid\": 'poll-max-votes-allowed-input-field-error', text: multipleAnswerCountError }),\n                            React.createElement(\"input\", { id: 'max_votes_allowed', onChange: (e) => {\n                                    const isValidValue = !e.target.value || e.target.value.match(VALID_MAX_VOTES_VALUE_REGEX);\n                                    if (!isValidValue) {\n                                        setMultipleAnswerCountError(t('Type a number from 2 to 10'));\n                                    }\n                                    else if (multipleAnswerCountError) {\n                                        setMultipleAnswerCountError(undefined);\n                                    }\n                                    setState((prev) => ({ ...prev, max_votes_allowed: e.target.value }));\n                                }, placeholder: t('Maximum number of votes (from 2 to 10)'), type: 'number', value: state.max_votes_allowed }))))),\n                React.createElement(SimpleSwitchField, { checked: state.voting_visibility === 'anonymous', id: 'voting_visibility', labelText: t('Anonymous poll'), onChange: (e) => setState((prev) => ({\n                        ...prev,\n                        voting_visibility: (e.target.checked ? 'anonymous' : 'public'),\n                    })) }),\n                React.createElement(SimpleSwitchField, { checked: state.allow_user_suggested_options, id: 'allow_user_suggested_options', labelText: t('Allow option suggestion'), onChange: (e) => setState((prev) => ({ ...prev, allow_user_suggested_options: e.target.checked })) }),\n                React.createElement(SimpleSwitchField, { checked: state.allow_answers, id: 'allow_answers', labelText: t('Allow comments'), onChange: (e) => setState((prev) => ({ ...prev, allow_answers: e.target.checked })) }))),\n        React.createElement(PollCreationDialogControls, { close: close, errors: [\n                ...(nameError ?? []),\n                ...(multipleAnswerCountError ?? []),\n                ...Object.keys(optionsErrors),\n            ], state: state })));\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}